/*
 * generated by Xtext
 */
package com.nagarro.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AppBuilderDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AppBuilderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppBuilder");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//AppBuilder:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamespaceDeclationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////TODO: more namespace & one system
		//AbstractElement:
		//	NamespaceDeclation | System;
		@Override public ParserRule getRule() { return rule; }

		//NamespaceDeclation | System
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamespaceDeclation
		public RuleCall getNamespaceDeclationParserRuleCall_0() { return cNamespaceDeclationParserRuleCall_0; }

		//System
		public RuleCall getSystemParserRuleCall_1() { return cSystemParserRuleCall_1; }
	}

	public class NamespaceDeclationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDeclation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NamespaceDeclation:
		//	"namespace" name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//"namespace" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBusinessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBusinessBusinessParserRuleCall_3_0 = (RuleCall)cBusinessAssignment_3.eContents().get(0);
		private final Assignment cUiAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUiUiParserRuleCall_4_0 = (RuleCall)cUiAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//System:
		//	"system" name=ID "{" business=Business ui=Ui "}";
		@Override public ParserRule getRule() { return rule; }

		//"system" name=ID "{" business=Business ui=Ui "}"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//business=Business
		public Assignment getBusinessAssignment_3() { return cBusinessAssignment_3; }

		//Business
		public RuleCall getBusinessBusinessParserRuleCall_3_0() { return cBusinessBusinessParserRuleCall_3_0; }

		//ui=Ui
		public Assignment getUiAssignment_4() { return cUiAssignment_4; }

		//Ui
		public RuleCall getUiUiParserRuleCall_4_0() { return cUiUiParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BusinessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Business");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBusinessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBusinessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsServiceParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////runs on server side
		//Business:
		//	{Business} "business" "{" elements+=Service* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Business} "business" "{" elements+=Service* "}"
		public Group getGroup() { return cGroup; }

		//{Business}
		public Action getBusinessAction_0() { return cBusinessAction_0; }

		//"business"
		public Keyword getBusinessKeyword_1() { return cBusinessKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=Service*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//Service
		public RuleCall getElementsServiceParserRuleCall_3_0() { return cElementsServiceParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final RuleCall cInstanceServiceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Service:
		//	InstanceService;
		@Override public ParserRule getRule() { return rule; }

		//InstanceService
		public RuleCall getInstanceServiceParserRuleCall() { return cInstanceServiceParserRuleCall; }
	}

	public class InstanceServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstanceNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cInstanceNameAssignment_1.eContents().get(0);
		
		//InstanceService:
		//	"instance" instanceName=QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//"instance" instanceName=QualifiedName
		public Group getGroup() { return cGroup; }

		//"instance"
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//instanceName=QualifiedName
		public Assignment getInstanceNameAssignment_1() { return cInstanceNameAssignment_1; }

		//QualifiedName
		public RuleCall getInstanceNameQualifiedNameParserRuleCall_1_0() { return cInstanceNameQualifiedNameParserRuleCall_1_0; }
	}

	public class UiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ui");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMainMainParserRuleCall_2_0 = (RuleCall)cMainAssignment_2.eContents().get(0);
		private final Assignment cServicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServicesServiceParserRuleCall_3_0 = (RuleCall)cServicesAssignment_3.eContents().get(0);
		private final Assignment cScreensAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScreensScreenParserRuleCall_4_0 = (RuleCall)cScreensAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////runs on ui side
		//Ui:
		//	"ui" "{" main=Main services+=Service* screens+=Screen* "}";
		@Override public ParserRule getRule() { return rule; }

		//"ui" "{" main=Main services+=Service* screens+=Screen* "}"
		public Group getGroup() { return cGroup; }

		//"ui"
		public Keyword getUiKeyword_0() { return cUiKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//main=Main
		public Assignment getMainAssignment_2() { return cMainAssignment_2; }

		//Main
		public RuleCall getMainMainParserRuleCall_2_0() { return cMainMainParserRuleCall_2_0; }

		//services+=Service*
		public Assignment getServicesAssignment_3() { return cServicesAssignment_3; }

		//Service
		public RuleCall getServicesServiceParserRuleCall_3_0() { return cServicesServiceParserRuleCall_3_0; }

		//screens+=Screen*
		public Assignment getScreensAssignment_4() { return cScreensAssignment_4; }

		//Screen
		public RuleCall getScreensScreenParserRuleCall_4_0() { return cScreensScreenParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cAppNameKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Assignment cAppNameAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cAppNameSTRINGTerminalRuleCall_3_0_2_0 = (RuleCall)cAppNameAssignment_3_0_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cAppVersionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Assignment cAppVersionAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cAppVersionSTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cAppVersionAssignment_3_1_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cDevicesKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Group cGroup_3_2_3 = (Group)cGroup_3_2.eContents().get(3);
		private final Assignment cDevicesAssignment_3_2_3_0 = (Assignment)cGroup_3_2_3.eContents().get(0);
		private final RuleCall cDevicesDeviceEnumRuleCall_3_2_3_0_0 = (RuleCall)cDevicesAssignment_3_2_3_0.eContents().get(0);
		private final Group cGroup_3_2_3_1 = (Group)cGroup_3_2_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_2_3_1_0 = (Keyword)cGroup_3_2_3_1.eContents().get(0);
		private final Assignment cDevicesAssignment_3_2_3_1_1 = (Assignment)cGroup_3_2_3_1.eContents().get(1);
		private final RuleCall cDevicesDeviceEnumRuleCall_3_2_3_1_1_0 = (RuleCall)cDevicesAssignment_3_2_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2_4 = (Keyword)cGroup_3_2.eContents().get(4);
		private final RuleCall cASEPARATORParserRuleCall_3_2_5 = (RuleCall)cGroup_3_2.eContents().get(5);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cEntryKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_3_1 = (RuleCall)cGroup_3_3.eContents().get(1);
		private final Assignment cScreenAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final CrossReference cScreenScreenCrossReference_3_3_2_0 = (CrossReference)cScreenAssignment_3_3_2.eContents().get(0);
		private final RuleCall cScreenScreenIDTerminalRuleCall_3_3_2_0_1 = (RuleCall)cScreenScreenCrossReference_3_3_2_0.eContents().get(1);
		private final RuleCall cASEPARATORParserRuleCall_3_3_3 = (RuleCall)cGroup_3_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cGeneralStyleKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_4_1 = (RuleCall)cGroup_3_4.eContents().get(1);
		private final Assignment cGeneralStyleAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cGeneralStyleSTRINGTerminalRuleCall_3_4_2_0 = (RuleCall)cGeneralStyleAssignment_3_4_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_4_3 = (RuleCall)cGroup_3_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Main:
		//	{Main} "main" "(" ("appName" VSEPARATOR appName=STRING ASEPARATOR? & "appVersion" VSEPARATOR appVersion=STRING
		//	ASEPARATOR? & "devices" VSEPARATOR "[" (devices+=Device ("," devices+=Device)*) "]" ASEPARATOR? & "entry" VSEPARATOR
		//	screen=[Screen] ASEPARATOR? & ("generalStyle" VSEPARATOR generalStyle=STRING ASEPARATOR?)?) ")";
		@Override public ParserRule getRule() { return rule; }

		//{Main} "main" "(" ("appName" VSEPARATOR appName=STRING ASEPARATOR? & "appVersion" VSEPARATOR appVersion=STRING
		//ASEPARATOR? & "devices" VSEPARATOR "[" (devices+=Device ("," devices+=Device)*) "]" ASEPARATOR? & "entry" VSEPARATOR
		//screen=[Screen] ASEPARATOR? & ("generalStyle" VSEPARATOR generalStyle=STRING ASEPARATOR?)?) ")"
		public Group getGroup() { return cGroup; }

		//{Main}
		public Action getMainAction_0() { return cMainAction_0; }

		//"main"
		public Keyword getMainKeyword_1() { return cMainKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//"appName" VSEPARATOR appName=STRING ASEPARATOR? & "appVersion" VSEPARATOR appVersion=STRING ASEPARATOR? & "devices"
		//VSEPARATOR "[" (devices+=Device ("," devices+=Device)*) "]" ASEPARATOR? & "entry" VSEPARATOR screen=[Screen]
		//ASEPARATOR? & ("generalStyle" VSEPARATOR generalStyle=STRING ASEPARATOR?)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"appName" VSEPARATOR appName=STRING ASEPARATOR?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"appName"
		public Keyword getAppNameKeyword_3_0_0() { return cAppNameKeyword_3_0_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_0_1() { return cVSEPARATORParserRuleCall_3_0_1; }

		//appName=STRING
		public Assignment getAppNameAssignment_3_0_2() { return cAppNameAssignment_3_0_2; }

		//STRING
		public RuleCall getAppNameSTRINGTerminalRuleCall_3_0_2_0() { return cAppNameSTRINGTerminalRuleCall_3_0_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_0_3() { return cASEPARATORParserRuleCall_3_0_3; }

		//"appVersion" VSEPARATOR appVersion=STRING ASEPARATOR?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"appVersion"
		public Keyword getAppVersionKeyword_3_1_0() { return cAppVersionKeyword_3_1_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_1_1() { return cVSEPARATORParserRuleCall_3_1_1; }

		//appVersion=STRING
		public Assignment getAppVersionAssignment_3_1_2() { return cAppVersionAssignment_3_1_2; }

		//STRING
		public RuleCall getAppVersionSTRINGTerminalRuleCall_3_1_2_0() { return cAppVersionSTRINGTerminalRuleCall_3_1_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_1_3() { return cASEPARATORParserRuleCall_3_1_3; }

		//"devices" VSEPARATOR "[" (devices+=Device ("," devices+=Device)*) "]" ASEPARATOR?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"devices"
		public Keyword getDevicesKeyword_3_2_0() { return cDevicesKeyword_3_2_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_2_1() { return cVSEPARATORParserRuleCall_3_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_2_2() { return cLeftSquareBracketKeyword_3_2_2; }

		//devices+=Device ("," devices+=Device)*
		public Group getGroup_3_2_3() { return cGroup_3_2_3; }

		//devices+=Device
		public Assignment getDevicesAssignment_3_2_3_0() { return cDevicesAssignment_3_2_3_0; }

		//Device
		public RuleCall getDevicesDeviceEnumRuleCall_3_2_3_0_0() { return cDevicesDeviceEnumRuleCall_3_2_3_0_0; }

		//("," devices+=Device)*
		public Group getGroup_3_2_3_1() { return cGroup_3_2_3_1; }

		//","
		public Keyword getCommaKeyword_3_2_3_1_0() { return cCommaKeyword_3_2_3_1_0; }

		//devices+=Device
		public Assignment getDevicesAssignment_3_2_3_1_1() { return cDevicesAssignment_3_2_3_1_1; }

		//Device
		public RuleCall getDevicesDeviceEnumRuleCall_3_2_3_1_1_0() { return cDevicesDeviceEnumRuleCall_3_2_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2_4() { return cRightSquareBracketKeyword_3_2_4; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_2_5() { return cASEPARATORParserRuleCall_3_2_5; }

		//"entry" VSEPARATOR screen=[Screen] ASEPARATOR?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"entry"
		public Keyword getEntryKeyword_3_3_0() { return cEntryKeyword_3_3_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_3_1() { return cVSEPARATORParserRuleCall_3_3_1; }

		//screen=[Screen]
		public Assignment getScreenAssignment_3_3_2() { return cScreenAssignment_3_3_2; }

		//[Screen]
		public CrossReference getScreenScreenCrossReference_3_3_2_0() { return cScreenScreenCrossReference_3_3_2_0; }

		//ID
		public RuleCall getScreenScreenIDTerminalRuleCall_3_3_2_0_1() { return cScreenScreenIDTerminalRuleCall_3_3_2_0_1; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_3_3() { return cASEPARATORParserRuleCall_3_3_3; }

		//("generalStyle" VSEPARATOR generalStyle=STRING ASEPARATOR?)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"generalStyle"
		public Keyword getGeneralStyleKeyword_3_4_0() { return cGeneralStyleKeyword_3_4_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_4_1() { return cVSEPARATORParserRuleCall_3_4_1; }

		//generalStyle=STRING
		public Assignment getGeneralStyleAssignment_3_4_2() { return cGeneralStyleAssignment_3_4_2; }

		//STRING
		public RuleCall getGeneralStyleSTRINGTerminalRuleCall_3_4_2_0() { return cGeneralStyleSTRINGTerminalRuleCall_3_4_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_4_3() { return cASEPARATORParserRuleCall_3_4_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ScreenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Screen");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleScreenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeScreenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Screen:
		//	SimpleScreen | CompositeScreen;
		@Override public ParserRule getRule() { return rule; }

		//SimpleScreen | CompositeScreen
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleScreen
		public RuleCall getSimpleScreenParserRuleCall_0() { return cSimpleScreenParserRuleCall_0; }

		//CompositeScreen
		public RuleCall getCompositeScreenParserRuleCall_1() { return cCompositeScreenParserRuleCall_1; }
	}

	public class SimpleScreenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleScreen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScreenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntryParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntryParametersEntryParametersParserRuleCall_3_0 = (RuleCall)cEntryParametersAssignment_3.eContents().get(0);
		private final Assignment cModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelModelParserRuleCall_4_0 = (RuleCall)cModelAssignment_4.eContents().get(0);
		private final Assignment cViewAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cViewViewParserRuleCall_5_0 = (RuleCall)cViewAssignment_5.eContents().get(0);
		private final Assignment cControllerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cControllerControllerParserRuleCall_6_0 = (RuleCall)cControllerAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SimpleScreen:
		//	"screen" name=ID "{" entryParameters=EntryParameters? model=Model view=View controller=Controller "}";
		@Override public ParserRule getRule() { return rule; }

		//"screen" name=ID "{" entryParameters=EntryParameters? model=Model view=View controller=Controller "}"
		public Group getGroup() { return cGroup; }

		//"screen"
		public Keyword getScreenKeyword_0() { return cScreenKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//entryParameters=EntryParameters?
		public Assignment getEntryParametersAssignment_3() { return cEntryParametersAssignment_3; }

		//EntryParameters
		public RuleCall getEntryParametersEntryParametersParserRuleCall_3_0() { return cEntryParametersEntryParametersParserRuleCall_3_0; }

		//model=Model
		public Assignment getModelAssignment_4() { return cModelAssignment_4; }

		//Model
		public RuleCall getModelModelParserRuleCall_4_0() { return cModelModelParserRuleCall_4_0; }

		//view=View
		public Assignment getViewAssignment_5() { return cViewAssignment_5; }

		//View
		public RuleCall getViewViewParserRuleCall_5_0() { return cViewViewParserRuleCall_5_0; }

		//controller=Controller
		public Assignment getControllerAssignment_6() { return cControllerAssignment_6; }

		//Controller
		public RuleCall getControllerControllerParserRuleCall_6_0() { return cControllerControllerParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EntryParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryparametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EntryParameters:
		//	"entryparameters" "{" attributes+=Attribute+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"entryparameters" "{" attributes+=Attribute+ "}"
		public Group getGroup() { return cGroup; }

		//"entryparameters"
		public Keyword getEntryparametersKeyword_0() { return cEntryparametersKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//attributes+=Attribute+
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitActionInitActionParserRuleCall_2_0 = (RuleCall)cInitActionAssignment_2.eContents().get(0);
		private final Assignment cValidatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValidatorValidatorParserRuleCall_3_0 = (RuleCall)cValidatorAssignment_3.eContents().get(0);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsActionParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Controller:
		//	"controller" "{" initAction=InitAction validator=Validator? actions+=Action* "}";
		@Override public ParserRule getRule() { return rule; }

		//"controller" "{" initAction=InitAction validator=Validator? actions+=Action* "}"
		public Group getGroup() { return cGroup; }

		//"controller"
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//initAction=InitAction
		public Assignment getInitActionAssignment_2() { return cInitActionAssignment_2; }

		//InitAction
		public RuleCall getInitActionInitActionParserRuleCall_2_0() { return cInitActionInitActionParserRuleCall_2_0; }

		//validator=Validator?
		public Assignment getValidatorAssignment_3() { return cValidatorAssignment_3; }

		//Validator
		public RuleCall getValidatorValidatorParserRuleCall_3_0() { return cValidatorValidatorParserRuleCall_3_0; }

		//actions+=Action*
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }

		//Action
		public RuleCall getActionsActionParserRuleCall_4_0() { return cActionsActionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatabindingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatabindingsDataBindingParserRuleCall_3_0 = (RuleCall)cDatabindingsAssignment_3.eContents().get(0);
		private final Assignment cUiListenerBindingssAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUiListenerBindingssUiListenerBindingParserRuleCall_4_0 = (RuleCall)cUiListenerBindingssAssignment_4.eContents().get(0);
		private final Assignment cValidationBindingsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValidationBindingsValidationBindingParserRuleCall_5_0 = (RuleCall)cValidationBindingsAssignment_5.eContents().get(0);
		private final Assignment cInstructionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInstructionsInstructionParserRuleCall_6_0 = (RuleCall)cInstructionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InitAction:
		//	{InitAction} "initaction" "{" databindings+=DataBinding* uiListenerBindingss+=UiListenerBinding*
		//	validationBindings+=ValidationBinding* instructions+=Instruction* "}";
		@Override public ParserRule getRule() { return rule; }

		//{InitAction} "initaction" "{" databindings+=DataBinding* uiListenerBindingss+=UiListenerBinding*
		//validationBindings+=ValidationBinding* instructions+=Instruction* "}"
		public Group getGroup() { return cGroup; }

		//{InitAction}
		public Action getInitActionAction_0() { return cInitActionAction_0; }

		//"initaction"
		public Keyword getInitactionKeyword_1() { return cInitactionKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//databindings+=DataBinding*
		public Assignment getDatabindingsAssignment_3() { return cDatabindingsAssignment_3; }

		//DataBinding
		public RuleCall getDatabindingsDataBindingParserRuleCall_3_0() { return cDatabindingsDataBindingParserRuleCall_3_0; }

		//uiListenerBindingss+=UiListenerBinding*
		public Assignment getUiListenerBindingssAssignment_4() { return cUiListenerBindingssAssignment_4; }

		//UiListenerBinding
		public RuleCall getUiListenerBindingssUiListenerBindingParserRuleCall_4_0() { return cUiListenerBindingssUiListenerBindingParserRuleCall_4_0; }

		//validationBindings+=ValidationBinding*
		public Assignment getValidationBindingsAssignment_5() { return cValidationBindingsAssignment_5; }

		//ValidationBinding
		public RuleCall getValidationBindingsValidationBindingParserRuleCall_5_0() { return cValidationBindingsValidationBindingParserRuleCall_5_0; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_6() { return cInstructionsAssignment_6; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_6_0() { return cInstructionsInstructionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ValidationBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidationBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConditionConditionCrossReference_1_0 = (CrossReference)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cConditionConditionIDTerminalRuleCall_1_0_1 = (RuleCall)cConditionConditionCrossReference_1_0.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cControlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cControlControlCrossReference_3_0 = (CrossReference)cControlAssignment_3.eContents().get(0);
		private final RuleCall cControlControlIDTerminalRuleCall_3_0_1 = (RuleCall)cControlControlCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cControlAccessAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cControlAccessQualifiedNameParserRuleCall_4_1_0 = (RuleCall)cControlAccessAssignment_4_1.eContents().get(0);
		
		//ValidationBinding: //	  validate two on textPersonAgeId.text
		//	"validate" condition=[Condition] "on" control=[Control] ("." controlAccess=QualifiedName)?;
		@Override public ParserRule getRule() { return rule; }

		////	  validate two on textPersonAgeId.text
		//"validate" condition=[Condition] "on" control=[Control] ("." controlAccess=QualifiedName)?
		public Group getGroup() { return cGroup; }

		////	  validate two on textPersonAgeId.text
		//"validate"
		public Keyword getValidateKeyword_0() { return cValidateKeyword_0; }

		//condition=[Condition]
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//[Condition]
		public CrossReference getConditionConditionCrossReference_1_0() { return cConditionConditionCrossReference_1_0; }

		//ID
		public RuleCall getConditionConditionIDTerminalRuleCall_1_0_1() { return cConditionConditionIDTerminalRuleCall_1_0_1; }

		//"on"
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//control=[Control]
		public Assignment getControlAssignment_3() { return cControlAssignment_3; }

		//[Control]
		public CrossReference getControlControlCrossReference_3_0() { return cControlControlCrossReference_3_0; }

		//ID
		public RuleCall getControlControlIDTerminalRuleCall_3_0_1() { return cControlControlIDTerminalRuleCall_3_0_1; }

		//("." controlAccess=QualifiedName)?
		public Group getGroup_4() { return cGroup_4; }

		//"."
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }

		//controlAccess=QualifiedName
		public Assignment getControlAccessAssignment_4_1() { return cControlAccessAssignment_4_1; }

		//QualifiedName
		public RuleCall getControlAccessQualifiedNameParserRuleCall_4_1_0() { return cControlAccessQualifiedNameParserRuleCall_4_1_0; }
	}

	public class UiListenerBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UiListenerBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionActionCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_1_0_1 = (RuleCall)cActionActionCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cControlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cControlControlCrossReference_3_0 = (CrossReference)cControlAssignment_3.eContents().get(0);
		private final RuleCall cControlControlIDTerminalRuleCall_3_0_1 = (RuleCall)cControlControlCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cControlAccessAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cControlAccessQualifiedNameParserRuleCall_4_1_0 = (RuleCall)cControlAccessAssignment_4_1.eContents().get(0);
		
		//UiListenerBinding: //	attach updateButtonSelection to PersonListScreen.updateButtonId.onSelection
		////TODO: do i need screen ID?!
		//	"attach" action=[Action] "to" control=[Control] ("." controlAccess=QualifiedName)?;
		@Override public ParserRule getRule() { return rule; }

		////	attach updateButtonSelection to PersonListScreen.updateButtonId.onSelection
		////TODO: do i need screen ID?!
		//"attach" action=[Action] "to" control=[Control] ("." controlAccess=QualifiedName)?
		public Group getGroup() { return cGroup; }

		////	attach updateButtonSelection to PersonListScreen.updateButtonId.onSelection
		////TODO: do i need screen ID?!
		//"attach"
		public Keyword getAttachKeyword_0() { return cAttachKeyword_0; }

		//action=[Action]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//[Action]
		public CrossReference getActionActionCrossReference_1_0() { return cActionActionCrossReference_1_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_1_0_1() { return cActionActionIDTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//control=[Control]
		public Assignment getControlAssignment_3() { return cControlAssignment_3; }

		//[Control]
		public CrossReference getControlControlCrossReference_3_0() { return cControlControlCrossReference_3_0; }

		//ID
		public RuleCall getControlControlIDTerminalRuleCall_3_0_1() { return cControlControlIDTerminalRuleCall_3_0_1; }

		//("." controlAccess=QualifiedName)?
		public Group getGroup_4() { return cGroup_4; }

		//"."
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }

		//controlAccess=QualifiedName
		public Assignment getControlAccessAssignment_4_1() { return cControlAccessAssignment_4_1; }

		//QualifiedName
		public RuleCall getControlAccessQualifiedNameParserRuleCall_4_1_0() { return cControlAccessQualifiedNameParserRuleCall_4_1_0; }
	}

	public class DataBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataBinding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleDataBindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumDataBindingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataBinding:
		//	SimpleDataBinding | EnumDataBinding;
		@Override public ParserRule getRule() { return rule; }

		//SimpleDataBinding | EnumDataBinding
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleDataBinding
		public RuleCall getSimpleDataBindingParserRuleCall_0() { return cSimpleDataBindingParserRuleCall_0; }

		//EnumDataBinding
		public RuleCall getEnumDataBindingParserRuleCall_1() { return cEnumDataBindingParserRuleCall_1; }
	}

	public class SimpleDataBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleDataBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelAttributeCrossReference_1_0 = (CrossReference)cModelAssignment_1.eContents().get(0);
		private final RuleCall cModelAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cModelAttributeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModelAccessAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModelAccessQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cModelAccessAssignment_2_1.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cControlAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cControlControlCrossReference_4_0 = (CrossReference)cControlAssignment_4.eContents().get(0);
		private final RuleCall cControlControlIDTerminalRuleCall_4_0_1 = (RuleCall)cControlControlCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cControlAccessAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cControlAccessQualifiedNameParserRuleCall_5_1_0 = (RuleCall)cControlAccessAssignment_5_1.eContents().get(0);
		
		//SimpleDataBinding: //	bind person.name to textPersonNameId.text
		//	"bind" model=[Attribute] ("." modelAccess=QualifiedName)? "to" control=[Control] ("." controlAccess=QualifiedName)?;
		@Override public ParserRule getRule() { return rule; }

		////	bind person.name to textPersonNameId.text
		//"bind" model=[Attribute] ("." modelAccess=QualifiedName)? "to" control=[Control] ("." controlAccess=QualifiedName)?
		public Group getGroup() { return cGroup; }

		////	bind person.name to textPersonNameId.text
		//"bind"
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }

		//model=[Attribute]
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//[Attribute]
		public CrossReference getModelAttributeCrossReference_1_0() { return cModelAttributeCrossReference_1_0; }

		//ID
		public RuleCall getModelAttributeIDTerminalRuleCall_1_0_1() { return cModelAttributeIDTerminalRuleCall_1_0_1; }

		//("." modelAccess=QualifiedName)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//modelAccess=QualifiedName
		public Assignment getModelAccessAssignment_2_1() { return cModelAccessAssignment_2_1; }

		//QualifiedName
		public RuleCall getModelAccessQualifiedNameParserRuleCall_2_1_0() { return cModelAccessQualifiedNameParserRuleCall_2_1_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//control=[Control]
		public Assignment getControlAssignment_4() { return cControlAssignment_4; }

		//[Control]
		public CrossReference getControlControlCrossReference_4_0() { return cControlControlCrossReference_4_0; }

		//ID
		public RuleCall getControlControlIDTerminalRuleCall_4_0_1() { return cControlControlIDTerminalRuleCall_4_0_1; }

		//("." controlAccess=QualifiedName)?
		public Group getGroup_5() { return cGroup_5; }

		//"."
		public Keyword getFullStopKeyword_5_0() { return cFullStopKeyword_5_0; }

		//controlAccess=QualifiedName
		public Assignment getControlAccessAssignment_5_1() { return cControlAccessAssignment_5_1; }

		//QualifiedName
		public RuleCall getControlAccessQualifiedNameParserRuleCall_5_1_0() { return cControlAccessQualifiedNameParserRuleCall_5_1_0; }
	}

	public class EnumDataBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDataBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEnumDataSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEnumClassNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cVSEPARATORParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cEnumClassNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnumClassNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cEnumClassNameAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cControlAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cControlControlCrossReference_8_0 = (CrossReference)cControlAssignment_8.eContents().get(0);
		private final RuleCall cControlControlIDTerminalRuleCall_8_0_1 = (RuleCall)cControlControlCrossReference_8_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cFullStopKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cControlAccessAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cControlAccessQualifiedNameParserRuleCall_9_1_0 = (RuleCall)cControlAccessAssignment_9_1.eContents().get(0);
		
		//EnumDataBinding: //	 bind enumDataSource(enumClassName:"com.nagarrro.app.domain.GenderEnum") to comboPersonGenderId.values
		//	"bind" "enumDataSource" "(" "enumClassName" VSEPARATOR enumClassName=STRING ")" "to" control=[Control] ("."
		//	controlAccess=QualifiedName)?;
		@Override public ParserRule getRule() { return rule; }

		////	 bind enumDataSource(enumClassName:"com.nagarrro.app.domain.GenderEnum") to comboPersonGenderId.values
		//"bind" "enumDataSource" "(" "enumClassName" VSEPARATOR enumClassName=STRING ")" "to" control=[Control] ("."
		//controlAccess=QualifiedName)?
		public Group getGroup() { return cGroup; }

		////	 bind enumDataSource(enumClassName:"com.nagarrro.app.domain.GenderEnum") to comboPersonGenderId.values
		//"bind"
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }

		//"enumDataSource"
		public Keyword getEnumDataSourceKeyword_1() { return cEnumDataSourceKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//"enumClassName"
		public Keyword getEnumClassNameKeyword_3() { return cEnumClassNameKeyword_3; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_4() { return cVSEPARATORParserRuleCall_4; }

		//enumClassName=STRING
		public Assignment getEnumClassNameAssignment_5() { return cEnumClassNameAssignment_5; }

		//STRING
		public RuleCall getEnumClassNameSTRINGTerminalRuleCall_5_0() { return cEnumClassNameSTRINGTerminalRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"to"
		public Keyword getToKeyword_7() { return cToKeyword_7; }

		//control=[Control]
		public Assignment getControlAssignment_8() { return cControlAssignment_8; }

		//[Control]
		public CrossReference getControlControlCrossReference_8_0() { return cControlControlCrossReference_8_0; }

		//ID
		public RuleCall getControlControlIDTerminalRuleCall_8_0_1() { return cControlControlIDTerminalRuleCall_8_0_1; }

		//("." controlAccess=QualifiedName)?
		public Group getGroup_9() { return cGroup_9; }

		//"."
		public Keyword getFullStopKeyword_9_0() { return cFullStopKeyword_9_0; }

		//controlAccess=QualifiedName
		public Assignment getControlAccessAssignment_9_1() { return cControlAccessAssignment_9_1; }

		//QualifiedName
		public RuleCall getControlAccessQualifiedNameParserRuleCall_9_1_0() { return cControlAccessQualifiedNameParserRuleCall_9_1_0; }
	}

	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValidatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValidatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionsConditionParserRuleCall_3_0 = (RuleCall)cConditionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Validator:
		//	{Validator} "validator" "{" conditions+=Condition* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Validator} "validator" "{" conditions+=Condition* "}"
		public Group getGroup() { return cGroup; }

		//{Validator}
		public Action getValidatorAction_0() { return cValidatorAction_0; }

		//"validator"
		public Keyword getValidatorKeyword_1() { return cValidatorKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//conditions+=Condition*
		public Assignment getConditionsAssignment_3() { return cConditionsAssignment_3; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_3_0() { return cConditionsConditionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition:
		//	"condition" name=ID "(" conditionExpression=ConditionExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//"condition" name=ID "(" conditionExpression=ConditionExpression ")"
		public Group getGroup() { return cGroup; }

		//"condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//conditionExpression=ConditionExpression
		public Assignment getConditionExpressionAssignment_3() { return cConditionExpressionAssignment_3; }

		//ConditionExpression
		public RuleCall getConditionExpressionConditionExpressionParserRuleCall_3_0() { return cConditionExpressionConditionExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleConditionExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeConditionExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionExpression:
		//	SimpleConditionExpression | CompositeConditionExpression;
		@Override public ParserRule getRule() { return rule; }

		//SimpleConditionExpression | CompositeConditionExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleConditionExpression
		public RuleCall getSimpleConditionExpressionParserRuleCall_0() { return cSimpleConditionExpressionParserRuleCall_0; }

		//CompositeConditionExpression
		public RuleCall getCompositeConditionExpressionParserRuleCall_1() { return cCompositeConditionExpressionParserRuleCall_1; }
	}

	public class SimpleConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleConditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameIDTerminalRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cAttributeTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////TODO: expression
		//SimpleConditionExpression:
		//	variableName=ID VSEPARATOR AttributeType "|";
		@Override public ParserRule getRule() { return rule; }

		//variableName=ID VSEPARATOR AttributeType "|"
		public Group getGroup() { return cGroup; }

		//variableName=ID
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }

		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0_0() { return cVariableNameIDTerminalRuleCall_0_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_1() { return cVSEPARATORParserRuleCall_1; }

		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_2() { return cAttributeTypeParserRuleCall_2; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}

	public class CompositeConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeConditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConditionsConditionCrossReference_0_0 = (CrossReference)cConditionsAssignment_0.eContents().get(0);
		private final RuleCall cConditionsConditionIDTerminalRuleCall_0_0_1 = (RuleCall)cConditionsConditionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cConditionsConditionCrossReference_1_1_0 = (CrossReference)cConditionsAssignment_1_1.eContents().get(0);
		private final RuleCall cConditionsConditionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cConditionsConditionCrossReference_1_1_0.eContents().get(1);
		
		//CompositeConditionExpression:
		//	conditions+=[Condition] ("and" conditions+=[Condition])*;
		@Override public ParserRule getRule() { return rule; }

		//conditions+=[Condition] ("and" conditions+=[Condition])*
		public Group getGroup() { return cGroup; }

		//conditions+=[Condition]
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }

		//[Condition]
		public CrossReference getConditionsConditionCrossReference_0_0() { return cConditionsConditionCrossReference_0_0; }

		//ID
		public RuleCall getConditionsConditionIDTerminalRuleCall_0_0_1() { return cConditionsConditionIDTerminalRuleCall_0_0_1; }

		//("and" conditions+=[Condition])*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//conditions+=[Condition]
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }

		//[Condition]
		public CrossReference getConditionsConditionCrossReference_1_1_0() { return cConditionsConditionCrossReference_1_1_0; }

		//ID
		public RuleCall getConditionsConditionIDTerminalRuleCall_1_1_0_1() { return cConditionsConditionIDTerminalRuleCall_1_1_0_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final RuleCall cUiActionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Action:
		//	UiAction;
		@Override public ParserRule getRule() { return rule; }

		//UiAction
		public RuleCall getUiActionParserRuleCall() { return cUiActionParserRuleCall; }
	}

	public class UiActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UiAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUiactionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UiAction:
		//	"uiaction" name=ID "{" instructions+=Instruction+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"uiaction" name=ID "{" instructions+=Instruction+ "}"
		public Group getGroup() { return cGroup; }

		//"uiaction"
		public Keyword getUiactionKeyword_0() { return cUiactionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//instructions+=Instruction+
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExecuteActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Instruction:
		//	SetInstruction | Navigate | ExecuteAction;
		@Override public ParserRule getRule() { return rule; }

		//SetInstruction | Navigate | ExecuteAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetInstruction
		public RuleCall getSetInstructionParserRuleCall_0() { return cSetInstructionParserRuleCall_0; }

		//Navigate
		public RuleCall getNavigateParserRuleCall_1() { return cNavigateParserRuleCall_1; }

		//ExecuteAction
		public RuleCall getExecuteActionParserRuleCall_2() { return cExecuteActionParserRuleCall_2; }
	}

	public class SetInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelAttributeCrossReference_1_0 = (CrossReference)cModelAssignment_1.eContents().get(0);
		private final RuleCall cModelAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cModelAttributeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModelAccessAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModelAccessQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cModelAccessAssignment_2_1.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAssignmentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAssignmentSetInstructionAssignmentParserRuleCall_4_0 = (RuleCall)cAssignmentAssignment_4.eContents().get(0);
		
		//SetInstruction: //	 set person to restcall(url:"/person/{id}", returnType:Person, id:param1)
		//	"set" model=[Attribute] ("." modelAccess=QualifiedName)? "to" assignment=SetInstructionAssignment;
		@Override public ParserRule getRule() { return rule; }

		////	 set person to restcall(url:"/person/{id}", returnType:Person, id:param1)
		//"set" model=[Attribute] ("." modelAccess=QualifiedName)? "to" assignment=SetInstructionAssignment
		public Group getGroup() { return cGroup; }

		////	 set person to restcall(url:"/person/{id}", returnType:Person, id:param1)
		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//model=[Attribute]
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//[Attribute]
		public CrossReference getModelAttributeCrossReference_1_0() { return cModelAttributeCrossReference_1_0; }

		//ID
		public RuleCall getModelAttributeIDTerminalRuleCall_1_0_1() { return cModelAttributeIDTerminalRuleCall_1_0_1; }

		//("." modelAccess=QualifiedName)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//modelAccess=QualifiedName
		public Assignment getModelAccessAssignment_2_1() { return cModelAccessAssignment_2_1; }

		//QualifiedName
		public RuleCall getModelAccessQualifiedNameParserRuleCall_2_1_0() { return cModelAccessQualifiedNameParserRuleCall_2_1_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//assignment=SetInstructionAssignment
		public Assignment getAssignmentAssignment_4() { return cAssignmentAssignment_4; }

		//SetInstructionAssignment
		public RuleCall getAssignmentSetInstructionAssignmentParserRuleCall_4_0() { return cAssignmentSetInstructionAssignmentParserRuleCall_4_0; }
	}

	public class NavigateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Navigate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigatetoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScreenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScreenScreenCrossReference_1_0 = (CrossReference)cScreenAssignment_1.eContents().get(0);
		private final RuleCall cScreenScreenIDTerminalRuleCall_1_0_1 = (RuleCall)cScreenScreenCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsParametersParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Navigate:
		//	"navigateto" screen=[Screen] ("(" (params+=Parameters ASEPARATOR?)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//"navigateto" screen=[Screen] ("(" (params+=Parameters ASEPARATOR?)* ")")?
		public Group getGroup() { return cGroup; }

		//"navigateto"
		public Keyword getNavigatetoKeyword_0() { return cNavigatetoKeyword_0; }

		//screen=[Screen]
		public Assignment getScreenAssignment_1() { return cScreenAssignment_1; }

		//[Screen]
		public CrossReference getScreenScreenCrossReference_1_0() { return cScreenScreenCrossReference_1_0; }

		//ID
		public RuleCall getScreenScreenIDTerminalRuleCall_1_0_1() { return cScreenScreenIDTerminalRuleCall_1_0_1; }

		//("(" (params+=Parameters ASEPARATOR?)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(params+=Parameters ASEPARATOR?)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=Parameters
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//Parameters
		public RuleCall getParamsParametersParserRuleCall_2_1_0_0() { return cParamsParametersParserRuleCall_2_1_0_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_2_1_1() { return cASEPARATORParserRuleCall_2_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class ExecuteActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExecuteAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionActionCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_1_0_1 = (RuleCall)cActionActionCrossReference_1_0.eContents().get(1);
		
		//ExecuteAction:
		//	"execute" action=[Action];
		@Override public ParserRule getRule() { return rule; }

		//"execute" action=[Action]
		public Group getGroup() { return cGroup; }

		//"execute"
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }

		//action=[Action]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//[Action]
		public CrossReference getActionActionCrossReference_1_0() { return cActionActionCrossReference_1_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_1_0_1() { return cActionActionIDTerminalRuleCall_1_0_1; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Keyword cParamsKeyword = (Keyword)rule.eContents().get(1);
		
		////TODO:
		//Parameters:
		//	"params";
		@Override public ParserRule getRule() { return rule; }

		//"params"
		public Keyword getParamsKeyword() { return cParamsKeyword; }
	}

	public class SetInstructionAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetInstructionAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRestCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSetInstructionAssignmentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSetInstructionAssignmentAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cDynamicValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cControlValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SetInstructionAssignment:
		//	RestCall | {SetInstructionAssignment} STRING | {SetInstructionAssignment} INT | DynamicValue | ControlValue;
		@Override public ParserRule getRule() { return rule; }

		//RestCall | {SetInstructionAssignment} STRING | {SetInstructionAssignment} INT | DynamicValue | ControlValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//RestCall
		public RuleCall getRestCallParserRuleCall_0() { return cRestCallParserRuleCall_0; }

		//{SetInstructionAssignment} STRING
		public Group getGroup_1() { return cGroup_1; }

		//{SetInstructionAssignment}
		public Action getSetInstructionAssignmentAction_1_0() { return cSetInstructionAssignmentAction_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }

		//{SetInstructionAssignment} INT
		public Group getGroup_2() { return cGroup_2; }

		//{SetInstructionAssignment}
		public Action getSetInstructionAssignmentAction_2_0() { return cSetInstructionAssignmentAction_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//DynamicValue
		public RuleCall getDynamicValueParserRuleCall_3() { return cDynamicValueParserRuleCall_3; }

		//ControlValue
		public RuleCall getControlValueParserRuleCall_4() { return cControlValueParserRuleCall_4; }
	}

	public class RestCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestcallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUrlKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cUrlAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUrlURLParserRuleCall_2_2_0 = (RuleCall)cUrlAssignment_2_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReturnTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cAttributeTypeParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RestCall:
		//	"restcall" "(" ("url" VSEPARATOR url=URL) ASEPARATOR ("returnType" VSEPARATOR AttributeType) //TODO
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//"restcall" "(" ("url" VSEPARATOR url=URL) ASEPARATOR ("returnType" VSEPARATOR AttributeType) //TODO
		//")"
		public Group getGroup() { return cGroup; }

		//"restcall"
		public Keyword getRestcallKeyword_0() { return cRestcallKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"url" VSEPARATOR url=URL
		public Group getGroup_2() { return cGroup_2; }

		//"url"
		public Keyword getUrlKeyword_2_0() { return cUrlKeyword_2_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_2_1() { return cVSEPARATORParserRuleCall_2_1; }

		//url=URL
		public Assignment getUrlAssignment_2_2() { return cUrlAssignment_2_2; }

		//URL
		public RuleCall getUrlURLParserRuleCall_2_2_0() { return cUrlURLParserRuleCall_2_2_0; }

		//ASEPARATOR
		public RuleCall getASEPARATORParserRuleCall_3() { return cASEPARATORParserRuleCall_3; }

		//"returnType" VSEPARATOR AttributeType
		public Group getGroup_4() { return cGroup_4; }

		//"returnType"
		public Keyword getReturnTypeKeyword_4_0() { return cReturnTypeKeyword_4_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_4_1() { return cVSEPARATORParserRuleCall_4_1; }

		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_4_2() { return cAttributeTypeParserRuleCall_4_2; }

		////TODO
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ControlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cControlAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cControlControlCrossReference_0_0 = (CrossReference)cControlAssignment_0.eContents().get(0);
		private final RuleCall cControlControlIDTerminalRuleCall_0_0_1 = (RuleCall)cControlControlCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cControlAccessAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cControlAccessQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cControlAccessAssignment_1_1.eContents().get(0);
		
		//ControlValue:
		//	control=[Control] ("." controlAccess=QualifiedName)?;
		@Override public ParserRule getRule() { return rule; }

		//control=[Control] ("." controlAccess=QualifiedName)?
		public Group getGroup() { return cGroup; }

		//control=[Control]
		public Assignment getControlAssignment_0() { return cControlAssignment_0; }

		//[Control]
		public CrossReference getControlControlCrossReference_0_0() { return cControlControlCrossReference_0_0; }

		//ID
		public RuleCall getControlControlIDTerminalRuleCall_0_0_1() { return cControlControlIDTerminalRuleCall_0_0_1; }

		//("." controlAccess=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//controlAccess=QualifiedName
		public Assignment getControlAccessAssignment_1_1() { return cControlAccessAssignment_1_1; }

		//QualifiedName
		public RuleCall getControlAccessQualifiedNameParserRuleCall_1_1_0() { return cControlAccessQualifiedNameParserRuleCall_1_1_0; }
	}

	public class URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URL");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//URL:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	{Model} "model" "{" attributes+=Attribute* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Model} "model" "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLayoutsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayoutsLayoutParserRuleCall_2_0 = (RuleCall)cLayoutsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//View:
		//	"view" "{" layouts+=Layout "}";
		@Override public ParserRule getRule() { return rule; }

		//"view" "{" layouts+=Layout "}"
		public Group getGroup() { return cGroup; }

		//"view"
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//layouts+=Layout
		public Assignment getLayoutsAssignment_2() { return cLayoutsAssignment_2; }

		//Layout
		public RuleCall getLayoutsLayoutParserRuleCall_2_0() { return cLayoutsLayoutParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cGridLayoutParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cRowLayoutParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlsControlParserRuleCall_2_0 = (RuleCall)cControlsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Layout:
		//	(GridLayout | RowLayout) "{" controls+=Control* "}";
		@Override public ParserRule getRule() { return rule; }

		//(GridLayout | RowLayout) "{" controls+=Control* "}"
		public Group getGroup() { return cGroup; }

		//GridLayout | RowLayout
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//GridLayout
		public RuleCall getGridLayoutParserRuleCall_0_0() { return cGridLayoutParserRuleCall_0_0; }

		//RowLayout
		public RuleCall getRowLayoutParserRuleCall_0_1() { return cRowLayoutParserRuleCall_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//controls+=Control*
		public Assignment getControlsAssignment_2() { return cControlsAssignment_2; }

		//Control
		public RuleCall getControlsControlParserRuleCall_2_0() { return cControlsControlParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class GridLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GridLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTypeGridKeyword_4_0 = (Keyword)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColumnsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cColumnsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cColumnsINTTerminalRuleCall_6_2_0 = (RuleCall)cColumnsAssignment_6_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GridLayout:
		//	"layout" "(" "type" ":" type="\"grid\"" ASEPARATOR ("columns" VSEPARATOR columns=INT ASEPARATOR?)? ")";
		@Override public ParserRule getRule() { return rule; }

		//"layout" "(" "type" ":" type="\"grid\"" ASEPARATOR ("columns" VSEPARATOR columns=INT ASEPARATOR?)? ")"
		public Group getGroup() { return cGroup; }

		//"layout"
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type="\"grid\""
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//"\"grid\""
		public Keyword getTypeGridKeyword_4_0() { return cTypeGridKeyword_4_0; }

		//ASEPARATOR
		public RuleCall getASEPARATORParserRuleCall_5() { return cASEPARATORParserRuleCall_5; }

		//("columns" VSEPARATOR columns=INT ASEPARATOR?)?
		public Group getGroup_6() { return cGroup_6; }

		//"columns"
		public Keyword getColumnsKeyword_6_0() { return cColumnsKeyword_6_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_6_1() { return cVSEPARATORParserRuleCall_6_1; }

		//columns=INT
		public Assignment getColumnsAssignment_6_2() { return cColumnsAssignment_6_2; }

		//INT
		public RuleCall getColumnsINTTerminalRuleCall_6_2_0() { return cColumnsINTTerminalRuleCall_6_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_6_3() { return cASEPARATORParserRuleCall_6_3; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class RowLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RowLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTypeRowlayoutKeyword_4_0 = (Keyword)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RowLayout:
		//	"layout" "(" "type" ":" type="\"rowlayout\"" ")";
		@Override public ParserRule getRule() { return rule; }

		//"layout" "(" "type" ":" type="\"rowlayout\"" ")"
		public Group getGroup() { return cGroup; }

		//"layout"
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type="\"rowlayout\""
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//"\"rowlayout\""
		public Keyword getTypeRowlayoutKeyword_4_0() { return cTypeRowlayoutKeyword_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Control");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScreenLayoutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cButtonParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLabelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Control:
		//	Layout | ScreenLayout | List | Text | Button | Label;
		@Override public ParserRule getRule() { return rule; }

		//Layout | ScreenLayout | List | Text | Button | Label
		public Alternatives getAlternatives() { return cAlternatives; }

		//Layout
		public RuleCall getLayoutParserRuleCall_0() { return cLayoutParserRuleCall_0; }

		//ScreenLayout
		public RuleCall getScreenLayoutParserRuleCall_1() { return cScreenLayoutParserRuleCall_1; }

		//List
		public RuleCall getListParserRuleCall_2() { return cListParserRuleCall_2; }

		//Text
		public RuleCall getTextParserRuleCall_3() { return cTextParserRuleCall_3; }

		//Button
		public RuleCall getButtonParserRuleCall_4() { return cButtonParserRuleCall_4; }

		//Label
		public RuleCall getLabelParserRuleCall_5() { return cLabelParserRuleCall_5; }
	}

	public class ScreenLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScreenLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScreenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScreenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScreenScreenCrossReference_1_0 = (CrossReference)cScreenAssignment_1.eContents().get(0);
		private final RuleCall cScreenScreenIDTerminalRuleCall_1_0_1 = (RuleCall)cScreenScreenCrossReference_1_0.eContents().get(1);
		
		//ScreenLayout:
		//	"screen" screen=[Screen];
		@Override public ParserRule getRule() { return rule; }

		//"screen" screen=[Screen]
		public Group getGroup() { return cGroup; }

		//"screen"
		public Keyword getScreenKeyword_0() { return cScreenKeyword_0; }

		//screen=[Screen]
		public Assignment getScreenAssignment_1() { return cScreenAssignment_1; }

		//[Screen]
		public CrossReference getScreenScreenCrossReference_1_0() { return cScreenScreenCrossReference_1_0; }

		//ID
		public RuleCall getScreenScreenIDTerminalRuleCall_1_0_1() { return cScreenScreenIDTerminalRuleCall_1_0_1; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cLabelproviderKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Assignment cLabelproviderAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cLabelproviderValueParserRuleCall_3_0_2_0 = (RuleCall)cLabelproviderAssignment_3_0_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cCssStyleKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Assignment cCssStyleAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cCssStyleValueParserRuleCall_3_1_2_0 = (RuleCall)cCssStyleAssignment_3_1_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cTooltipKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Assignment cTooltipAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cTooltipValueParserRuleCall_3_2_2_0 = (RuleCall)cTooltipAssignment_3_2_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_2_3 = (RuleCall)cGroup_3_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//List: //	list personListId ( labelprovider: (p:Person | p.name + " " + p.age) ,   cssItem: (p:Person | (p.age<10?"cssYesClass":"cssNoClass") ),    tooltip: (p:Person | p.age )  )
		//	"list" name=ID "(" (("labelprovider" VSEPARATOR labelprovider=Value ASEPARATOR?)? & ("cssStyle" VSEPARATOR
		//	cssStyle=Value ASEPARATOR?)? & ("tooltip" VSEPARATOR tooltip=Value ASEPARATOR?)?) ")";
		@Override public ParserRule getRule() { return rule; }

		////	list personListId ( labelprovider: (p:Person | p.name + " " + p.age) ,   cssItem: (p:Person | (p.age<10?"cssYesClass":"cssNoClass") ),    tooltip: (p:Person | p.age )  )
		//"list" name=ID "(" (("labelprovider" VSEPARATOR labelprovider=Value ASEPARATOR?)? & ("cssStyle" VSEPARATOR
		//cssStyle=Value ASEPARATOR?)? & ("tooltip" VSEPARATOR tooltip=Value ASEPARATOR?)?) ")"
		public Group getGroup() { return cGroup; }

		////	list personListId ( labelprovider: (p:Person | p.name + " " + p.age) ,   cssItem: (p:Person | (p.age<10?"cssYesClass":"cssNoClass") ),    tooltip: (p:Person | p.age )  )
		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//("labelprovider" VSEPARATOR labelprovider=Value ASEPARATOR?)? & ("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? &
		//("tooltip" VSEPARATOR tooltip=Value ASEPARATOR?)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("labelprovider" VSEPARATOR labelprovider=Value ASEPARATOR?)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"labelprovider"
		public Keyword getLabelproviderKeyword_3_0_0() { return cLabelproviderKeyword_3_0_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_0_1() { return cVSEPARATORParserRuleCall_3_0_1; }

		//labelprovider=Value
		public Assignment getLabelproviderAssignment_3_0_2() { return cLabelproviderAssignment_3_0_2; }

		//Value
		public RuleCall getLabelproviderValueParserRuleCall_3_0_2_0() { return cLabelproviderValueParserRuleCall_3_0_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_0_3() { return cASEPARATORParserRuleCall_3_0_3; }

		//("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"cssStyle"
		public Keyword getCssStyleKeyword_3_1_0() { return cCssStyleKeyword_3_1_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_1_1() { return cVSEPARATORParserRuleCall_3_1_1; }

		//cssStyle=Value
		public Assignment getCssStyleAssignment_3_1_2() { return cCssStyleAssignment_3_1_2; }

		//Value
		public RuleCall getCssStyleValueParserRuleCall_3_1_2_0() { return cCssStyleValueParserRuleCall_3_1_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_1_3() { return cASEPARATORParserRuleCall_3_1_3; }

		//("tooltip" VSEPARATOR tooltip=Value ASEPARATOR?)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"tooltip"
		public Keyword getTooltipKeyword_3_2_0() { return cTooltipKeyword_3_2_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_2_1() { return cVSEPARATORParserRuleCall_3_2_1; }

		//tooltip=Value
		public Assignment getTooltipAssignment_3_2_2() { return cTooltipAssignment_3_2_2; }

		//Value
		public RuleCall getTooltipValueParserRuleCall_3_2_2_0() { return cTooltipValueParserRuleCall_3_2_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_2_3() { return cASEPARATORParserRuleCall_3_2_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDynamicValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	{Value} STRING | INT | DynamicValue;
		@Override public ParserRule getRule() { return rule; }

		//{Value} STRING | INT | DynamicValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Value} STRING
		public Group getGroup_0() { return cGroup_0; }

		//{Value}
		public Action getValueAction_0_0() { return cValueAction_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1() { return cSTRINGTerminalRuleCall_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//DynamicValue
		public RuleCall getDynamicValueParserRuleCall_2() { return cDynamicValueParserRuleCall_2; }
	}

	public class DynamicValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableNameIDTerminalRuleCall_1_0 = (RuleCall)cVariableNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAttributeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DynamicValue:
		//	"(" variableName=ID ":" type=AttributeType "|" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" variableName=ID ":" type=AttributeType "|" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//variableName=ID
		public Assignment getVariableNameAssignment_1() { return cVariableNameAssignment_1; }

		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_1_0() { return cVariableNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=AttributeType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_3_0() { return cTypeAttributeTypeParserRuleCall_3_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermsExpressionTermParserRuleCall_0_0 = (RuleCall)cTermsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermsExpressionTermParserRuleCall_1_1_0 = (RuleCall)cTermsAssignment_1_1.eContents().get(0);
		
		////TODO: for now simple expression
		//Expression:
		//	terms+=ExpressionTerm ("+" terms+=ExpressionTerm)*;
		@Override public ParserRule getRule() { return rule; }

		//terms+=ExpressionTerm ("+" terms+=ExpressionTerm)*
		public Group getGroup() { return cGroup; }

		//terms+=ExpressionTerm
		public Assignment getTermsAssignment_0() { return cTermsAssignment_0; }

		//ExpressionTerm
		public RuleCall getTermsExpressionTermParserRuleCall_0_0() { return cTermsExpressionTermParserRuleCall_0_0; }

		//("+" terms+=ExpressionTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//terms+=ExpressionTerm
		public Assignment getTermsAssignment_1_1() { return cTermsAssignment_1_1; }

		//ExpressionTerm
		public RuleCall getTermsExpressionTermParserRuleCall_1_1_0() { return cTermsExpressionTermParserRuleCall_1_1_0; }
	}

	public class ExpressionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExpressionTerm:
		//	QualifiedName | STRING | INT;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName | STRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cCssStyleKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Assignment cCssStyleAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cCssStyleValueParserRuleCall_3_0_2_0 = (RuleCall)cCssStyleAssignment_3_0_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cResourceKeyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Assignment cResourceKeyAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cResourceKeyValueParserRuleCall_3_1_2_0 = (RuleCall)cResourceKeyAssignment_3_1_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Text:
		//	"text" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR resourceKey=Value
		//	ASEPARATOR?)?) ")";
		@Override public ParserRule getRule() { return rule; }

		//"text" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR resourceKey=Value
		//ASEPARATOR?)?) ")"
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR resourceKey=Value ASEPARATOR?)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"cssStyle"
		public Keyword getCssStyleKeyword_3_0_0() { return cCssStyleKeyword_3_0_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_0_1() { return cVSEPARATORParserRuleCall_3_0_1; }

		//cssStyle=Value
		public Assignment getCssStyleAssignment_3_0_2() { return cCssStyleAssignment_3_0_2; }

		//Value
		public RuleCall getCssStyleValueParserRuleCall_3_0_2_0() { return cCssStyleValueParserRuleCall_3_0_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_0_3() { return cASEPARATORParserRuleCall_3_0_3; }

		//("resourceKey" VSEPARATOR resourceKey=Value ASEPARATOR?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"resourceKey"
		public Keyword getResourceKeyKeyword_3_1_0() { return cResourceKeyKeyword_3_1_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_1_1() { return cVSEPARATORParserRuleCall_3_1_1; }

		//resourceKey=Value
		public Assignment getResourceKeyAssignment_3_1_2() { return cResourceKeyAssignment_3_1_2; }

		//Value
		public RuleCall getResourceKeyValueParserRuleCall_3_1_2_0() { return cResourceKeyValueParserRuleCall_3_1_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_1_3() { return cASEPARATORParserRuleCall_3_1_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cCssStyleKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Assignment cCssStyleAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cCssStyleValueParserRuleCall_3_0_2_0 = (RuleCall)cCssStyleAssignment_3_0_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cResourceKeyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Assignment cResourceKeyAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cResourceKeyValueParserRuleCall_3_1_2_0 = (RuleCall)cResourceKeyAssignment_3_1_2.eContents().get(0);
		private final RuleCall cASEPARATORParserRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Button:
		//	"button" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR
		//	resourceKey=Value ASEPARATOR?)?) ")";
		@Override public ParserRule getRule() { return rule; }

		//"button" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR resourceKey=Value
		//ASEPARATOR?)?) ")"
		public Group getGroup() { return cGroup; }

		//"button"
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR resourceKey=Value ASEPARATOR?)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"cssStyle"
		public Keyword getCssStyleKeyword_3_0_0() { return cCssStyleKeyword_3_0_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_0_1() { return cVSEPARATORParserRuleCall_3_0_1; }

		//cssStyle=Value
		public Assignment getCssStyleAssignment_3_0_2() { return cCssStyleAssignment_3_0_2; }

		//Value
		public RuleCall getCssStyleValueParserRuleCall_3_0_2_0() { return cCssStyleValueParserRuleCall_3_0_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_0_3() { return cASEPARATORParserRuleCall_3_0_3; }

		//("resourceKey" VSEPARATOR resourceKey=Value ASEPARATOR?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"resourceKey"
		public Keyword getResourceKeyKeyword_3_1_0() { return cResourceKeyKeyword_3_1_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_1_1() { return cVSEPARATORParserRuleCall_3_1_1; }

		//resourceKey=Value
		public Assignment getResourceKeyAssignment_3_1_2() { return cResourceKeyAssignment_3_1_2; }

		//Value
		public RuleCall getResourceKeyValueParserRuleCall_3_1_2_0() { return cResourceKeyValueParserRuleCall_3_1_2_0; }

		//ASEPARATOR?
		public RuleCall getASEPARATORParserRuleCall_3_1_3() { return cASEPARATORParserRuleCall_3_1_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cResourceKeyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cResourceKeyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cResourceKeyValueParserRuleCall_3_2_0 = (RuleCall)cResourceKeyAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Label:
		//	"label" name=ID "(" ("resourceKey" VSEPARATOR resourceKey=Value)? ")";
		@Override public ParserRule getRule() { return rule; }

		//"label" name=ID "(" ("resourceKey" VSEPARATOR resourceKey=Value)? ")"
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//("resourceKey" VSEPARATOR resourceKey=Value)?
		public Group getGroup_3() { return cGroup_3; }

		//"resourceKey"
		public Keyword getResourceKeyKeyword_3_0() { return cResourceKeyKeyword_3_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_3_1() { return cVSEPARATORParserRuleCall_3_1; }

		//resourceKey=Value
		public Assignment getResourceKeyAssignment_3_2() { return cResourceKeyAssignment_3_2; }

		//Value
		public RuleCall getResourceKeyValueParserRuleCall_3_2_0() { return cResourceKeyValueParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cVSEPARATORParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAttributeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		////TODO:
		//Attribute:
		//	name=ID VSEPARATOR type=AttributeType;
		@Override public ParserRule getRule() { return rule; }

		//name=ID VSEPARATOR type=AttributeType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//VSEPARATOR
		public RuleCall getVSEPARATORParserRuleCall_1() { return cVSEPARATORParserRuleCall_1; }

		//type=AttributeType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_2_0() { return cTypeAttributeTypeParserRuleCall_2_0; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final RuleCall cQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////TODO
		//AttributeType:
		//	QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall() { return cQualifiedNameParserRuleCall; }
	}

	public class CompositeScreenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeScreen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScreenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cScreensKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLayoutsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLayoutsLayoutParserRuleCall_5_0 = (RuleCall)cLayoutsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CompositeScreen: //	screen allscreenshere
		////		{
		////			screens 
		////	     	{
		//	"screen" name=ID "{" "screens" "{" layouts+=Layout "}" "}";
		@Override public ParserRule getRule() { return rule; }

		////	screen allscreenshere
		////		{
		////			screens 
		////	     	{
		//"screen" name=ID "{" "screens" "{" layouts+=Layout "}" "}"
		public Group getGroup() { return cGroup; }

		////	screen allscreenshere
		////		{
		////			screens 
		////	     	{
		//"screen"
		public Keyword getScreenKeyword_0() { return cScreenKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"screens"
		public Keyword getScreensKeyword_3() { return cScreensKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//layouts+=Layout
		public Assignment getLayoutsAssignment_5() { return cLayoutsAssignment_5; }

		//Layout
		public RuleCall getLayoutsLayoutParserRuleCall_5_0() { return cLayoutsLayoutParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class VSEPARATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VSEPARATOR");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//VSEPARATOR:
		//	":";
		@Override public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class ASEPARATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASEPARATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cControl000aKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ASEPARATOR:
		//	"," | "\n";
		@Override public ParserRule getRule() { return rule; }

		//"," | "\n"
		public Alternatives getAlternatives() { return cAlternatives; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//"\n"
		public Keyword getControl000aKeyword_1() { return cControl000aKeyword_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	DataType | Entity;
		@Override public ParserRule getRule() { return rule; }

		//DataType | Entity
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }

		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataType:
		//	"datatype" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"datatype" name=ID
		public Group getGroup() { return cGroup; }

		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//	"entity" name=ID ("extends" superType=[Entity|QualifiedName])? "{" features+=Feature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"entity" name=ID ("extends" superType=[Entity|QualifiedName])? "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superType=[Entity|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Entity|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Entity|QualifiedName]
		public CrossReference getSuperTypeEntityCrossReference_2_1_0() { return cSuperTypeEntityCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeTypeCrossReference_3_0.eContents().get(1);
		
		//Feature:
		//	many?="many"? name=ID ":" type=[Type|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//many?="many"? name=ID ":" type=[Type|QualifiedName]
		public Group getGroup() { return cGroup; }

		//many?="many"?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }

		//"many"
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_3_0() { return cTypeTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeTypeQualifiedNameParserRuleCall_3_0_1; }
	}
	
	
	public class DeviceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Device");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIphoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIphoneIphoneKeyword_0_0 = (Keyword)cIphoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIpadEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIpadIpadKeyword_1_0 = (Keyword)cIpadEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAndroid4EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAndroid4Android4Keyword_2_0 = (Keyword)cAndroid4EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAndroid2EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAndroid2Android2Keyword_3_0 = (Keyword)cAndroid2EnumLiteralDeclaration_3.eContents().get(0);
		
		////TODO: i think version is needed
		//enum Device:
		//	iphone | ipad | android4 | android2;
		public EnumRule getRule() { return rule; }

		//iphone | ipad | android4 | android2
		public Alternatives getAlternatives() { return cAlternatives; }

		//iphone
		public EnumLiteralDeclaration getIphoneEnumLiteralDeclaration_0() { return cIphoneEnumLiteralDeclaration_0; }

		//"iphone"
		public Keyword getIphoneIphoneKeyword_0_0() { return cIphoneIphoneKeyword_0_0; }

		//ipad
		public EnumLiteralDeclaration getIpadEnumLiteralDeclaration_1() { return cIpadEnumLiteralDeclaration_1; }

		//"ipad"
		public Keyword getIpadIpadKeyword_1_0() { return cIpadIpadKeyword_1_0; }

		//android4
		public EnumLiteralDeclaration getAndroid4EnumLiteralDeclaration_2() { return cAndroid4EnumLiteralDeclaration_2; }

		//"android4"
		public Keyword getAndroid4Android4Keyword_2_0() { return cAndroid4Android4Keyword_2_0; }

		//android2
		public EnumLiteralDeclaration getAndroid2EnumLiteralDeclaration_3() { return cAndroid2EnumLiteralDeclaration_3; }

		//"android2"
		public Keyword getAndroid2Android2Keyword_3_0() { return cAndroid2Android2Keyword_3_0; }
	}
	
	private final AppBuilderElements pAppBuilder;
	private final AbstractElementElements pAbstractElement;
	private final NamespaceDeclationElements pNamespaceDeclation;
	private final QualifiedNameElements pQualifiedName;
	private final SystemElements pSystem;
	private final BusinessElements pBusiness;
	private final ServiceElements pService;
	private final InstanceServiceElements pInstanceService;
	private final UiElements pUi;
	private final MainElements pMain;
	private final DeviceElements unknownRuleDevice;
	private final ScreenElements pScreen;
	private final SimpleScreenElements pSimpleScreen;
	private final EntryParametersElements pEntryParameters;
	private final ControllerElements pController;
	private final InitActionElements pInitAction;
	private final ValidationBindingElements pValidationBinding;
	private final UiListenerBindingElements pUiListenerBinding;
	private final DataBindingElements pDataBinding;
	private final SimpleDataBindingElements pSimpleDataBinding;
	private final EnumDataBindingElements pEnumDataBinding;
	private final ValidatorElements pValidator;
	private final ConditionElements pCondition;
	private final ConditionExpressionElements pConditionExpression;
	private final SimpleConditionExpressionElements pSimpleConditionExpression;
	private final CompositeConditionExpressionElements pCompositeConditionExpression;
	private final ActionElements pAction;
	private final UiActionElements pUiAction;
	private final InstructionElements pInstruction;
	private final SetInstructionElements pSetInstruction;
	private final NavigateElements pNavigate;
	private final ExecuteActionElements pExecuteAction;
	private final ParametersElements pParameters;
	private final SetInstructionAssignmentElements pSetInstructionAssignment;
	private final RestCallElements pRestCall;
	private final ControlValueElements pControlValue;
	private final URLElements pURL;
	private final ModelElements pModel;
	private final ViewElements pView;
	private final LayoutElements pLayout;
	private final GridLayoutElements pGridLayout;
	private final RowLayoutElements pRowLayout;
	private final ControlElements pControl;
	private final ScreenLayoutElements pScreenLayout;
	private final ListElements pList;
	private final ValueElements pValue;
	private final DynamicValueElements pDynamicValue;
	private final ExpressionElements pExpression;
	private final ExpressionTermElements pExpressionTerm;
	private final TextElements pText;
	private final ButtonElements pButton;
	private final LabelElements pLabel;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements pAttributeType;
	private final CompositeScreenElements pCompositeScreen;
	private final VSEPARATORElements pVSEPARATOR;
	private final ASEPARATORElements pASEPARATOR;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TypeElements pType;
	private final DataTypeElements pDataType;
	private final EntityElements pEntity;
	private final FeatureElements pFeature;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AppBuilderDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAppBuilder = new AppBuilderElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pNamespaceDeclation = new NamespaceDeclationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pSystem = new SystemElements();
		this.pBusiness = new BusinessElements();
		this.pService = new ServiceElements();
		this.pInstanceService = new InstanceServiceElements();
		this.pUi = new UiElements();
		this.pMain = new MainElements();
		this.unknownRuleDevice = new DeviceElements();
		this.pScreen = new ScreenElements();
		this.pSimpleScreen = new SimpleScreenElements();
		this.pEntryParameters = new EntryParametersElements();
		this.pController = new ControllerElements();
		this.pInitAction = new InitActionElements();
		this.pValidationBinding = new ValidationBindingElements();
		this.pUiListenerBinding = new UiListenerBindingElements();
		this.pDataBinding = new DataBindingElements();
		this.pSimpleDataBinding = new SimpleDataBindingElements();
		this.pEnumDataBinding = new EnumDataBindingElements();
		this.pValidator = new ValidatorElements();
		this.pCondition = new ConditionElements();
		this.pConditionExpression = new ConditionExpressionElements();
		this.pSimpleConditionExpression = new SimpleConditionExpressionElements();
		this.pCompositeConditionExpression = new CompositeConditionExpressionElements();
		this.pAction = new ActionElements();
		this.pUiAction = new UiActionElements();
		this.pInstruction = new InstructionElements();
		this.pSetInstruction = new SetInstructionElements();
		this.pNavigate = new NavigateElements();
		this.pExecuteAction = new ExecuteActionElements();
		this.pParameters = new ParametersElements();
		this.pSetInstructionAssignment = new SetInstructionAssignmentElements();
		this.pRestCall = new RestCallElements();
		this.pControlValue = new ControlValueElements();
		this.pURL = new URLElements();
		this.pModel = new ModelElements();
		this.pView = new ViewElements();
		this.pLayout = new LayoutElements();
		this.pGridLayout = new GridLayoutElements();
		this.pRowLayout = new RowLayoutElements();
		this.pControl = new ControlElements();
		this.pScreenLayout = new ScreenLayoutElements();
		this.pList = new ListElements();
		this.pValue = new ValueElements();
		this.pDynamicValue = new DynamicValueElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionTerm = new ExpressionTermElements();
		this.pText = new TextElements();
		this.pButton = new ButtonElements();
		this.pLabel = new LabelElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pCompositeScreen = new CompositeScreenElements();
		this.pVSEPARATOR = new VSEPARATORElements();
		this.pASEPARATOR = new ASEPARATORElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pType = new TypeElements();
		this.pDataType = new DataTypeElements();
		this.pEntity = new EntityElements();
		this.pFeature = new FeatureElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.nagarro.AppBuilderDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AppBuilder:
	//	elements+=AbstractElement*;
	public AppBuilderElements getAppBuilderAccess() {
		return pAppBuilder;
	}
	
	public ParserRule getAppBuilderRule() {
		return getAppBuilderAccess().getRule();
	}

	////TODO: more namespace & one system
	//AbstractElement:
	//	NamespaceDeclation | System;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//NamespaceDeclation:
	//	"namespace" name=QualifiedName;
	public NamespaceDeclationElements getNamespaceDeclationAccess() {
		return pNamespaceDeclation;
	}
	
	public ParserRule getNamespaceDeclationRule() {
		return getNamespaceDeclationAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//System:
	//	"system" name=ID "{" business=Business ui=Ui "}";
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	////runs on server side
	//Business:
	//	{Business} "business" "{" elements+=Service* "}";
	public BusinessElements getBusinessAccess() {
		return pBusiness;
	}
	
	public ParserRule getBusinessRule() {
		return getBusinessAccess().getRule();
	}

	//Service:
	//	InstanceService;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//InstanceService:
	//	"instance" instanceName=QualifiedName;
	public InstanceServiceElements getInstanceServiceAccess() {
		return pInstanceService;
	}
	
	public ParserRule getInstanceServiceRule() {
		return getInstanceServiceAccess().getRule();
	}

	////runs on ui side
	//Ui:
	//	"ui" "{" main=Main services+=Service* screens+=Screen* "}";
	public UiElements getUiAccess() {
		return pUi;
	}
	
	public ParserRule getUiRule() {
		return getUiAccess().getRule();
	}

	//Main:
	//	{Main} "main" "(" ("appName" VSEPARATOR appName=STRING ASEPARATOR? & "appVersion" VSEPARATOR appVersion=STRING
	//	ASEPARATOR? & "devices" VSEPARATOR "[" (devices+=Device ("," devices+=Device)*) "]" ASEPARATOR? & "entry" VSEPARATOR
	//	screen=[Screen] ASEPARATOR? & ("generalStyle" VSEPARATOR generalStyle=STRING ASEPARATOR?)?) ")";
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	////TODO: i think version is needed
	//enum Device:
	//	iphone | ipad | android4 | android2;
	public DeviceElements getDeviceAccess() {
		return unknownRuleDevice;
	}
	
	public EnumRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}

	//Screen:
	//	SimpleScreen | CompositeScreen;
	public ScreenElements getScreenAccess() {
		return pScreen;
	}
	
	public ParserRule getScreenRule() {
		return getScreenAccess().getRule();
	}

	//SimpleScreen:
	//	"screen" name=ID "{" entryParameters=EntryParameters? model=Model view=View controller=Controller "}";
	public SimpleScreenElements getSimpleScreenAccess() {
		return pSimpleScreen;
	}
	
	public ParserRule getSimpleScreenRule() {
		return getSimpleScreenAccess().getRule();
	}

	//EntryParameters:
	//	"entryparameters" "{" attributes+=Attribute+ "}";
	public EntryParametersElements getEntryParametersAccess() {
		return pEntryParameters;
	}
	
	public ParserRule getEntryParametersRule() {
		return getEntryParametersAccess().getRule();
	}

	//Controller:
	//	"controller" "{" initAction=InitAction validator=Validator? actions+=Action* "}";
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}

	//InitAction:
	//	{InitAction} "initaction" "{" databindings+=DataBinding* uiListenerBindingss+=UiListenerBinding*
	//	validationBindings+=ValidationBinding* instructions+=Instruction* "}";
	public InitActionElements getInitActionAccess() {
		return pInitAction;
	}
	
	public ParserRule getInitActionRule() {
		return getInitActionAccess().getRule();
	}

	//ValidationBinding: //	  validate two on textPersonAgeId.text
	//	"validate" condition=[Condition] "on" control=[Control] ("." controlAccess=QualifiedName)?;
	public ValidationBindingElements getValidationBindingAccess() {
		return pValidationBinding;
	}
	
	public ParserRule getValidationBindingRule() {
		return getValidationBindingAccess().getRule();
	}

	//UiListenerBinding: //	attach updateButtonSelection to PersonListScreen.updateButtonId.onSelection
	////TODO: do i need screen ID?!
	//	"attach" action=[Action] "to" control=[Control] ("." controlAccess=QualifiedName)?;
	public UiListenerBindingElements getUiListenerBindingAccess() {
		return pUiListenerBinding;
	}
	
	public ParserRule getUiListenerBindingRule() {
		return getUiListenerBindingAccess().getRule();
	}

	//DataBinding:
	//	SimpleDataBinding | EnumDataBinding;
	public DataBindingElements getDataBindingAccess() {
		return pDataBinding;
	}
	
	public ParserRule getDataBindingRule() {
		return getDataBindingAccess().getRule();
	}

	//SimpleDataBinding: //	bind person.name to textPersonNameId.text
	//	"bind" model=[Attribute] ("." modelAccess=QualifiedName)? "to" control=[Control] ("." controlAccess=QualifiedName)?;
	public SimpleDataBindingElements getSimpleDataBindingAccess() {
		return pSimpleDataBinding;
	}
	
	public ParserRule getSimpleDataBindingRule() {
		return getSimpleDataBindingAccess().getRule();
	}

	//EnumDataBinding: //	 bind enumDataSource(enumClassName:"com.nagarrro.app.domain.GenderEnum") to comboPersonGenderId.values
	//	"bind" "enumDataSource" "(" "enumClassName" VSEPARATOR enumClassName=STRING ")" "to" control=[Control] ("."
	//	controlAccess=QualifiedName)?;
	public EnumDataBindingElements getEnumDataBindingAccess() {
		return pEnumDataBinding;
	}
	
	public ParserRule getEnumDataBindingRule() {
		return getEnumDataBindingAccess().getRule();
	}

	//Validator:
	//	{Validator} "validator" "{" conditions+=Condition* "}";
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	//Condition:
	//	"condition" name=ID "(" conditionExpression=ConditionExpression ")";
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//ConditionExpression:
	//	SimpleConditionExpression | CompositeConditionExpression;
	public ConditionExpressionElements getConditionExpressionAccess() {
		return pConditionExpression;
	}
	
	public ParserRule getConditionExpressionRule() {
		return getConditionExpressionAccess().getRule();
	}

	////TODO: expression
	//SimpleConditionExpression:
	//	variableName=ID VSEPARATOR AttributeType "|";
	public SimpleConditionExpressionElements getSimpleConditionExpressionAccess() {
		return pSimpleConditionExpression;
	}
	
	public ParserRule getSimpleConditionExpressionRule() {
		return getSimpleConditionExpressionAccess().getRule();
	}

	//CompositeConditionExpression:
	//	conditions+=[Condition] ("and" conditions+=[Condition])*;
	public CompositeConditionExpressionElements getCompositeConditionExpressionAccess() {
		return pCompositeConditionExpression;
	}
	
	public ParserRule getCompositeConditionExpressionRule() {
		return getCompositeConditionExpressionAccess().getRule();
	}

	//Action:
	//	UiAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//UiAction:
	//	"uiaction" name=ID "{" instructions+=Instruction+ "}";
	public UiActionElements getUiActionAccess() {
		return pUiAction;
	}
	
	public ParserRule getUiActionRule() {
		return getUiActionAccess().getRule();
	}

	//Instruction:
	//	SetInstruction | Navigate | ExecuteAction;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//SetInstruction: //	 set person to restcall(url:"/person/{id}", returnType:Person, id:param1)
	//	"set" model=[Attribute] ("." modelAccess=QualifiedName)? "to" assignment=SetInstructionAssignment;
	public SetInstructionElements getSetInstructionAccess() {
		return pSetInstruction;
	}
	
	public ParserRule getSetInstructionRule() {
		return getSetInstructionAccess().getRule();
	}

	//Navigate:
	//	"navigateto" screen=[Screen] ("(" (params+=Parameters ASEPARATOR?)* ")")?;
	public NavigateElements getNavigateAccess() {
		return pNavigate;
	}
	
	public ParserRule getNavigateRule() {
		return getNavigateAccess().getRule();
	}

	//ExecuteAction:
	//	"execute" action=[Action];
	public ExecuteActionElements getExecuteActionAccess() {
		return pExecuteAction;
	}
	
	public ParserRule getExecuteActionRule() {
		return getExecuteActionAccess().getRule();
	}

	////TODO:
	//Parameters:
	//	"params";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//SetInstructionAssignment:
	//	RestCall | {SetInstructionAssignment} STRING | {SetInstructionAssignment} INT | DynamicValue | ControlValue;
	public SetInstructionAssignmentElements getSetInstructionAssignmentAccess() {
		return pSetInstructionAssignment;
	}
	
	public ParserRule getSetInstructionAssignmentRule() {
		return getSetInstructionAssignmentAccess().getRule();
	}

	//RestCall:
	//	"restcall" "(" ("url" VSEPARATOR url=URL) ASEPARATOR ("returnType" VSEPARATOR AttributeType) //TODO
	//	")";
	public RestCallElements getRestCallAccess() {
		return pRestCall;
	}
	
	public ParserRule getRestCallRule() {
		return getRestCallAccess().getRule();
	}

	//ControlValue:
	//	control=[Control] ("." controlAccess=QualifiedName)?;
	public ControlValueElements getControlValueAccess() {
		return pControlValue;
	}
	
	public ParserRule getControlValueRule() {
		return getControlValueAccess().getRule();
	}

	//URL:
	//	STRING;
	public URLElements getURLAccess() {
		return pURL;
	}
	
	public ParserRule getURLRule() {
		return getURLAccess().getRule();
	}

	//Model:
	//	{Model} "model" "{" attributes+=Attribute* "}";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//View:
	//	"view" "{" layouts+=Layout "}";
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//Layout:
	//	(GridLayout | RowLayout) "{" controls+=Control* "}";
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//GridLayout:
	//	"layout" "(" "type" ":" type="\"grid\"" ASEPARATOR ("columns" VSEPARATOR columns=INT ASEPARATOR?)? ")";
	public GridLayoutElements getGridLayoutAccess() {
		return pGridLayout;
	}
	
	public ParserRule getGridLayoutRule() {
		return getGridLayoutAccess().getRule();
	}

	//RowLayout:
	//	"layout" "(" "type" ":" type="\"rowlayout\"" ")";
	public RowLayoutElements getRowLayoutAccess() {
		return pRowLayout;
	}
	
	public ParserRule getRowLayoutRule() {
		return getRowLayoutAccess().getRule();
	}

	//Control:
	//	Layout | ScreenLayout | List | Text | Button | Label;
	public ControlElements getControlAccess() {
		return pControl;
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}

	//ScreenLayout:
	//	"screen" screen=[Screen];
	public ScreenLayoutElements getScreenLayoutAccess() {
		return pScreenLayout;
	}
	
	public ParserRule getScreenLayoutRule() {
		return getScreenLayoutAccess().getRule();
	}

	//List: //	list personListId ( labelprovider: (p:Person | p.name + " " + p.age) ,   cssItem: (p:Person | (p.age<10?"cssYesClass":"cssNoClass") ),    tooltip: (p:Person | p.age )  )
	//	"list" name=ID "(" (("labelprovider" VSEPARATOR labelprovider=Value ASEPARATOR?)? & ("cssStyle" VSEPARATOR
	//	cssStyle=Value ASEPARATOR?)? & ("tooltip" VSEPARATOR tooltip=Value ASEPARATOR?)?) ")";
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//Value:
	//	{Value} STRING | INT | DynamicValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//DynamicValue:
	//	"(" variableName=ID ":" type=AttributeType "|" expression=Expression ")";
	public DynamicValueElements getDynamicValueAccess() {
		return pDynamicValue;
	}
	
	public ParserRule getDynamicValueRule() {
		return getDynamicValueAccess().getRule();
	}

	////TODO: for now simple expression
	//Expression:
	//	terms+=ExpressionTerm ("+" terms+=ExpressionTerm)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ExpressionTerm:
	//	QualifiedName | STRING | INT;
	public ExpressionTermElements getExpressionTermAccess() {
		return pExpressionTerm;
	}
	
	public ParserRule getExpressionTermRule() {
		return getExpressionTermAccess().getRule();
	}

	//Text:
	//	"text" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR resourceKey=Value
	//	ASEPARATOR?)?) ")";
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//Button:
	//	"button" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR
	//	resourceKey=Value ASEPARATOR?)?) ")";
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	//Label:
	//	"label" name=ID "(" ("resourceKey" VSEPARATOR resourceKey=Value)? ")";
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	////TODO:
	//Attribute:
	//	name=ID VSEPARATOR type=AttributeType;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	////TODO
	//AttributeType:
	//	QualifiedName;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//CompositeScreen: //	screen allscreenshere
	////		{
	////			screens 
	////	     	{
	//	"screen" name=ID "{" "screens" "{" layouts+=Layout "}" "}";
	public CompositeScreenElements getCompositeScreenAccess() {
		return pCompositeScreen;
	}
	
	public ParserRule getCompositeScreenRule() {
		return getCompositeScreenAccess().getRule();
	}

	//VSEPARATOR:
	//	":";
	public VSEPARATORElements getVSEPARATORAccess() {
		return pVSEPARATOR;
	}
	
	public ParserRule getVSEPARATORRule() {
		return getVSEPARATORAccess().getRule();
	}

	//ASEPARATOR:
	//	"," | "\n";
	public ASEPARATORElements getASEPARATORAccess() {
		return pASEPARATOR;
	}
	
	public ParserRule getASEPARATORRule() {
		return getASEPARATORAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//Type:
	//	DataType | Entity;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//DataType:
	//	"datatype" name=ID;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//Entity:
	//	"entity" name=ID ("extends" superType=[Entity|QualifiedName])? "{" features+=Feature* "}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Feature:
	//	many?="many"? name=ID ":" type=[Type|QualifiedName];
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
