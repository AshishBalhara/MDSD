/*
 * generated by Xtext
 */
package com.nagarro.serializer;

import com.google.inject.Inject;
import com.nagarro.services.AppBuilderDSLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AppBuilderDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AppBuilderDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Button_ASEPARATORParserRuleCall_3_0_3_q;
	protected AbstractElementAlias match_Button_ASEPARATORParserRuleCall_3_1_3_q;
	protected AbstractElementAlias match_GridLayout_ASEPARATORParserRuleCall_6_3_q;
	protected AbstractElementAlias match_List_ASEPARATORParserRuleCall_3_0_3_q;
	protected AbstractElementAlias match_List_ASEPARATORParserRuleCall_3_1_3_q;
	protected AbstractElementAlias match_List_ASEPARATORParserRuleCall_3_2_3_q;
	protected AbstractElementAlias match_Main_ASEPARATORParserRuleCall_3_0_3_q;
	protected AbstractElementAlias match_Main_ASEPARATORParserRuleCall_3_1_3_q;
	protected AbstractElementAlias match_Main_ASEPARATORParserRuleCall_3_2_5_q;
	protected AbstractElementAlias match_Main_ASEPARATORParserRuleCall_3_3_3_q;
	protected AbstractElementAlias match_Main_ASEPARATORParserRuleCall_3_4_3_q;
	protected AbstractElementAlias match_Navigate_ASEPARATORParserRuleCall_2_1_1_q;
	protected AbstractElementAlias match_Navigate___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_SetInstructionAssignment_INTTerminalRuleCall_2_1_or_STRINGTerminalRuleCall_1_1;
	protected AbstractElementAlias match_Text_ASEPARATORParserRuleCall_3_0_3_q;
	protected AbstractElementAlias match_Text_ASEPARATORParserRuleCall_3_1_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AppBuilderDSLGrammarAccess) access;
		match_Button_ASEPARATORParserRuleCall_3_0_3_q = new TokenAlias(false, true, grammarAccess.getButtonAccess().getASEPARATORParserRuleCall_3_0_3());
		match_Button_ASEPARATORParserRuleCall_3_1_3_q = new TokenAlias(false, true, grammarAccess.getButtonAccess().getASEPARATORParserRuleCall_3_1_3());
		match_GridLayout_ASEPARATORParserRuleCall_6_3_q = new TokenAlias(false, true, grammarAccess.getGridLayoutAccess().getASEPARATORParserRuleCall_6_3());
		match_List_ASEPARATORParserRuleCall_3_0_3_q = new TokenAlias(false, true, grammarAccess.getListAccess().getASEPARATORParserRuleCall_3_0_3());
		match_List_ASEPARATORParserRuleCall_3_1_3_q = new TokenAlias(false, true, grammarAccess.getListAccess().getASEPARATORParserRuleCall_3_1_3());
		match_List_ASEPARATORParserRuleCall_3_2_3_q = new TokenAlias(false, true, grammarAccess.getListAccess().getASEPARATORParserRuleCall_3_2_3());
		match_Main_ASEPARATORParserRuleCall_3_0_3_q = new TokenAlias(false, true, grammarAccess.getMainAccess().getASEPARATORParserRuleCall_3_0_3());
		match_Main_ASEPARATORParserRuleCall_3_1_3_q = new TokenAlias(false, true, grammarAccess.getMainAccess().getASEPARATORParserRuleCall_3_1_3());
		match_Main_ASEPARATORParserRuleCall_3_2_5_q = new TokenAlias(false, true, grammarAccess.getMainAccess().getASEPARATORParserRuleCall_3_2_5());
		match_Main_ASEPARATORParserRuleCall_3_3_3_q = new TokenAlias(false, true, grammarAccess.getMainAccess().getASEPARATORParserRuleCall_3_3_3());
		match_Main_ASEPARATORParserRuleCall_3_4_3_q = new TokenAlias(false, true, grammarAccess.getMainAccess().getASEPARATORParserRuleCall_3_4_3());
		match_Navigate_ASEPARATORParserRuleCall_2_1_1_q = new TokenAlias(false, true, grammarAccess.getNavigateAccess().getASEPARATORParserRuleCall_2_1_1());
		match_Navigate___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getNavigateAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getNavigateAccess().getRightParenthesisKeyword_2_2()));
		match_SetInstructionAssignment_INTTerminalRuleCall_2_1_or_STRINGTerminalRuleCall_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSetInstructionAssignmentAccess().getINTTerminalRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getSetInstructionAssignmentAccess().getSTRINGTerminalRuleCall_1_1()));
		match_Text_ASEPARATORParserRuleCall_3_0_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getASEPARATORParserRuleCall_3_0_3());
		match_Text_ASEPARATORParserRuleCall_3_1_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getASEPARATORParserRuleCall_3_1_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getASEPARATORRule())
			return getASEPARATORToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getAttributeTypeRule())
			return getAttributeTypeToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getVSEPARATORRule())
			return getVSEPARATORToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ASEPARATOR:
	 * 	',' | '\n';
	 */
	protected String getASEPARATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * AttributeType:
	 * 	QualifiedName;
	 */
	protected String getAttributeTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING	: 
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * VSEPARATOR:
	 * 	':';
	 */
	protected String getVSEPARATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Button_ASEPARATORParserRuleCall_3_0_3_q.equals(syntax))
				emit_Button_ASEPARATORParserRuleCall_3_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Button_ASEPARATORParserRuleCall_3_1_3_q.equals(syntax))
				emit_Button_ASEPARATORParserRuleCall_3_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_GridLayout_ASEPARATORParserRuleCall_6_3_q.equals(syntax))
				emit_GridLayout_ASEPARATORParserRuleCall_6_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_List_ASEPARATORParserRuleCall_3_0_3_q.equals(syntax))
				emit_List_ASEPARATORParserRuleCall_3_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_List_ASEPARATORParserRuleCall_3_1_3_q.equals(syntax))
				emit_List_ASEPARATORParserRuleCall_3_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_List_ASEPARATORParserRuleCall_3_2_3_q.equals(syntax))
				emit_List_ASEPARATORParserRuleCall_3_2_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Main_ASEPARATORParserRuleCall_3_0_3_q.equals(syntax))
				emit_Main_ASEPARATORParserRuleCall_3_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Main_ASEPARATORParserRuleCall_3_1_3_q.equals(syntax))
				emit_Main_ASEPARATORParserRuleCall_3_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Main_ASEPARATORParserRuleCall_3_2_5_q.equals(syntax))
				emit_Main_ASEPARATORParserRuleCall_3_2_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Main_ASEPARATORParserRuleCall_3_3_3_q.equals(syntax))
				emit_Main_ASEPARATORParserRuleCall_3_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Main_ASEPARATORParserRuleCall_3_4_3_q.equals(syntax))
				emit_Main_ASEPARATORParserRuleCall_3_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Navigate_ASEPARATORParserRuleCall_2_1_1_q.equals(syntax))
				emit_Navigate_ASEPARATORParserRuleCall_2_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Navigate___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_Navigate___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_SetInstructionAssignment_INTTerminalRuleCall_2_1_or_STRINGTerminalRuleCall_1_1.equals(syntax))
				emit_SetInstructionAssignment_INTTerminalRuleCall_2_1_or_STRINGTerminalRuleCall_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Text_ASEPARATORParserRuleCall_3_0_3_q.equals(syntax))
				emit_Text_ASEPARATORParserRuleCall_3_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Text_ASEPARATORParserRuleCall_3_1_3_q.equals(syntax))
				emit_Text_ASEPARATORParserRuleCall_3_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     cssStyle=Value (ambiguity) ')' (rule end)
	 *     cssStyle=Value (ambiguity) 'cssStyle' VSEPARATOR cssStyle=Value
	 *     cssStyle=Value (ambiguity) 'resourceKey' VSEPARATOR resourceKey=Value
	 */
	protected void emit_Button_ASEPARATORParserRuleCall_3_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     resourceKey=Value (ambiguity) ')' (rule end)
	 *     resourceKey=Value (ambiguity) 'cssStyle' VSEPARATOR cssStyle=Value
	 *     resourceKey=Value (ambiguity) 'resourceKey' VSEPARATOR resourceKey=Value
	 */
	protected void emit_Button_ASEPARATORParserRuleCall_3_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     columns=INT (ambiguity) ')' '{' '}' (rule end)
	 *     columns=INT (ambiguity) ')' '{' controls+=Control
	 *     columns=INT (ambiguity) ')' (rule end)
	 */
	protected void emit_GridLayout_ASEPARATORParserRuleCall_6_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     labelprovider=Value (ambiguity) ')' (rule end)
	 *     labelprovider=Value (ambiguity) 'cssStyle' VSEPARATOR cssStyle=Value
	 *     labelprovider=Value (ambiguity) 'labelprovider' VSEPARATOR labelprovider=Value
	 *     labelprovider=Value (ambiguity) 'tooltip' VSEPARATOR tooltip=Value
	 */
	protected void emit_List_ASEPARATORParserRuleCall_3_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     cssStyle=Value (ambiguity) ')' (rule end)
	 *     cssStyle=Value (ambiguity) 'cssStyle' VSEPARATOR cssStyle=Value
	 *     cssStyle=Value (ambiguity) 'labelprovider' VSEPARATOR labelprovider=Value
	 *     cssStyle=Value (ambiguity) 'tooltip' VSEPARATOR tooltip=Value
	 */
	protected void emit_List_ASEPARATORParserRuleCall_3_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     tooltip=Value (ambiguity) ')' (rule end)
	 *     tooltip=Value (ambiguity) 'cssStyle' VSEPARATOR cssStyle=Value
	 *     tooltip=Value (ambiguity) 'labelprovider' VSEPARATOR labelprovider=Value
	 *     tooltip=Value (ambiguity) 'tooltip' VSEPARATOR tooltip=Value
	 */
	protected void emit_List_ASEPARATORParserRuleCall_3_2_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     appName=STRING (ambiguity) ')' (rule end)
	 *     appName=STRING (ambiguity) 'appName' VSEPARATOR appName=STRING
	 *     appName=STRING (ambiguity) 'appVersion' VSEPARATOR appVersion=STRING
	 *     appName=STRING (ambiguity) 'devices' VSEPARATOR '[' devices+=Device
	 *     appName=STRING (ambiguity) 'entry' VSEPARATOR screen=[Screen|ID]
	 *     appName=STRING (ambiguity) 'generalStyle' VSEPARATOR generalStyle=STRING
	 */
	protected void emit_Main_ASEPARATORParserRuleCall_3_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     appVersion=STRING (ambiguity) ')' (rule end)
	 *     appVersion=STRING (ambiguity) 'appName' VSEPARATOR appName=STRING
	 *     appVersion=STRING (ambiguity) 'appVersion' VSEPARATOR appVersion=STRING
	 *     appVersion=STRING (ambiguity) 'devices' VSEPARATOR '[' devices+=Device
	 *     appVersion=STRING (ambiguity) 'entry' VSEPARATOR screen=[Screen|ID]
	 *     appVersion=STRING (ambiguity) 'generalStyle' VSEPARATOR generalStyle=STRING
	 */
	protected void emit_Main_ASEPARATORParserRuleCall_3_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     devices+=Device ']' (ambiguity) ')' (rule end)
	 *     devices+=Device ']' (ambiguity) 'appName' VSEPARATOR appName=STRING
	 *     devices+=Device ']' (ambiguity) 'appVersion' VSEPARATOR appVersion=STRING
	 *     devices+=Device ']' (ambiguity) 'devices' VSEPARATOR '[' devices+=Device
	 *     devices+=Device ']' (ambiguity) 'entry' VSEPARATOR screen=[Screen|ID]
	 *     devices+=Device ']' (ambiguity) 'generalStyle' VSEPARATOR generalStyle=STRING
	 */
	protected void emit_Main_ASEPARATORParserRuleCall_3_2_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     screen=[Screen|ID] (ambiguity) ')' (rule end)
	 *     screen=[Screen|ID] (ambiguity) 'appName' VSEPARATOR appName=STRING
	 *     screen=[Screen|ID] (ambiguity) 'appVersion' VSEPARATOR appVersion=STRING
	 *     screen=[Screen|ID] (ambiguity) 'devices' VSEPARATOR '[' devices+=Device
	 *     screen=[Screen|ID] (ambiguity) 'entry' VSEPARATOR screen=[Screen|ID]
	 *     screen=[Screen|ID] (ambiguity) 'generalStyle' VSEPARATOR generalStyle=STRING
	 */
	protected void emit_Main_ASEPARATORParserRuleCall_3_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     generalStyle=STRING (ambiguity) ')' (rule end)
	 *     generalStyle=STRING (ambiguity) 'appName' VSEPARATOR appName=STRING
	 *     generalStyle=STRING (ambiguity) 'appVersion' VSEPARATOR appVersion=STRING
	 *     generalStyle=STRING (ambiguity) 'devices' VSEPARATOR '[' devices+=Device
	 *     generalStyle=STRING (ambiguity) 'entry' VSEPARATOR screen=[Screen|ID]
	 *     generalStyle=STRING (ambiguity) 'generalStyle' VSEPARATOR generalStyle=STRING
	 */
	protected void emit_Main_ASEPARATORParserRuleCall_3_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     params+=Parameters (ambiguity) ')' (rule end)
	 *     params+=Parameters (ambiguity) params+=Parameters
	 */
	protected void emit_Navigate_ASEPARATORParserRuleCall_2_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     screen=[Screen|ID] (ambiguity) (rule end)
	 */
	protected void emit_Navigate___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STRING | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_SetInstructionAssignment_INTTerminalRuleCall_2_1_or_STRINGTerminalRuleCall_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     cssStyle=Value (ambiguity) ')' (rule end)
	 *     cssStyle=Value (ambiguity) 'cssStyle' VSEPARATOR cssStyle=Value
	 *     cssStyle=Value (ambiguity) 'resourceKey' VSEPARATOR resourceKey=Value
	 */
	protected void emit_Text_ASEPARATORParserRuleCall_3_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ASEPARATOR?
	 *
	 * This ambiguous syntax occurs at:
	 *     resourceKey=Value (ambiguity) ')' (rule end)
	 *     resourceKey=Value (ambiguity) 'cssStyle' VSEPARATOR cssStyle=Value
	 *     resourceKey=Value (ambiguity) 'resourceKey' VSEPARATOR resourceKey=Value
	 */
	protected void emit_Text_ASEPARATORParserRuleCall_3_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
