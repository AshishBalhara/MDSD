grammar com.nagarro.AppBuilderDSL with org.eclipse.xtext.common.Terminals

generate appBuilderDSL "http://www.nagarro.com/AppBuilderDSL"

AppBuilder:
	(elements+=AbstractElement)*;

	//TODO: more namespace & one system
AbstractElement:
	NamespaceDeclation | System;

NamespaceDeclation:
	'namespace' name=QualifiedName;

QualifiedName:
	ID ('.' ID)*;

System:
	'system' name=ID '{' business=Business ui=Ui '}';

	//runs on server side
Business:
	{Business} 'business' '{' (elements+=Service)* '}';

Service:
	InstanceService;

InstanceService:
	'instance' instanceName=QualifiedName;

	//runs on ui side
Ui:
	'ui' '{' main=Main (services+=Service)* (screens+=Screen)* '}';

Main:
	{Main} "main" "("
	(("appName" VSEPARATOR appName=STRING ASEPARATOR?) &
	("appVersion" VSEPARATOR appVersion=STRING ASEPARATOR?) &
	("devices" VSEPARATOR "[" (devices+=Device ("," devices+=Device)*) "]" ASEPARATOR?) &
	("entry" VSEPARATOR screen=[Screen] ASEPARATOR?) &
	("generalStyle" VSEPARATOR generalStyle=STRING ASEPARATOR?)?)
	")";

	//TODO: i think version is needed
enum Device:
	iphone | ipad | android4 | android2;

Screen:
	SimpleScreen | CompositeScreen;

SimpleScreen:
	"screen" name=ID '{' (entryParameters=EntryParameters)? model=Model view=View controller=Controller '}';

EntryParameters:
	"entryparameters" "{" (attributes+=Attribute)+ "}";

Controller:
	"controller" "{" initAction=InitAction (validator=Validator)? (actions+=Action)* "}";

InitAction:
	{InitAction} "initaction" "{" (databindings+=DataBinding)* (uiListenerBindingss+=UiListenerBinding)*
	(validationBindings+=ValidationBinding)* (instructions+=Instruction)* "}";

ValidationBinding:
//	  validate two on textPersonAgeId.text
	"validate" condition=[Condition] "on" control=[Control] ("." controlAccess=QualifiedName)?;

UiListenerBinding:
//	attach updateButtonSelection to PersonListScreen.updateButtonId.onSelection
//TODO: do i need screen ID?!
	"attach" action=[Action] "to" control=[Control] ("." controlAccess=QualifiedName)?;

DataBinding:
	SimpleDataBinding | EnumDataBinding;

SimpleDataBinding:
//	bind person.name to textPersonNameId.text
	"bind" model=[Attribute] ("." modelAccess=QualifiedName)? "to" control=[Control] ("." controlAccess=QualifiedName)?;

EnumDataBinding:
//	 bind enumDataSource(enumClassName:"com.nagarrro.app.domain.GenderEnum") to comboPersonGenderId.values
	"bind" "enumDataSource" "(" "enumClassName" VSEPARATOR enumClassName=STRING ")" "to" control=[Control] ("."
	controlAccess=QualifiedName)?;

Validator:
	{Validator} "validator" "{" (conditions+=Condition)* "}";

Condition:
	"condition" name=ID "(" conditionExpression=ConditionExpression ")";

ConditionExpression:
	SimpleConditionExpression | CompositeConditionExpression;

SimpleConditionExpression:
	variableName=ID VSEPARATOR AttributeType "|"; //TODO: expression
CompositeConditionExpression:
	(conditions+=[Condition] ("and" conditions+=[Condition])*);

Action:
	UiAction;

UiAction:
	"uiaction" name=ID "{" (instructions+=Instruction)+ "}";

Instruction:
	SetInstruction | Navigate | ExecuteAction;

SetInstruction:
//	 set person to restcall(url:"/person/{id}", returnType:Person, id:param1)
	"set" model=[Attribute] ("." modelAccess=QualifiedName)? "to" assignment=SetInstructionAssignment;

Navigate:
	"navigateto" screen=[Screen] ("(" (params+=Parameters ASEPARATOR?)* ")")?;
	
ExecuteAction:
	"execute" action=[Action]
;
	//TODO:
Parameters:
	"params";

SetInstructionAssignment:
	RestCall | {SetInstructionAssignment} STRING | {SetInstructionAssignment} INT | DynamicValue | ControlValue;

RestCall:
	"restcall" "(" ("url" VSEPARATOR url=URL) ASEPARATOR ("returnType" VSEPARATOR AttributeType)
	//TODO
	")";

ControlValue:
	control=[Control] ("." controlAccess=QualifiedName)?;

URL:
	STRING;

Model:
	{Model} "model" "{" (attributes+=Attribute)* "}";

View:
	"view" "{" (layouts+=Layout) "}";

Layout:
	(GridLayout | RowLayout) "{" (controls+=Control)* "}";

GridLayout:
	"layout" "(" "type" ":" type='"grid"' ASEPARATOR (("columns" VSEPARATOR columns=INT ASEPARATOR?)?) ")";

RowLayout:
	"layout" "(" "type" ":" type='"rowlayout"' ")";

Control:
	Layout | ScreenLayout | List | Text | Button | Label;

ScreenLayout:
	"screen" screen=[Screen];

List:
//	list personListId ( labelprovider: (p:Person | p.name + " " + p.age) ,   cssItem: (p:Person | (p.age<10?"cssYesClass":"cssNoClass") ),    tooltip: (p:Person | p.age )  )
	"list" name=ID "(" (("labelprovider" VSEPARATOR labelprovider=Value ASEPARATOR?)? & ("cssStyle" VSEPARATOR
	cssStyle=Value ASEPARATOR?)? & ("tooltip" VSEPARATOR tooltip=Value ASEPARATOR?)?) ")";

Value:
	{Value} STRING | {Value} INT | DynamicValue;

DynamicValue:
	"(" variableName=ID ":" type=AttributeType "|" expression=Expression ")";

	//TODO: for now simple expression
Expression:
	terms+=ExpressionTerm ("+" terms+=ExpressionTerm)*;

ExpressionTerm:
	QualifiedName | STRING | INT;

Text:
	"text" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR resourceKey=Value
	ASEPARATOR?)?) ")";

Button:
	"button" name=ID "(" (("cssStyle" VSEPARATOR cssStyle=Value ASEPARATOR?)? & ("resourceKey" VSEPARATOR
	resourceKey=Value ASEPARATOR?)?) ")";

Label:
	"label" name=ID "(" (("resourceKey" VSEPARATOR resourceKey=Value)?) ")";

	//TODO:
Attribute:
	name=ID VSEPARATOR type=AttributeType;

	//TODO
AttributeType:
	QualifiedName;

CompositeScreen:
//	screen allscreenshere
//		{
//			screens 
//	     	{
	"screen" name=ID "{" "screens" "{" (layouts+=Layout) "}" "}";

VSEPARATOR:
	':';

ASEPARATOR:
	',' | '\n';

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

QualifiedNameWithWildcard:
	QualifiedName '.*'?;

Type:
	DataType | Entity;

DataType:
	'datatype' name=ID;

Entity:
	'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{' (features+=Feature)* '}';

Feature:
	(many?='many')? name=ID ':' type=[Type|QualifiedName];
