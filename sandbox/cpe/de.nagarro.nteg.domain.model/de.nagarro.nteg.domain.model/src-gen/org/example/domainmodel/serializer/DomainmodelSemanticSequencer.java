/*
 * generated by Xtext
 */
package org.example.domainmodel.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.example.domainmodel.domainmodel.AttachAction;
import org.example.domainmodel.domainmodel.BindAction;
import org.example.domainmodel.domainmodel.BindEnumSource;
import org.example.domainmodel.domainmodel.BindSource;
import org.example.domainmodel.domainmodel.BusinessFeature;
import org.example.domainmodel.domainmodel.BusinessFeatures;
import org.example.domainmodel.domainmodel.ContainerElement;
import org.example.domainmodel.domainmodel.ContentElement;
import org.example.domainmodel.domainmodel.ControllerModule;
import org.example.domainmodel.domainmodel.DataType;
import org.example.domainmodel.domainmodel.DomainEntity;
import org.example.domainmodel.domainmodel.DomainRepository;
import org.example.domainmodel.domainmodel.Domainmodel;
import org.example.domainmodel.domainmodel.DomainmodelPackage;
import org.example.domainmodel.domainmodel.ElementFeature;
import org.example.domainmodel.domainmodel.EntryParametersModule;
import org.example.domainmodel.domainmodel.ExecuteAction;
import org.example.domainmodel.domainmodel.Feature;
import org.example.domainmodel.domainmodel.Import;
import org.example.domainmodel.domainmodel.InitActionModule;
import org.example.domainmodel.domainmodel.InterfaceDeclaration;
import org.example.domainmodel.domainmodel.InterfaceMethodCall;
import org.example.domainmodel.domainmodel.InterfaceMethodCallParameter;
import org.example.domainmodel.domainmodel.InterfaceMethodCallParameters;
import org.example.domainmodel.domainmodel.InterfaceOperation;
import org.example.domainmodel.domainmodel.InterfaceOperationUsageRule;
import org.example.domainmodel.domainmodel.InterfaceOperationsUsageRule;
import org.example.domainmodel.domainmodel.MainFeature;
import org.example.domainmodel.domainmodel.MainFeatureOption;
import org.example.domainmodel.domainmodel.MethodCall;
import org.example.domainmodel.domainmodel.MethodParameter;
import org.example.domainmodel.domainmodel.MethodParameters;
import org.example.domainmodel.domainmodel.ModelFeature;
import org.example.domainmodel.domainmodel.ModelModule;
import org.example.domainmodel.domainmodel.NamespaceDeclaration;
import org.example.domainmodel.domainmodel.NavigateToAction;
import org.example.domainmodel.domainmodel.ScreenFeature;
import org.example.domainmodel.domainmodel.ScreenModelParameter;
import org.example.domainmodel.domainmodel.ScreenModelParameters;
import org.example.domainmodel.domainmodel.SetAction;
import org.example.domainmodel.domainmodel.SetRestCallReceiver;
import org.example.domainmodel.domainmodel.SetRestCallReceiverIDParameter;
import org.example.domainmodel.domainmodel.SetRestCallReceiverParameters;
import org.example.domainmodel.domainmodel.SetRestCallReceiverReturnTypeParameter;
import org.example.domainmodel.domainmodel.SetRestCallReceiverURLParameter;
import org.example.domainmodel.domainmodel.SetUIElementReceiver;
import org.example.domainmodel.domainmodel.StatelessComponent;
import org.example.domainmodel.domainmodel.SystemDefinition;
import org.example.domainmodel.domainmodel.UIActionModule;
import org.example.domainmodel.domainmodel.UIModule;
import org.example.domainmodel.domainmodel.ValidateAction;
import org.example.domainmodel.domainmodel.ValidatorFeature;
import org.example.domainmodel.domainmodel.ValidatorModule;
import org.example.domainmodel.domainmodel.ValidatorRule;
import org.example.domainmodel.domainmodel.ValidatorRules;
import org.example.domainmodel.domainmodel.ViewModule;
import org.example.domainmodel.services.DomainmodelGrammarAccess;

@SuppressWarnings("all")
public class DomainmodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DomainmodelGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == DomainmodelPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case DomainmodelPackage.ATTACH_ACTION:
				sequence_AttachAction(context, (AttachAction) semanticObject); 
				return; 
			case DomainmodelPackage.BIND_ACTION:
				sequence_BindAction(context, (BindAction) semanticObject); 
				return; 
			case DomainmodelPackage.BIND_ENUM_SOURCE:
				sequence_BindEnumSource(context, (BindEnumSource) semanticObject); 
				return; 
			case DomainmodelPackage.BIND_SOURCE:
				sequence_BindSource(context, (BindSource) semanticObject); 
				return; 
			case DomainmodelPackage.BUSINESS_FEATURE:
				sequence_BusinessFeature(context, (BusinessFeature) semanticObject); 
				return; 
			case DomainmodelPackage.BUSINESS_FEATURES:
				sequence_BusinessFeatures(context, (BusinessFeatures) semanticObject); 
				return; 
			case DomainmodelPackage.CONTAINER_ELEMENT:
				sequence_ContainerElement(context, (ContainerElement) semanticObject); 
				return; 
			case DomainmodelPackage.CONTENT_ELEMENT:
				sequence_ContentElement(context, (ContentElement) semanticObject); 
				return; 
			case DomainmodelPackage.CONTROLLER_MODULE:
				sequence_ControllerModule(context, (ControllerModule) semanticObject); 
				return; 
			case DomainmodelPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case DomainmodelPackage.DOMAIN_ENTITY:
				sequence_DomainEntity(context, (DomainEntity) semanticObject); 
				return; 
			case DomainmodelPackage.DOMAIN_REPOSITORY:
				sequence_DomainRepository(context, (DomainRepository) semanticObject); 
				return; 
			case DomainmodelPackage.DOMAINMODEL:
				sequence_Domainmodel(context, (Domainmodel) semanticObject); 
				return; 
			case DomainmodelPackage.ELEMENT_FEATURE:
				sequence_ElementFeature(context, (ElementFeature) semanticObject); 
				return; 
			case DomainmodelPackage.ENTRY_PARAMETERS_MODULE:
				sequence_EntryParametersModule(context, (EntryParametersModule) semanticObject); 
				return; 
			case DomainmodelPackage.EXECUTE_ACTION:
				sequence_ExecuteAction(context, (ExecuteAction) semanticObject); 
				return; 
			case DomainmodelPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case DomainmodelPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case DomainmodelPackage.INIT_ACTION_MODULE:
				sequence_InitActionModule(context, (InitActionModule) semanticObject); 
				return; 
			case DomainmodelPackage.INTERFACE_DECLARATION:
				sequence_InterfaceDeclaration(context, (InterfaceDeclaration) semanticObject); 
				return; 
			case DomainmodelPackage.INTERFACE_METHOD_CALL:
				sequence_InterfaceMethodCall(context, (InterfaceMethodCall) semanticObject); 
				return; 
			case DomainmodelPackage.INTERFACE_METHOD_CALL_PARAMETER:
				sequence_InterfaceMethodCallParameter(context, (InterfaceMethodCallParameter) semanticObject); 
				return; 
			case DomainmodelPackage.INTERFACE_METHOD_CALL_PARAMETERS:
				sequence_InterfaceMethodCallParameters(context, (InterfaceMethodCallParameters) semanticObject); 
				return; 
			case DomainmodelPackage.INTERFACE_OPERATION:
				sequence_InterfaceOperation(context, (InterfaceOperation) semanticObject); 
				return; 
			case DomainmodelPackage.INTERFACE_OPERATION_USAGE_RULE:
				sequence_InterfaceOperationUsageRule(context, (InterfaceOperationUsageRule) semanticObject); 
				return; 
			case DomainmodelPackage.INTERFACE_OPERATIONS_USAGE_RULE:
				sequence_InterfaceOperationsUsageRule(context, (InterfaceOperationsUsageRule) semanticObject); 
				return; 
			case DomainmodelPackage.MAIN_FEATURE:
				sequence_MainFeature(context, (MainFeature) semanticObject); 
				return; 
			case DomainmodelPackage.MAIN_FEATURE_OPTION:
				sequence_MainFeatureOption(context, (MainFeatureOption) semanticObject); 
				return; 
			case DomainmodelPackage.METHOD_CALL:
				sequence_MethodCall(context, (MethodCall) semanticObject); 
				return; 
			case DomainmodelPackage.METHOD_PARAMETER:
				sequence_MethodParameter(context, (MethodParameter) semanticObject); 
				return; 
			case DomainmodelPackage.METHOD_PARAMETERS:
				sequence_MethodParameters(context, (MethodParameters) semanticObject); 
				return; 
			case DomainmodelPackage.MODEL_FEATURE:
				sequence_ModelFeature(context, (ModelFeature) semanticObject); 
				return; 
			case DomainmodelPackage.MODEL_MODULE:
				sequence_ModelModule(context, (ModelModule) semanticObject); 
				return; 
			case DomainmodelPackage.NAMESPACE_DECLARATION:
				sequence_NamespaceDeclaration(context, (NamespaceDeclaration) semanticObject); 
				return; 
			case DomainmodelPackage.NAVIGATE_TO_ACTION:
				sequence_NavigateToAction(context, (NavigateToAction) semanticObject); 
				return; 
			case DomainmodelPackage.SCREEN_FEATURE:
				sequence_ScreenFeature(context, (ScreenFeature) semanticObject); 
				return; 
			case DomainmodelPackage.SCREEN_MODEL_PARAMETER:
				sequence_ScreenModelParameter(context, (ScreenModelParameter) semanticObject); 
				return; 
			case DomainmodelPackage.SCREEN_MODEL_PARAMETERS:
				sequence_ScreenModelParameters(context, (ScreenModelParameters) semanticObject); 
				return; 
			case DomainmodelPackage.SET_ACTION:
				sequence_SetAction(context, (SetAction) semanticObject); 
				return; 
			case DomainmodelPackage.SET_REST_CALL_RECEIVER:
				sequence_SetRestCallReceiver(context, (SetRestCallReceiver) semanticObject); 
				return; 
			case DomainmodelPackage.SET_REST_CALL_RECEIVER_ID_PARAMETER:
				sequence_SetRestCallReceiverIDParameter(context, (SetRestCallReceiverIDParameter) semanticObject); 
				return; 
			case DomainmodelPackage.SET_REST_CALL_RECEIVER_PARAMETERS:
				sequence_SetRestCallReceiverParameters(context, (SetRestCallReceiverParameters) semanticObject); 
				return; 
			case DomainmodelPackage.SET_REST_CALL_RECEIVER_RETURN_TYPE_PARAMETER:
				sequence_SetRestCallReceiverReturnTypeParameter(context, (SetRestCallReceiverReturnTypeParameter) semanticObject); 
				return; 
			case DomainmodelPackage.SET_REST_CALL_RECEIVER_URL_PARAMETER:
				sequence_SetRestCallReceiverURLParameter(context, (SetRestCallReceiverURLParameter) semanticObject); 
				return; 
			case DomainmodelPackage.SET_UI_ELEMENT_RECEIVER:
				sequence_SetUIElementReceiver(context, (SetUIElementReceiver) semanticObject); 
				return; 
			case DomainmodelPackage.STATELESS_COMPONENT:
				sequence_StatelessComponent(context, (StatelessComponent) semanticObject); 
				return; 
			case DomainmodelPackage.SYSTEM_DEFINITION:
				sequence_SystemDefinition(context, (SystemDefinition) semanticObject); 
				return; 
			case DomainmodelPackage.UI_ACTION_MODULE:
				sequence_UIActionModule(context, (UIActionModule) semanticObject); 
				return; 
			case DomainmodelPackage.UI_MODULE:
				sequence_UIModule(context, (UIModule) semanticObject); 
				return; 
			case DomainmodelPackage.VALIDATE_ACTION:
				sequence_ValidateAction(context, (ValidateAction) semanticObject); 
				return; 
			case DomainmodelPackage.VALIDATOR_FEATURE:
				sequence_ValidatorFeature(context, (ValidatorFeature) semanticObject); 
				return; 
			case DomainmodelPackage.VALIDATOR_MODULE:
				sequence_ValidatorModule(context, (ValidatorModule) semanticObject); 
				return; 
			case DomainmodelPackage.VALIDATOR_RULE:
				sequence_ValidatorRule(context, (ValidatorRule) semanticObject); 
				return; 
			case DomainmodelPackage.VALIDATOR_RULES:
				sequence_ValidatorRules(context, (ValidatorRules) semanticObject); 
				return; 
			case DomainmodelPackage.VIEW_MODULE:
				sequence_ViewModule(context, (ViewModule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (uiAction=[UIActionModule|ID] uiReceiver=SetUIElementReceiver)
	 */
	protected void sequence_AttachAction(EObject context, AttachAction semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.ATTACH_ACTION__UI_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.ATTACH_ACTION__UI_ACTION));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.ATTACH_ACTION__UI_RECEIVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.ATTACH_ACTION__UI_RECEIVER));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAttachActionAccess().getUiActionUIActionModuleIDTerminalRuleCall_1_0_1(), semanticObject.getUiAction());
		feeder.accept(grammarAccess.getAttachActionAccess().getUiReceiverSetUIElementReceiverParserRuleCall_3_0(), semanticObject.getUiReceiver());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (bindSource=BindSource attribute=ID? uiReceiver=SetUIElementReceiver)
	 */
	protected void sequence_BindAction(EObject context, BindAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     enumType=STRING
	 */
	protected void sequence_BindEnumSource(EObject context, BindEnumSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     modelFeatureName=[ModelFeature|ID]
	 */
	protected void sequence_BindSource(EObject context, BindSource semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.BIND_SOURCE__MODEL_FEATURE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.BIND_SOURCE__MODEL_FEATURE_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBindSourceAccess().getModelFeatureNameModelFeatureIDTerminalRuleCall_0_0_1(), semanticObject.getModelFeatureName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=[BusinessFeatureType|QualifiedName] (connectPoint1=ID connectPoint2=[BusinessFeature|ID] connectEnd=ID)?)
	 */
	protected void sequence_BusinessFeature(EObject context, BusinessFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (features+=BusinessFeature features+=BusinessFeature*)
	 */
	protected void sequence_BusinessFeatures(EObject context, BusinessFeatures semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         container=ContainerElementLiteral 
	 *         name=ID? 
	 *         (features+=ElementFeature features+=ElementFeature*)? 
	 *         (elements+=ViewElement elements+=ViewElement*)?
	 *     )
	 */
	protected void sequence_ContainerElement(EObject context, ContainerElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (contentElement=ContentElementLiteral name=ID (features+=ElementFeature features+=ElementFeature*)?)
	 */
	protected void sequence_ContentElement(EObject context, ContentElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (elements+=ControllerElement elements+=ControllerElement*)
	 */
	protected void sequence_ControllerModule(EObject context, ControllerModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID mappedType=QualifiedName initValue=STRING?)
	 */
	protected void sequence_DataType(EObject context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID features+=Feature*)
	 */
	protected void sequence_DomainEntity(EObject context, DomainEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (entityType=[DomainEntity|QualifiedName] name=ID operations=InterfaceOperationsUsageRule?)
	 */
	protected void sequence_DomainRepository(EObject context, DomainRepository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     elements+=AbstractElement*
	 */
	protected void sequence_Domainmodel(EObject context, Domainmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=PropertyNameLiteral propertyValue=STRING)
	 */
	protected void sequence_ElementFeature(EObject context, ElementFeature semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.ELEMENT_FEATURE__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.ELEMENT_FEATURE__PROPERTY_NAME));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.ELEMENT_FEATURE__PROPERTY_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.ELEMENT_FEATURE__PROPERTY_VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getElementFeatureAccess().getPropertyNamePropertyNameLiteralEnumRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getElementFeatureAccess().getPropertyValueSTRINGTerminalRuleCall_2_0(), semanticObject.getPropertyValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (entryFeatures+=ModelFeature entryFeatures+=ModelFeature*)
	 */
	protected void sequence_EntryParametersModule(EObject context, EntryParametersModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     uiActionName=[UIActionModule|ID]
	 */
	protected void sequence_ExecuteAction(EObject context, ExecuteAction semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.EXECUTE_ACTION__UI_ACTION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.EXECUTE_ACTION__UI_ACTION_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExecuteActionAccess().getUiActionNameUIActionModuleIDTerminalRuleCall_1_0_1(), semanticObject.getUiActionName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID (mappingOption=FeatureMappingOptions mapName=ID)? type=[Type|QualifiedName])
	 */
	protected void sequence_Feature(EObject context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Import(EObject context, Import semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (initActionFeatures+=InitActionFeature initActionFeatures+=InitActionFeature*)
	 */
	protected void sequence_InitActionModule(EObject context, InitActionModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID operations+=InterfaceOperation*)
	 */
	protected void sequence_InterfaceDeclaration(EObject context, InterfaceDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (parameterName=[MethodParameter|QualifiedName] (parameterType=ID | parameterType=STRING))
	 */
	protected void sequence_InterfaceMethodCallParameter(EObject context, InterfaceMethodCallParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (parameters+=InterfaceMethodCallParameter parameters+=InterfaceMethodCallParameter*)
	 */
	protected void sequence_InterfaceMethodCallParameters(EObject context, InterfaceMethodCallParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (interfaceInstanceName=[BusinessFeature|ID] methodName=[MethodCall|QualifiedName] parameters+=InterfaceMethodCallParameters)
	 */
	protected void sequence_InterfaceMethodCall(EObject context, InterfaceMethodCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID interfaceName=[InterfaceDeclaration|QualifiedName])
	 */
	protected void sequence_InterfaceOperationUsageRule(EObject context, InterfaceOperationUsageRule semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.INTERFACE_OPERATION_USAGE_RULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.INTERFACE_OPERATION_USAGE_RULE__NAME));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.INTERFACE_OPERATION_USAGE_RULE__INTERFACE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.INTERFACE_OPERATION_USAGE_RULE__INTERFACE_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getInterfaceOperationUsageRuleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInterfaceOperationUsageRuleAccess().getInterfaceNameInterfaceDeclarationQualifiedNameParserRuleCall_3_0_1(), semanticObject.getInterfaceName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (restOperation=RestOperation? methodCall=MethodCall type=[Type|QualifiedName])
	 */
	protected void sequence_InterfaceOperation(EObject context, InterfaceOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (usageOperations+=InterfaceOperationUsageRule usageOperations+=InterfaceOperationUsageRule*)
	 */
	protected void sequence_InterfaceOperationsUsageRule(EObject context, InterfaceOperationsUsageRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_MainFeatureOption(EObject context, MainFeatureOption semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.MAIN_FEATURE_OPTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.MAIN_FEATURE_OPTION__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMainFeatureOptionAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (features+=MainFeatureOption features+=MainFeatureOption*)
	 */
	protected void sequence_MainFeature(EObject context, MainFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID parameters=MethodParameters?)
	 */
	protected void sequence_MethodCall(EObject context, MethodCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[Type|QualifiedName] name=ID)
	 */
	protected void sequence_MethodParameter(EObject context, MethodParameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.METHOD_PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.METHOD_PARAMETER__TYPE));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.METHOD_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.METHOD_PARAMETER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMethodParameterAccess().getTypeTypeQualifiedNameParserRuleCall_0_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getMethodParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (parameters+=MethodParameter parameters+=MethodParameter*)
	 */
	protected void sequence_MethodParameters(EObject context, MethodParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=[Type|QualifiedName])
	 */
	protected void sequence_ModelFeature(EObject context, ModelFeature semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.MODEL_FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.MODEL_FEATURE__NAME));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.MODEL_FEATURE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.MODEL_FEATURE__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getModelFeatureAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getModelFeatureAccess().getTypeTypeQualifiedNameParserRuleCall_2_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (modelFeatures+=ModelFeature modelFeatures+=ModelFeature*)
	 */
	protected void sequence_ModelModule(EObject context, ModelModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=QualifiedName namespaceElements+=AbstractNamespaceElement*)
	 */
	protected void sequence_NamespaceDeclaration(EObject context, NamespaceDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (screenElementId=[ScreenFeature|ID] modelFeatures=ScreenModelParameters?)
	 */
	protected void sequence_NavigateToAction(EObject context, NavigateToAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID screenModules+=ScreenModule screenModules+=ScreenModule*)
	 */
	protected void sequence_ScreenFeature(EObject context, ScreenFeature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (modelFeatureName=[ModelFeature|QualifiedName] modelFeatureValue=STRING)
	 */
	protected void sequence_ScreenModelParameter(EObject context, ScreenModelParameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SCREEN_MODEL_PARAMETER__MODEL_FEATURE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SCREEN_MODEL_PARAMETER__MODEL_FEATURE_NAME));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SCREEN_MODEL_PARAMETER__MODEL_FEATURE_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SCREEN_MODEL_PARAMETER__MODEL_FEATURE_VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getScreenModelParameterAccess().getModelFeatureNameModelFeatureQualifiedNameParserRuleCall_0_0_1(), semanticObject.getModelFeatureName());
		feeder.accept(grammarAccess.getScreenModelParameterAccess().getModelFeatureValueSTRINGTerminalRuleCall_2_0(), semanticObject.getModelFeatureValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (parameters+=ScreenModelParameter parameters+=ScreenModelParameter*)
	 */
	protected void sequence_ScreenModelParameters(EObject context, ScreenModelParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (modelFeatureName=[ModelFeature|ID] setActionReceiver=SetActionReceiver)
	 */
	protected void sequence_SetAction(EObject context, SetAction semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SET_ACTION__MODEL_FEATURE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SET_ACTION__MODEL_FEATURE_NAME));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SET_ACTION__SET_ACTION_RECEIVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SET_ACTION__SET_ACTION_RECEIVER));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSetActionAccess().getModelFeatureNameModelFeatureIDTerminalRuleCall_1_0_1(), semanticObject.getModelFeatureName());
		feeder.accept(grammarAccess.getSetActionAccess().getSetActionReceiverSetActionReceiverParserRuleCall_3_0(), semanticObject.getSetActionReceiver());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     parameterType=ID
	 */
	protected void sequence_SetRestCallReceiverIDParameter(EObject context, SetRestCallReceiverIDParameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SET_REST_CALL_RECEIVER_ID_PARAMETER__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SET_REST_CALL_RECEIVER_ID_PARAMETER__PARAMETER_TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSetRestCallReceiverIDParameterAccess().getParameterTypeIDTerminalRuleCall_2_0(), semanticObject.getParameterType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (parameters+=SetRestCallReceiverParameter parameters+=SetRestCallReceiverParameter*)
	 */
	protected void sequence_SetRestCallReceiverParameters(EObject context, SetRestCallReceiverParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     parameterType=[Type|QualifiedName]
	 */
	protected void sequence_SetRestCallReceiverReturnTypeParameter(EObject context, SetRestCallReceiverReturnTypeParameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SET_REST_CALL_RECEIVER_RETURN_TYPE_PARAMETER__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SET_REST_CALL_RECEIVER_RETURN_TYPE_PARAMETER__PARAMETER_TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSetRestCallReceiverReturnTypeParameterAccess().getParameterTypeTypeQualifiedNameParserRuleCall_2_0_1(), semanticObject.getParameterType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     parameterType=STRING
	 */
	protected void sequence_SetRestCallReceiverURLParameter(EObject context, SetRestCallReceiverURLParameter semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SET_REST_CALL_RECEIVER_URL_PARAMETER__PARAMETER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SET_REST_CALL_RECEIVER_URL_PARAMETER__PARAMETER_TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSetRestCallReceiverURLParameterAccess().getParameterTypeSTRINGTerminalRuleCall_2_0(), semanticObject.getParameterType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     parameters+=SetRestCallReceiverParameters
	 */
	protected void sequence_SetRestCallReceiver(EObject context, SetRestCallReceiver semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (widgetName=[ViewElement|ID] uiKey=UIElementReceiverKey)
	 */
	protected void sequence_SetUIElementReceiver(EObject context, SetUIElementReceiver semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SET_UI_ELEMENT_RECEIVER__WIDGET_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SET_UI_ELEMENT_RECEIVER__WIDGET_NAME));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.SET_UI_ELEMENT_RECEIVER__UI_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.SET_UI_ELEMENT_RECEIVER__UI_KEY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSetUIElementReceiverAccess().getWidgetNameViewElementIDTerminalRuleCall_0_0_1(), semanticObject.getWidgetName());
		feeder.accept(grammarAccess.getSetUIElementReceiverAccess().getUiKeyUIElementReceiverKeyEnumRuleCall_2_0(), semanticObject.getUiKey());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID operations=InterfaceOperationsUsageRule?)
	 */
	protected void sequence_StatelessComponent(EObject context, StatelessComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID modules+=SystemModule modules+=SystemModule*)
	 */
	protected void sequence_SystemDefinition(EObject context, SystemDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID uiActionFeatures+=UIActionFeature uiActionFeatures+=UIActionFeature*)
	 */
	protected void sequence_UIActionModule(EObject context, UIActionModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (uiFeatures+=UIFeature uiFeatures+=UIFeature*)
	 */
	protected void sequence_UIModule(EObject context, UIModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (condition=[ValidatorFeature|ID] uiReceiver=SetUIElementReceiver)
	 */
	protected void sequence_ValidateAction(EObject context, ValidateAction semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.VALIDATE_ACTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.VALIDATE_ACTION__CONDITION));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.VALIDATE_ACTION__UI_RECEIVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.VALIDATE_ACTION__UI_RECEIVER));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getValidateActionAccess().getConditionValidatorFeatureIDTerminalRuleCall_1_0_1(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getValidateActionAccess().getUiReceiverSetUIElementReceiverParserRuleCall_3_0(), semanticObject.getUiReceiver());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID validatorRules=ValidatorRules)
	 */
	protected void sequence_ValidatorFeature(EObject context, ValidatorFeature semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.VALIDATOR_FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.VALIDATOR_FEATURE__NAME));
			if(transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.VALIDATOR_FEATURE__VALIDATOR_RULES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.VALIDATOR_FEATURE__VALIDATOR_RULES));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getValidatorFeatureAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getValidatorFeatureAccess().getValidatorRulesValidatorRulesParserRuleCall_3_0(), semanticObject.getValidatorRules());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (validatorFeatures+=ValidatorFeature validatorFeatures+=ValidatorFeature*)
	 */
	protected void sequence_ValidatorModule(EObject context, ValidatorModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (stringRule=STRING | conditionName=[ValidatorFeature|ID])
	 */
	protected void sequence_ValidatorRule(EObject context, ValidatorRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (validatorRules+=ValidatorRule validatorRules+=ValidatorRule*)
	 */
	protected void sequence_ValidatorRules(EObject context, ValidatorRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     elements+=ViewElement
	 */
	protected void sequence_ViewModule(EObject context, ViewModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
