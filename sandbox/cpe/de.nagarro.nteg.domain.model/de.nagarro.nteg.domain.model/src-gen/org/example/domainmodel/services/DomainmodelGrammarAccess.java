/*
 * generated by Xtext
 */
package org.example.domainmodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DomainmodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamespaceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	NamespaceDeclaration | SystemDefinition;
		@Override public ParserRule getRule() { return rule; }

		//NamespaceDeclaration | SystemDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamespaceDeclaration
		public RuleCall getNamespaceDeclarationParserRuleCall_0() { return cNamespaceDeclarationParserRuleCall_0; }

		//SystemDefinition
		public RuleCall getSystemDefinitionParserRuleCall_1() { return cSystemDefinitionParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	DomainEntity | DataType;
		@Override public ParserRule getRule() { return rule; }

		//DomainEntity | DataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//DomainEntity
		public RuleCall getDomainEntityParserRuleCall_0() { return cDomainEntityParserRuleCall_0; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMappedtoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappedTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappedTypeQualifiedNameParserRuleCall_3_0 = (RuleCall)cMappedTypeAssignment_3.eContents().get(0);
		private final Keyword cConfigKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInitKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitValueSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cInitValueAssignment_5_1.eContents().get(0);
		private final Keyword cPersistableKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DataType: //'datatype' name = ID 'mappedto' javaType=[jvmTypes::JvmType | QualifiedName] ('config')? ('init' initValue=STRING )? ('persistable')?
		//	"datatype" name=ID "mappedto" mappedType=QualifiedName "config"? ("init" initValue=STRING)? "persistable"?;
		@Override public ParserRule getRule() { return rule; }

		////'datatype' name = ID 'mappedto' javaType=[jvmTypes::JvmType | QualifiedName] ('config')? ('init' initValue=STRING )? ('persistable')?
		//"datatype" name=ID "mappedto" mappedType=QualifiedName "config"? ("init" initValue=STRING)? "persistable"?
		public Group getGroup() { return cGroup; }

		////'datatype' name = ID 'mappedto' javaType=[jvmTypes::JvmType | QualifiedName] ('config')? ('init' initValue=STRING )? ('persistable')?
		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"mappedto"
		public Keyword getMappedtoKeyword_2() { return cMappedtoKeyword_2; }

		//mappedType=QualifiedName
		public Assignment getMappedTypeAssignment_3() { return cMappedTypeAssignment_3; }

		//QualifiedName
		public RuleCall getMappedTypeQualifiedNameParserRuleCall_3_0() { return cMappedTypeQualifiedNameParserRuleCall_3_0; }

		//"config"?
		public Keyword getConfigKeyword_4() { return cConfigKeyword_4; }

		//("init" initValue=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"init"
		public Keyword getInitKeyword_5_0() { return cInitKeyword_5_0; }

		//initValue=STRING
		public Assignment getInitValueAssignment_5_1() { return cInitValueAssignment_5_1; }

		//STRING
		public RuleCall getInitValueSTRINGTerminalRuleCall_5_1_0() { return cInitValueSTRINGTerminalRuleCall_5_1_0; }

		//"persistable"?
		public Keyword getPersistableKeyword_6() { return cPersistableKeyword_6; }
	}

	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamespaceElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamespaceElementsAbstractNamespaceElementParserRuleCall_3_0 = (RuleCall)cNamespaceElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NamespaceDeclaration:
		//	"namespace" name=QualifiedName "{" namespaceElements+=AbstractNamespaceElement* "}";
		@Override public ParserRule getRule() { return rule; }

		//"namespace" name=QualifiedName "{" namespaceElements+=AbstractNamespaceElement* "}"
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//namespaceElements+=AbstractNamespaceElement*
		public Assignment getNamespaceElementsAssignment_3() { return cNamespaceElementsAssignment_3; }

		//AbstractNamespaceElement
		public RuleCall getNamespaceElementsAbstractNamespaceElementParserRuleCall_3_0() { return cNamespaceElementsAbstractNamespaceElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AbstractNamespaceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractNamespaceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatelessComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDomainRepositoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDomainEntityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDataTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImportParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AbstractNamespaceElement:
		//	InterfaceDeclaration | StatelessComponent | DomainRepository | DomainEntity | DataType | Import;
		@Override public ParserRule getRule() { return rule; }

		//InterfaceDeclaration | StatelessComponent | DomainRepository | DomainEntity | DataType | Import
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationParserRuleCall_0() { return cInterfaceDeclarationParserRuleCall_0; }

		//StatelessComponent
		public RuleCall getStatelessComponentParserRuleCall_1() { return cStatelessComponentParserRuleCall_1; }

		//DomainRepository
		public RuleCall getDomainRepositoryParserRuleCall_2() { return cDomainRepositoryParserRuleCall_2; }

		//DomainEntity
		public RuleCall getDomainEntityParserRuleCall_3() { return cDomainEntityParserRuleCall_3; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_4() { return cDataTypeParserRuleCall_4; }

		//Import
		public RuleCall getImportParserRuleCall_5() { return cImportParserRuleCall_5; }
	}

	public class FeatureMappingOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMappingOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOne2oneKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOne2manyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMany2oneKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMany2manyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		/// * Domain entity * / FeatureMappingOptions:
		//	"one2one" | "one2many" | "many2one" | "many2many";
		@Override public ParserRule getRule() { return rule; }

		//"one2one" | "one2many" | "many2one" | "many2many"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"one2one"
		public Keyword getOne2oneKeyword_0() { return cOne2oneKeyword_0; }

		//"one2many"
		public Keyword getOne2manyKeyword_1() { return cOne2manyKeyword_1; }

		//"many2one"
		public Keyword getMany2oneKeyword_2() { return cMany2oneKeyword_2; }

		//"many2many"
		public Keyword getMany2manyKeyword_3() { return cMany2manyKeyword_3; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMappingOptionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMappingOptionFeatureMappingOptionsParserRuleCall_2_0_0 = (RuleCall)cMappingOptionAssignment_2_0.eContents().get(0);
		private final Assignment cMapNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMapNameIDTerminalRuleCall_2_1_0 = (RuleCall)cMapNameAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cTypeTypeCrossReference_4_0.eContents().get(1);
		
		//Feature:
		//	"ref"? name=ID (mappingOption=FeatureMappingOptions mapName=ID)? ":" type=[Type|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"ref"? name=ID (mappingOption=FeatureMappingOptions mapName=ID)? ":" type=[Type|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"ref"?
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(mappingOption=FeatureMappingOptions mapName=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//mappingOption=FeatureMappingOptions
		public Assignment getMappingOptionAssignment_2_0() { return cMappingOptionAssignment_2_0; }

		//FeatureMappingOptions
		public RuleCall getMappingOptionFeatureMappingOptionsParserRuleCall_2_0_0() { return cMappingOptionFeatureMappingOptionsParserRuleCall_2_0_0; }

		//mapName=ID
		public Assignment getMapNameAssignment_2_1() { return cMapNameAssignment_2_1; }

		//ID
		public RuleCall getMapNameIDTerminalRuleCall_2_1_0() { return cMapNameIDTerminalRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_4_0() { return cTypeTypeCrossReference_4_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_4_0_1() { return cTypeTypeQualifiedNameParserRuleCall_4_0_1; }
	}

	public class DomainEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainentityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DomainEntity:
		//	"domainentity" name=ID "{" features+=Feature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"domainentity" name=ID "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//"domainentity"
		public Keyword getDomainentityKeyword_0() { return cDomainentityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RestMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestMethodCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGETKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPOSTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPUTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		/// * Interface * / RestMethodCall:
		//	"GET" | "POST" | "PUT";
		@Override public ParserRule getRule() { return rule; }

		//"GET" | "POST" | "PUT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"GET"
		public Keyword getGETKeyword_0() { return cGETKeyword_0; }

		//"POST"
		public Keyword getPOSTKeyword_1() { return cPOSTKeyword_1; }

		//"PUT"
		public Keyword getPUTKeyword_2() { return cPUTKeyword_2; }
	}

	public class RestOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMethodKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cRestMethodCallParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RestOperation:
		//	"@rest{" STRING ", " "Method." RestMethodCall "}";
		@Override public ParserRule getRule() { return rule; }

		//"@rest{" STRING ", " "Method." RestMethodCall "}"
		public Group getGroup() { return cGroup; }

		//"@rest{"
		public Keyword getRestKeyword_0() { return cRestKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//", "
		public Keyword getCommaSpaceKeyword_2() { return cCommaSpaceKeyword_2; }

		//"Method."
		public Keyword getMethodKeyword_3() { return cMethodKeyword_3; }

		//RestMethodCall
		public RuleCall getRestMethodCallParserRuleCall_4() { return cRestMethodCallParserRuleCall_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MethodParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MethodParameter:
		//	type=[Type|QualifiedName] name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=[Type|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class MethodParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersMethodParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersMethodParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//MethodParameters:
		//	parameters+=MethodParameter (", " parameters+=MethodParameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=MethodParameter (", " parameters+=MethodParameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=MethodParameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//MethodParameter
		public RuleCall getParametersMethodParameterParserRuleCall_0_0() { return cParametersMethodParameterParserRuleCall_0_0; }

		//(", " parameters+=MethodParameter)*
		public Group getGroup_1() { return cGroup_1; }

		//", "
		public Keyword getCommaSpaceKeyword_1_0() { return cCommaSpaceKeyword_1_0; }

		//parameters+=MethodParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//MethodParameter
		public RuleCall getParametersMethodParameterParserRuleCall_1_1_0() { return cParametersMethodParameterParserRuleCall_1_1_0; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersMethodParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//	name=ID "(" parameters=MethodParameters? ")";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" parameters=MethodParameters? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters=MethodParameters?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//MethodParameters
		public RuleCall getParametersMethodParametersParserRuleCall_2_0() { return cParametersMethodParametersParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class InterfaceOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRestOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRestOperationRestOperationParserRuleCall_1_0 = (RuleCall)cRestOperationAssignment_1.eContents().get(0);
		private final Assignment cMethodCallAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodCallMethodCallParserRuleCall_2_0 = (RuleCall)cMethodCallAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cTypeTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InterfaceOperation:
		//	"operation" restOperation=RestOperation? methodCall=MethodCall ":" type=[Type|QualifiedName] "[]"?;
		@Override public ParserRule getRule() { return rule; }

		//"operation" restOperation=RestOperation? methodCall=MethodCall ":" type=[Type|QualifiedName] "[]"?
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//restOperation=RestOperation?
		public Assignment getRestOperationAssignment_1() { return cRestOperationAssignment_1; }

		//RestOperation
		public RuleCall getRestOperationRestOperationParserRuleCall_1_0() { return cRestOperationRestOperationParserRuleCall_1_0; }

		//methodCall=MethodCall
		public Assignment getMethodCallAssignment_2() { return cMethodCallAssignment_2; }

		//MethodCall
		public RuleCall getMethodCallMethodCallParserRuleCall_2_0() { return cMethodCallMethodCallParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_4_0() { return cTypeTypeCrossReference_4_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_4_0_1() { return cTypeTypeQualifiedNameParserRuleCall_4_0_1; }

		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_5() { return cLeftSquareBracketRightSquareBracketKeyword_5; }
	}

	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationsInterfaceOperationParserRuleCall_3_0 = (RuleCall)cOperationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfaceDeclaration:
		//	"interface" name=ID "{" operations+=InterfaceOperation* "}";
		@Override public ParserRule getRule() { return rule; }

		//"interface" name=ID "{" operations+=InterfaceOperation* "}"
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//operations+=InterfaceOperation*
		public Assignment getOperationsAssignment_3() { return cOperationsAssignment_3; }

		//InterfaceOperation
		public RuleCall getOperationsInterfaceOperationParserRuleCall_3_0() { return cOperationsInterfaceOperationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InterfaceOperationUsageRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceOperationUsageRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cProvidesKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRequiresKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfaceNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInterfaceNameInterfaceDeclarationCrossReference_3_0 = (CrossReference)cInterfaceNameAssignment_3.eContents().get(0);
		private final RuleCall cInterfaceNameInterfaceDeclarationQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cInterfaceNameInterfaceDeclarationCrossReference_3_0.eContents().get(1);
		
		/// * Stateless component * / InterfaceOperationUsageRule:
		//	("provides" | "requires") name=ID ":" interfaceName=[InterfaceDeclaration|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//("provides" | "requires") name=ID ":" interfaceName=[InterfaceDeclaration|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"provides" | "requires"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"provides"
		public Keyword getProvidesKeyword_0_0() { return cProvidesKeyword_0_0; }

		//"requires"
		public Keyword getRequiresKeyword_0_1() { return cRequiresKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//interfaceName=[InterfaceDeclaration|QualifiedName]
		public Assignment getInterfaceNameAssignment_3() { return cInterfaceNameAssignment_3; }

		//[InterfaceDeclaration|QualifiedName]
		public CrossReference getInterfaceNameInterfaceDeclarationCrossReference_3_0() { return cInterfaceNameInterfaceDeclarationCrossReference_3_0; }

		//QualifiedName
		public RuleCall getInterfaceNameInterfaceDeclarationQualifiedNameParserRuleCall_3_0_1() { return cInterfaceNameInterfaceDeclarationQualifiedNameParserRuleCall_3_0_1; }
	}

	public class InterfaceOperationsUsageRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceOperationsUsageRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUsageOperationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUsageOperationsInterfaceOperationUsageRuleParserRuleCall_0_0 = (RuleCall)cUsageOperationsAssignment_0.eContents().get(0);
		private final Assignment cUsageOperationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsageOperationsInterfaceOperationUsageRuleParserRuleCall_1_0 = (RuleCall)cUsageOperationsAssignment_1.eContents().get(0);
		
		//InterfaceOperationsUsageRule:
		//	usageOperations+=InterfaceOperationUsageRule usageOperations+=InterfaceOperationUsageRule*;
		@Override public ParserRule getRule() { return rule; }

		//usageOperations+=InterfaceOperationUsageRule usageOperations+=InterfaceOperationUsageRule*
		public Group getGroup() { return cGroup; }

		//usageOperations+=InterfaceOperationUsageRule
		public Assignment getUsageOperationsAssignment_0() { return cUsageOperationsAssignment_0; }

		//InterfaceOperationUsageRule
		public RuleCall getUsageOperationsInterfaceOperationUsageRuleParserRuleCall_0_0() { return cUsageOperationsInterfaceOperationUsageRuleParserRuleCall_0_0; }

		//usageOperations+=InterfaceOperationUsageRule*
		public Assignment getUsageOperationsAssignment_1() { return cUsageOperationsAssignment_1; }

		//InterfaceOperationUsageRule
		public RuleCall getUsageOperationsInterfaceOperationUsageRuleParserRuleCall_1_0() { return cUsageOperationsInterfaceOperationUsageRuleParserRuleCall_1_0; }
	}

	public class StatelessComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatelessComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatelessComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationsInterfaceOperationsUsageRuleParserRuleCall_3_0 = (RuleCall)cOperationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StatelessComponent:
		//	"stateless-component" name=ID "{" operations=InterfaceOperationsUsageRule? "}";
		@Override public ParserRule getRule() { return rule; }

		//"stateless-component" name=ID "{" operations=InterfaceOperationsUsageRule? "}"
		public Group getGroup() { return cGroup; }

		//"stateless-component"
		public Keyword getStatelessComponentKeyword_0() { return cStatelessComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//operations=InterfaceOperationsUsageRule?
		public Assignment getOperationsAssignment_3() { return cOperationsAssignment_3; }

		//InterfaceOperationsUsageRule
		public RuleCall getOperationsInterfaceOperationsUsageRuleParserRuleCall_3_0() { return cOperationsInterfaceOperationsUsageRuleParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DomainRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainrepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityTypeDomainEntityCrossReference_2_0 = (CrossReference)cEntityTypeAssignment_2.eContents().get(0);
		private final RuleCall cEntityTypeDomainEntityQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cEntityTypeDomainEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationsInterfaceOperationsUsageRuleParserRuleCall_5_0 = (RuleCall)cOperationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * Domain repository * / DomainRepository:
		//	"domainrepository" "for" entityType=[DomainEntity|QualifiedName] name=ID "{" operations=InterfaceOperationsUsageRule?
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"domainrepository" "for" entityType=[DomainEntity|QualifiedName] name=ID "{" operations=InterfaceOperationsUsageRule?
		//"}"
		public Group getGroup() { return cGroup; }

		//"domainrepository"
		public Keyword getDomainrepositoryKeyword_0() { return cDomainrepositoryKeyword_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//entityType=[DomainEntity|QualifiedName]
		public Assignment getEntityTypeAssignment_2() { return cEntityTypeAssignment_2; }

		//[DomainEntity|QualifiedName]
		public CrossReference getEntityTypeDomainEntityCrossReference_2_0() { return cEntityTypeDomainEntityCrossReference_2_0; }

		//QualifiedName
		public RuleCall getEntityTypeDomainEntityQualifiedNameParserRuleCall_2_0_1() { return cEntityTypeDomainEntityQualifiedNameParserRuleCall_2_0_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//operations=InterfaceOperationsUsageRule?
		public Assignment getOperationsAssignment_5() { return cOperationsAssignment_5; }

		//InterfaceOperationsUsageRule
		public RuleCall getOperationsInterfaceOperationsUsageRuleParserRuleCall_5_0() { return cOperationsInterfaceOperationsUsageRuleParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EntryParametersModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryParametersModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntryFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntryFeaturesModelFeatureParserRuleCall_2_0 = (RuleCall)cEntryFeaturesAssignment_2.eContents().get(0);
		private final Assignment cEntryFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntryFeaturesModelFeatureParserRuleCall_3_0 = (RuleCall)cEntryFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * System definition * / / * -> Entry parameters * / EntryParametersModule:
		//	"entryParameters" "{" entryFeatures+=ModelFeature entryFeatures+=ModelFeature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"entryParameters" "{" entryFeatures+=ModelFeature entryFeatures+=ModelFeature* "}"
		public Group getGroup() { return cGroup; }

		//"entryParameters"
		public Keyword getEntryParametersKeyword_0() { return cEntryParametersKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//entryFeatures+=ModelFeature
		public Assignment getEntryFeaturesAssignment_2() { return cEntryFeaturesAssignment_2; }

		//ModelFeature
		public RuleCall getEntryFeaturesModelFeatureParserRuleCall_2_0() { return cEntryFeaturesModelFeatureParserRuleCall_2_0; }

		//entryFeatures+=ModelFeature*
		public Assignment getEntryFeaturesAssignment_3() { return cEntryFeaturesAssignment_3; }

		//ModelFeature
		public RuleCall getEntryFeaturesModelFeatureParserRuleCall_3_0() { return cEntryFeaturesModelFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ModelFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cOrderedKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		/// * -> Model * / ModelFeature:
		//	name=ID ":" type=[Type|QualifiedName] ("[]" "ordered"?)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" type=[Type|QualifiedName] ("[]" "ordered"?)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeTypeQualifiedNameParserRuleCall_2_0_1; }

		//("[]" "ordered"?)?
		public Group getGroup_3() { return cGroup_3; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_3_0() { return cLeftSquareBracketRightSquareBracketKeyword_3_0; }

		//"ordered"?
		public Keyword getOrderedKeyword_3_1() { return cOrderedKeyword_3_1; }
	}

	public class ModelModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelFeaturesModelFeatureParserRuleCall_2_0 = (RuleCall)cModelFeaturesAssignment_2.eContents().get(0);
		private final Assignment cModelFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelFeaturesModelFeatureParserRuleCall_3_0 = (RuleCall)cModelFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModelModule:
		//	"model" "{" modelFeatures+=ModelFeature modelFeatures+=ModelFeature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"model" "{" modelFeatures+=ModelFeature modelFeatures+=ModelFeature* "}"
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//modelFeatures+=ModelFeature
		public Assignment getModelFeaturesAssignment_2() { return cModelFeaturesAssignment_2; }

		//ModelFeature
		public RuleCall getModelFeaturesModelFeatureParserRuleCall_2_0() { return cModelFeaturesModelFeatureParserRuleCall_2_0; }

		//modelFeatures+=ModelFeature*
		public Assignment getModelFeaturesAssignment_3() { return cModelFeaturesAssignment_3; }

		//ModelFeature
		public RuleCall getModelFeaturesModelFeatureParserRuleCall_3_0() { return cModelFeaturesModelFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ElementFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNamePropertyNameLiteralEnumRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cPropertyValueAssignment_2.eContents().get(0);
		
		//ElementFeature:
		//	propertyName=PropertyNameLiteral ":" propertyValue=STRING;
		@Override public ParserRule getRule() { return rule; }

		//propertyName=PropertyNameLiteral ":" propertyValue=STRING
		public Group getGroup() { return cGroup; }

		//propertyName=PropertyNameLiteral
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }

		//PropertyNameLiteral
		public RuleCall getPropertyNamePropertyNameLiteralEnumRuleCall_0_0() { return cPropertyNamePropertyNameLiteralEnumRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//propertyValue=STRING
		public Assignment getPropertyValueAssignment_2() { return cPropertyValueAssignment_2; }

		//STRING
		public RuleCall getPropertyValueSTRINGTerminalRuleCall_2_0() { return cPropertyValueSTRINGTerminalRuleCall_2_0; }
	}

	public class ContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContentElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentElementContentElementLiteralEnumRuleCall_0_0 = (RuleCall)cContentElementAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFeaturesElementFeatureParserRuleCall_3_0_0 = (RuleCall)cFeaturesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFeaturesElementFeatureParserRuleCall_3_1_1_0 = (RuleCall)cFeaturesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContentElement:
		//	contentElement=ContentElementLiteral name=ID "(" (features+=ElementFeature (", " features+=ElementFeature)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//contentElement=ContentElementLiteral name=ID "(" (features+=ElementFeature (", " features+=ElementFeature)*)? ")"
		public Group getGroup() { return cGroup; }

		//contentElement=ContentElementLiteral
		public Assignment getContentElementAssignment_0() { return cContentElementAssignment_0; }

		//ContentElementLiteral
		public RuleCall getContentElementContentElementLiteralEnumRuleCall_0_0() { return cContentElementContentElementLiteralEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(features+=ElementFeature (", " features+=ElementFeature)*)?
		public Group getGroup_3() { return cGroup_3; }

		//features+=ElementFeature
		public Assignment getFeaturesAssignment_3_0() { return cFeaturesAssignment_3_0; }

		//ElementFeature
		public RuleCall getFeaturesElementFeatureParserRuleCall_3_0_0() { return cFeaturesElementFeatureParserRuleCall_3_0_0; }

		//(", " features+=ElementFeature)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//", "
		public Keyword getCommaSpaceKeyword_3_1_0() { return cCommaSpaceKeyword_3_1_0; }

		//features+=ElementFeature
		public Assignment getFeaturesAssignment_3_1_1() { return cFeaturesAssignment_3_1_1; }

		//ElementFeature
		public RuleCall getFeaturesElementFeatureParserRuleCall_3_1_1_0() { return cFeaturesElementFeatureParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ContainerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContainerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContainerContainerElementLiteralEnumRuleCall_0_0 = (RuleCall)cContainerAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeaturesElementFeatureParserRuleCall_2_1_0 = (RuleCall)cFeaturesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaSpaceKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFeaturesElementFeatureParserRuleCall_2_2_1_0 = (RuleCall)cFeaturesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsViewElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElementsViewElementParserRuleCall_3_2_0 = (RuleCall)cElementsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ContainerElement:
		//	container=ContainerElementLiteral name=ID? ("(" features+=ElementFeature (", " features+=ElementFeature)* ")")? ("{"
		//	elements+=ViewElement elements+=ViewElement* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//container=ContainerElementLiteral name=ID? ("(" features+=ElementFeature (", " features+=ElementFeature)* ")")? ("{"
		//elements+=ViewElement elements+=ViewElement* "}")?
		public Group getGroup() { return cGroup; }

		//container=ContainerElementLiteral
		public Assignment getContainerAssignment_0() { return cContainerAssignment_0; }

		//ContainerElementLiteral
		public RuleCall getContainerContainerElementLiteralEnumRuleCall_0_0() { return cContainerContainerElementLiteralEnumRuleCall_0_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" features+=ElementFeature (", " features+=ElementFeature)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//features+=ElementFeature
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }

		//ElementFeature
		public RuleCall getFeaturesElementFeatureParserRuleCall_2_1_0() { return cFeaturesElementFeatureParserRuleCall_2_1_0; }

		//(", " features+=ElementFeature)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//", "
		public Keyword getCommaSpaceKeyword_2_2_0() { return cCommaSpaceKeyword_2_2_0; }

		//features+=ElementFeature
		public Assignment getFeaturesAssignment_2_2_1() { return cFeaturesAssignment_2_2_1; }

		//ElementFeature
		public RuleCall getFeaturesElementFeatureParserRuleCall_2_2_1_0() { return cFeaturesElementFeatureParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//("{" elements+=ViewElement elements+=ViewElement* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//elements+=ViewElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//ViewElement
		public RuleCall getElementsViewElementParserRuleCall_3_1_0() { return cElementsViewElementParserRuleCall_3_1_0; }

		//elements+=ViewElement*
		public Assignment getElementsAssignment_3_2() { return cElementsAssignment_3_2; }

		//ViewElement
		public RuleCall getElementsViewElementParserRuleCall_3_2_0() { return cElementsViewElementParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class ViewElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContentElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ViewElement:
		//	ContainerElement | ContentElement;
		@Override public ParserRule getRule() { return rule; }

		//ContainerElement | ContentElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContainerElement
		public RuleCall getContainerElementParserRuleCall_0() { return cContainerElementParserRuleCall_0; }

		//ContentElement
		public RuleCall getContentElementParserRuleCall_1() { return cContentElementParserRuleCall_1; }
	}

	public class ViewModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsViewElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ViewModule:
		//	"view" "{" elements+=ViewElement //name=ID
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"view" "{" elements+=ViewElement //name=ID
		//"}"
		public Group getGroup() { return cGroup; }

		//"view"
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=ViewElement
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ViewElement
		public RuleCall getElementsViewElementParserRuleCall_2_0() { return cElementsViewElementParserRuleCall_2_0; }

		////name=ID
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ValidateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidateAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConditionValidatorFeatureCrossReference_1_0 = (CrossReference)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cConditionValidatorFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cConditionValidatorFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUiReceiverAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUiReceiverSetUIElementReceiverParserRuleCall_3_0 = (RuleCall)cUiReceiverAssignment_3.eContents().get(0);
		
		/// * -> Controller * / / * -> Controller.InitAction * / ValidateAction:
		//	"validate" condition=[ValidatorFeature] "on" uiReceiver=SetUIElementReceiver;
		@Override public ParserRule getRule() { return rule; }

		//"validate" condition=[ValidatorFeature] "on" uiReceiver=SetUIElementReceiver
		public Group getGroup() { return cGroup; }

		//"validate"
		public Keyword getValidateKeyword_0() { return cValidateKeyword_0; }

		//condition=[ValidatorFeature]
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//[ValidatorFeature]
		public CrossReference getConditionValidatorFeatureCrossReference_1_0() { return cConditionValidatorFeatureCrossReference_1_0; }

		//ID
		public RuleCall getConditionValidatorFeatureIDTerminalRuleCall_1_0_1() { return cConditionValidatorFeatureIDTerminalRuleCall_1_0_1; }

		//"on"
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//uiReceiver=SetUIElementReceiver
		public Assignment getUiReceiverAssignment_3() { return cUiReceiverAssignment_3; }

		//SetUIElementReceiver
		public RuleCall getUiReceiverSetUIElementReceiverParserRuleCall_3_0() { return cUiReceiverSetUIElementReceiverParserRuleCall_3_0; }
	}

	public class AttachActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttachAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUiActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUiActionUIActionModuleCrossReference_1_0 = (CrossReference)cUiActionAssignment_1.eContents().get(0);
		private final RuleCall cUiActionUIActionModuleIDTerminalRuleCall_1_0_1 = (RuleCall)cUiActionUIActionModuleCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUiReceiverAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUiReceiverSetUIElementReceiverParserRuleCall_3_0 = (RuleCall)cUiReceiverAssignment_3.eContents().get(0);
		
		//AttachAction:
		//	"attach" uiAction=[UIActionModule] "to" uiReceiver=SetUIElementReceiver;
		@Override public ParserRule getRule() { return rule; }

		//"attach" uiAction=[UIActionModule] "to" uiReceiver=SetUIElementReceiver
		public Group getGroup() { return cGroup; }

		//"attach"
		public Keyword getAttachKeyword_0() { return cAttachKeyword_0; }

		//uiAction=[UIActionModule]
		public Assignment getUiActionAssignment_1() { return cUiActionAssignment_1; }

		//[UIActionModule]
		public CrossReference getUiActionUIActionModuleCrossReference_1_0() { return cUiActionUIActionModuleCrossReference_1_0; }

		//ID
		public RuleCall getUiActionUIActionModuleIDTerminalRuleCall_1_0_1() { return cUiActionUIActionModuleIDTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//uiReceiver=SetUIElementReceiver
		public Assignment getUiReceiverAssignment_3() { return cUiReceiverAssignment_3; }

		//SetUIElementReceiver
		public RuleCall getUiReceiverSetUIElementReceiverParserRuleCall_3_0() { return cUiReceiverSetUIElementReceiverParserRuleCall_3_0; }
	}

	public class BindEnumSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindEnumSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumDataSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEnumTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumTypeSTRINGTerminalRuleCall_4_0 = (RuleCall)cEnumTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BindEnumSource:
		//	"enumDataSource" "(" "className" ":" enumType=STRING ")";
		@Override public ParserRule getRule() { return rule; }

		//"enumDataSource" "(" "className" ":" enumType=STRING ")"
		public Group getGroup() { return cGroup; }

		//"enumDataSource"
		public Keyword getEnumDataSourceKeyword_0() { return cEnumDataSourceKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"className"
		public Keyword getClassNameKeyword_2() { return cClassNameKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//enumType=STRING
		public Assignment getEnumTypeAssignment_4() { return cEnumTypeAssignment_4; }

		//STRING
		public RuleCall getEnumTypeSTRINGTerminalRuleCall_4_0() { return cEnumTypeSTRINGTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class BindSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cModelFeatureNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cModelFeatureNameModelFeatureCrossReference_0_0 = (CrossReference)cModelFeatureNameAssignment_0.eContents().get(0);
		private final RuleCall cModelFeatureNameModelFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cModelFeatureNameModelFeatureCrossReference_0_0.eContents().get(1);
		private final RuleCall cBindEnumSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BindSource:
		//	modelFeatureName=[ModelFeature] | BindEnumSource;
		@Override public ParserRule getRule() { return rule; }

		//modelFeatureName=[ModelFeature] | BindEnumSource
		public Alternatives getAlternatives() { return cAlternatives; }

		//modelFeatureName=[ModelFeature]
		public Assignment getModelFeatureNameAssignment_0() { return cModelFeatureNameAssignment_0; }

		//[ModelFeature]
		public CrossReference getModelFeatureNameModelFeatureCrossReference_0_0() { return cModelFeatureNameModelFeatureCrossReference_0_0; }

		//ID
		public RuleCall getModelFeatureNameModelFeatureIDTerminalRuleCall_0_0_1() { return cModelFeatureNameModelFeatureIDTerminalRuleCall_0_0_1; }

		//BindEnumSource
		public RuleCall getBindEnumSourceParserRuleCall_1() { return cBindEnumSourceParserRuleCall_1; }
	}

	public class BindActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBindSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBindSourceBindSourceParserRuleCall_1_0 = (RuleCall)cBindSourceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUiReceiverAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUiReceiverSetUIElementReceiverParserRuleCall_4_0 = (RuleCall)cUiReceiverAssignment_4.eContents().get(0);
		
		//BindAction:
		//	"bind" bindSource=BindSource ("." attribute=ID)? "to" uiReceiver=SetUIElementReceiver;
		@Override public ParserRule getRule() { return rule; }

		//"bind" bindSource=BindSource ("." attribute=ID)? "to" uiReceiver=SetUIElementReceiver
		public Group getGroup() { return cGroup; }

		//"bind"
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }

		//bindSource=BindSource
		public Assignment getBindSourceAssignment_1() { return cBindSourceAssignment_1; }

		//BindSource
		public RuleCall getBindSourceBindSourceParserRuleCall_1_0() { return cBindSourceBindSourceParserRuleCall_1_0; }

		//("." attribute=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//attribute=ID
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }

		//ID
		public RuleCall getAttributeIDTerminalRuleCall_2_1_0() { return cAttributeIDTerminalRuleCall_2_1_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//uiReceiver=SetUIElementReceiver
		public Assignment getUiReceiverAssignment_4() { return cUiReceiverAssignment_4; }

		//SetUIElementReceiver
		public RuleCall getUiReceiverSetUIElementReceiverParserRuleCall_4_0() { return cUiReceiverSetUIElementReceiverParserRuleCall_4_0; }
	}

	public class InitActionFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitActionFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttachActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValidateActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBindActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InitActionFeature:
		//	SetAction | AttachAction | ValidateAction | BindAction;
		@Override public ParserRule getRule() { return rule; }

		//SetAction | AttachAction | ValidateAction | BindAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetAction
		public RuleCall getSetActionParserRuleCall_0() { return cSetActionParserRuleCall_0; }

		//AttachAction
		public RuleCall getAttachActionParserRuleCall_1() { return cAttachActionParserRuleCall_1; }

		//ValidateAction
		public RuleCall getValidateActionParserRuleCall_2() { return cValidateActionParserRuleCall_2; }

		//BindAction
		public RuleCall getBindActionParserRuleCall_3() { return cBindActionParserRuleCall_3; }
	}

	public class InitActionModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitActionModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitactionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitActionFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitActionFeaturesInitActionFeatureParserRuleCall_2_0 = (RuleCall)cInitActionFeaturesAssignment_2.eContents().get(0);
		private final Assignment cInitActionFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitActionFeaturesInitActionFeatureParserRuleCall_3_0 = (RuleCall)cInitActionFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InitActionModule:
		//	"initaction" "{" initActionFeatures+=InitActionFeature initActionFeatures+=InitActionFeature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"initaction" "{" initActionFeatures+=InitActionFeature initActionFeatures+=InitActionFeature* "}"
		public Group getGroup() { return cGroup; }

		//"initaction"
		public Keyword getInitactionKeyword_0() { return cInitactionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//initActionFeatures+=InitActionFeature
		public Assignment getInitActionFeaturesAssignment_2() { return cInitActionFeaturesAssignment_2; }

		//InitActionFeature
		public RuleCall getInitActionFeaturesInitActionFeatureParserRuleCall_2_0() { return cInitActionFeaturesInitActionFeatureParserRuleCall_2_0; }

		//initActionFeatures+=InitActionFeature*
		public Assignment getInitActionFeaturesAssignment_3() { return cInitActionFeaturesAssignment_3; }

		//InitActionFeature
		public RuleCall getInitActionFeaturesInitActionFeatureParserRuleCall_3_0() { return cInitActionFeaturesInitActionFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ValidatorRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidatorRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringRuleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringRuleSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringRuleAssignment_0.eContents().get(0);
		private final Assignment cConditionNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cConditionNameValidatorFeatureCrossReference_1_0 = (CrossReference)cConditionNameAssignment_1.eContents().get(0);
		private final RuleCall cConditionNameValidatorFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cConditionNameValidatorFeatureCrossReference_1_0.eContents().get(1);
		
		/// * -> Controller.Validator * / ValidatorRule:
		//	stringRule=STRING | conditionName=[ValidatorFeature];
		@Override public ParserRule getRule() { return rule; }

		//stringRule=STRING | conditionName=[ValidatorFeature]
		public Alternatives getAlternatives() { return cAlternatives; }

		//stringRule=STRING
		public Assignment getStringRuleAssignment_0() { return cStringRuleAssignment_0; }

		//STRING
		public RuleCall getStringRuleSTRINGTerminalRuleCall_0_0() { return cStringRuleSTRINGTerminalRuleCall_0_0; }

		//conditionName=[ValidatorFeature]
		public Assignment getConditionNameAssignment_1() { return cConditionNameAssignment_1; }

		//[ValidatorFeature]
		public CrossReference getConditionNameValidatorFeatureCrossReference_1_0() { return cConditionNameValidatorFeatureCrossReference_1_0; }

		//ID
		public RuleCall getConditionNameValidatorFeatureIDTerminalRuleCall_1_0_1() { return cConditionNameValidatorFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class ValidatorRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidatorRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValidatorRulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValidatorRulesValidatorRuleParserRuleCall_0_0 = (RuleCall)cValidatorRulesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValidatorRulesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValidatorRulesValidatorRuleParserRuleCall_1_1_0 = (RuleCall)cValidatorRulesAssignment_1_1.eContents().get(0);
		
		//ValidatorRules:
		//	validatorRules+=ValidatorRule ("and" validatorRules+=ValidatorRule)*;
		@Override public ParserRule getRule() { return rule; }

		//validatorRules+=ValidatorRule ("and" validatorRules+=ValidatorRule)*
		public Group getGroup() { return cGroup; }

		//validatorRules+=ValidatorRule
		public Assignment getValidatorRulesAssignment_0() { return cValidatorRulesAssignment_0; }

		//ValidatorRule
		public RuleCall getValidatorRulesValidatorRuleParserRuleCall_0_0() { return cValidatorRulesValidatorRuleParserRuleCall_0_0; }

		//("and" validatorRules+=ValidatorRule)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//validatorRules+=ValidatorRule
		public Assignment getValidatorRulesAssignment_1_1() { return cValidatorRulesAssignment_1_1; }

		//ValidatorRule
		public RuleCall getValidatorRulesValidatorRuleParserRuleCall_1_1_0() { return cValidatorRulesValidatorRuleParserRuleCall_1_1_0; }
	}

	public class ValidatorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidatorFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValidatorRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValidatorRulesValidatorRulesParserRuleCall_3_0 = (RuleCall)cValidatorRulesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ValidatorFeature:
		//	"condition" name=ID "(" validatorRules=ValidatorRules ")";
		@Override public ParserRule getRule() { return rule; }

		//"condition" name=ID "(" validatorRules=ValidatorRules ")"
		public Group getGroup() { return cGroup; }

		//"condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//validatorRules=ValidatorRules
		public Assignment getValidatorRulesAssignment_3() { return cValidatorRulesAssignment_3; }

		//ValidatorRules
		public RuleCall getValidatorRulesValidatorRulesParserRuleCall_3_0() { return cValidatorRulesValidatorRulesParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ValidatorModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidatorModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValidatorFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValidatorFeaturesValidatorFeatureParserRuleCall_2_0 = (RuleCall)cValidatorFeaturesAssignment_2.eContents().get(0);
		private final Assignment cValidatorFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValidatorFeaturesValidatorFeatureParserRuleCall_3_0 = (RuleCall)cValidatorFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ValidatorModule:
		//	"validator" "{" validatorFeatures+=ValidatorFeature validatorFeatures+=ValidatorFeature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"validator" "{" validatorFeatures+=ValidatorFeature validatorFeatures+=ValidatorFeature* "}"
		public Group getGroup() { return cGroup; }

		//"validator"
		public Keyword getValidatorKeyword_0() { return cValidatorKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//validatorFeatures+=ValidatorFeature
		public Assignment getValidatorFeaturesAssignment_2() { return cValidatorFeaturesAssignment_2; }

		//ValidatorFeature
		public RuleCall getValidatorFeaturesValidatorFeatureParserRuleCall_2_0() { return cValidatorFeaturesValidatorFeatureParserRuleCall_2_0; }

		//validatorFeatures+=ValidatorFeature*
		public Assignment getValidatorFeaturesAssignment_3() { return cValidatorFeaturesAssignment_3; }

		//ValidatorFeature
		public RuleCall getValidatorFeaturesValidatorFeatureParserRuleCall_3_0() { return cValidatorFeaturesValidatorFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ScreenModelParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScreenModelParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelFeatureNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelFeatureNameModelFeatureCrossReference_0_0 = (CrossReference)cModelFeatureNameAssignment_0.eContents().get(0);
		private final RuleCall cModelFeatureNameModelFeatureQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cModelFeatureNameModelFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelFeatureValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelFeatureValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cModelFeatureValueAssignment_2.eContents().get(0);
		
		/// * -> Controller.UIAction * / ScreenModelParameter:
		//	modelFeatureName=[ModelFeature|QualifiedName] ":" modelFeatureValue=STRING;
		@Override public ParserRule getRule() { return rule; }

		//modelFeatureName=[ModelFeature|QualifiedName] ":" modelFeatureValue=STRING
		public Group getGroup() { return cGroup; }

		//modelFeatureName=[ModelFeature|QualifiedName]
		public Assignment getModelFeatureNameAssignment_0() { return cModelFeatureNameAssignment_0; }

		//[ModelFeature|QualifiedName]
		public CrossReference getModelFeatureNameModelFeatureCrossReference_0_0() { return cModelFeatureNameModelFeatureCrossReference_0_0; }

		//QualifiedName
		public RuleCall getModelFeatureNameModelFeatureQualifiedNameParserRuleCall_0_0_1() { return cModelFeatureNameModelFeatureQualifiedNameParserRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//modelFeatureValue=STRING
		public Assignment getModelFeatureValueAssignment_2() { return cModelFeatureValueAssignment_2; }

		//STRING
		public RuleCall getModelFeatureValueSTRINGTerminalRuleCall_2_0() { return cModelFeatureValueSTRINGTerminalRuleCall_2_0; }
	}

	public class ScreenModelParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScreenModelParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersScreenModelParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersScreenModelParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ScreenModelParameters:
		//	parameters+=ScreenModelParameter (", " parameters+=ScreenModelParameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=ScreenModelParameter (", " parameters+=ScreenModelParameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=ScreenModelParameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//ScreenModelParameter
		public RuleCall getParametersScreenModelParameterParserRuleCall_0_0() { return cParametersScreenModelParameterParserRuleCall_0_0; }

		//(", " parameters+=ScreenModelParameter)*
		public Group getGroup_1() { return cGroup_1; }

		//", "
		public Keyword getCommaSpaceKeyword_1_0() { return cCommaSpaceKeyword_1_0; }

		//parameters+=ScreenModelParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//ScreenModelParameter
		public RuleCall getParametersScreenModelParameterParserRuleCall_1_1_0() { return cParametersScreenModelParameterParserRuleCall_1_1_0; }
	}

	public class NavigateToActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigateToAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigatetoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScreenElementIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScreenElementIdScreenFeatureCrossReference_1_0 = (CrossReference)cScreenElementIdAssignment_1.eContents().get(0);
		private final RuleCall cScreenElementIdScreenFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cScreenElementIdScreenFeatureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModelFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModelFeaturesScreenModelParametersParserRuleCall_2_1_0 = (RuleCall)cModelFeaturesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//NavigateToAction:
		//	"navigateto" screenElementId=[ScreenFeature] ("(" modelFeatures=ScreenModelParameters ")")?;
		@Override public ParserRule getRule() { return rule; }

		//"navigateto" screenElementId=[ScreenFeature] ("(" modelFeatures=ScreenModelParameters ")")?
		public Group getGroup() { return cGroup; }

		//"navigateto"
		public Keyword getNavigatetoKeyword_0() { return cNavigatetoKeyword_0; }

		//screenElementId=[ScreenFeature]
		public Assignment getScreenElementIdAssignment_1() { return cScreenElementIdAssignment_1; }

		//[ScreenFeature]
		public CrossReference getScreenElementIdScreenFeatureCrossReference_1_0() { return cScreenElementIdScreenFeatureCrossReference_1_0; }

		//ID
		public RuleCall getScreenElementIdScreenFeatureIDTerminalRuleCall_1_0_1() { return cScreenElementIdScreenFeatureIDTerminalRuleCall_1_0_1; }

		//("(" modelFeatures=ScreenModelParameters ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//modelFeatures=ScreenModelParameters
		public Assignment getModelFeaturesAssignment_2_1() { return cModelFeaturesAssignment_2_1; }

		//ScreenModelParameters
		public RuleCall getModelFeaturesScreenModelParametersParserRuleCall_2_1_0() { return cModelFeaturesScreenModelParametersParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class ExecuteActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExecuteAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUiActionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUiActionNameUIActionModuleCrossReference_1_0 = (CrossReference)cUiActionNameAssignment_1.eContents().get(0);
		private final RuleCall cUiActionNameUIActionModuleIDTerminalRuleCall_1_0_1 = (RuleCall)cUiActionNameUIActionModuleCrossReference_1_0.eContents().get(1);
		
		//ExecuteAction:
		//	"execute" uiActionName=[UIActionModule];
		@Override public ParserRule getRule() { return rule; }

		//"execute" uiActionName=[UIActionModule]
		public Group getGroup() { return cGroup; }

		//"execute"
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }

		//uiActionName=[UIActionModule]
		public Assignment getUiActionNameAssignment_1() { return cUiActionNameAssignment_1; }

		//[UIActionModule]
		public CrossReference getUiActionNameUIActionModuleCrossReference_1_0() { return cUiActionNameUIActionModuleCrossReference_1_0; }

		//ID
		public RuleCall getUiActionNameUIActionModuleIDTerminalRuleCall_1_0_1() { return cUiActionNameUIActionModuleIDTerminalRuleCall_1_0_1; }
	}

	public class SetRestCallReceiverURLParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetRestCallReceiverURLParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterTypeSTRINGTerminalRuleCall_2_0 = (RuleCall)cParameterTypeAssignment_2.eContents().get(0);
		
		//SetRestCallReceiverURLParameter:
		//	"url" ":" parameterType=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"url" ":" parameterType=STRING
		public Group getGroup() { return cGroup; }

		//"url"
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//parameterType=STRING
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//STRING
		public RuleCall getParameterTypeSTRINGTerminalRuleCall_2_0() { return cParameterTypeSTRINGTerminalRuleCall_2_0; }
	}

	public class SetRestCallReceiverReturnTypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetRestCallReceiverReturnTypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParameterTypeTypeCrossReference_2_0 = (CrossReference)cParameterTypeAssignment_2.eContents().get(0);
		private final RuleCall cParameterTypeTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cParameterTypeTypeCrossReference_2_0.eContents().get(1);
		
		//SetRestCallReceiverReturnTypeParameter:
		//	"returnType" ":" parameterType=[Type|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"returnType" ":" parameterType=[Type|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"returnType"
		public Keyword getReturnTypeKeyword_0() { return cReturnTypeKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//parameterType=[Type|QualifiedName]
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//[Type|QualifiedName]
		public CrossReference getParameterTypeTypeCrossReference_2_0() { return cParameterTypeTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getParameterTypeTypeQualifiedNameParserRuleCall_2_0_1() { return cParameterTypeTypeQualifiedNameParserRuleCall_2_0_1; }
	}

	public class SetRestCallReceiverIDParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetRestCallReceiverIDParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cUpdateKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterTypeIDTerminalRuleCall_2_0 = (RuleCall)cParameterTypeAssignment_2.eContents().get(0);
		
		//SetRestCallReceiverIDParameter:
		//	("id" | "update") ":" parameterType=ID;
		@Override public ParserRule getRule() { return rule; }

		//("id" | "update") ":" parameterType=ID
		public Group getGroup() { return cGroup; }

		//"id" | "update"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"id"
		public Keyword getIdKeyword_0_0() { return cIdKeyword_0_0; }

		//"update"
		public Keyword getUpdateKeyword_0_1() { return cUpdateKeyword_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//parameterType=ID
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//ID
		public RuleCall getParameterTypeIDTerminalRuleCall_2_0() { return cParameterTypeIDTerminalRuleCall_2_0; }
	}

	public class SetRestCallReceiverParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetRestCallReceiverParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetRestCallReceiverURLParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetRestCallReceiverReturnTypeParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetRestCallReceiverIDParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SetRestCallReceiverParameter:
		//	SetRestCallReceiverURLParameter | SetRestCallReceiverReturnTypeParameter | SetRestCallReceiverIDParameter;
		@Override public ParserRule getRule() { return rule; }

		//SetRestCallReceiverURLParameter | SetRestCallReceiverReturnTypeParameter | SetRestCallReceiverIDParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetRestCallReceiverURLParameter
		public RuleCall getSetRestCallReceiverURLParameterParserRuleCall_0() { return cSetRestCallReceiverURLParameterParserRuleCall_0; }

		//SetRestCallReceiverReturnTypeParameter
		public RuleCall getSetRestCallReceiverReturnTypeParameterParserRuleCall_1() { return cSetRestCallReceiverReturnTypeParameterParserRuleCall_1; }

		//SetRestCallReceiverIDParameter
		public RuleCall getSetRestCallReceiverIDParameterParserRuleCall_2() { return cSetRestCallReceiverIDParameterParserRuleCall_2; }
	}

	public class SetRestCallReceiverParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetRestCallReceiverParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersSetRestCallReceiverParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersSetRestCallReceiverParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//SetRestCallReceiverParameters:
		//	parameters+=SetRestCallReceiverParameter (", " parameters+=SetRestCallReceiverParameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=SetRestCallReceiverParameter (", " parameters+=SetRestCallReceiverParameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=SetRestCallReceiverParameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//SetRestCallReceiverParameter
		public RuleCall getParametersSetRestCallReceiverParameterParserRuleCall_0_0() { return cParametersSetRestCallReceiverParameterParserRuleCall_0_0; }

		//(", " parameters+=SetRestCallReceiverParameter)*
		public Group getGroup_1() { return cGroup_1; }

		//", "
		public Keyword getCommaSpaceKeyword_1_0() { return cCommaSpaceKeyword_1_0; }

		//parameters+=SetRestCallReceiverParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//SetRestCallReceiverParameter
		public RuleCall getParametersSetRestCallReceiverParameterParserRuleCall_1_1_0() { return cParametersSetRestCallReceiverParameterParserRuleCall_1_1_0; }
	}

	public class SetRestCallReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetRestCallReceiver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestcallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersSetRestCallReceiverParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetRestCallReceiver:
		//	"restcall" "(" parameters+=SetRestCallReceiverParameters ")";
		@Override public ParserRule getRule() { return rule; }

		//"restcall" "(" parameters+=SetRestCallReceiverParameters ")"
		public Group getGroup() { return cGroup; }

		//"restcall"
		public Keyword getRestcallKeyword_0() { return cRestcallKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=SetRestCallReceiverParameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//SetRestCallReceiverParameters
		public RuleCall getParametersSetRestCallReceiverParametersParserRuleCall_2_0() { return cParametersSetRestCallReceiverParametersParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SetUIElementReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetUIElementReceiver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWidgetNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cWidgetNameViewElementCrossReference_0_0 = (CrossReference)cWidgetNameAssignment_0.eContents().get(0);
		private final RuleCall cWidgetNameViewElementIDTerminalRuleCall_0_0_1 = (RuleCall)cWidgetNameViewElementCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUiKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUiKeyUIElementReceiverKeyEnumRuleCall_2_0 = (RuleCall)cUiKeyAssignment_2.eContents().get(0);
		
		//SetUIElementReceiver:
		//	widgetName=[ViewElement] "." uiKey=UIElementReceiverKey;
		@Override public ParserRule getRule() { return rule; }

		//widgetName=[ViewElement] "." uiKey=UIElementReceiverKey
		public Group getGroup() { return cGroup; }

		//widgetName=[ViewElement]
		public Assignment getWidgetNameAssignment_0() { return cWidgetNameAssignment_0; }

		//[ViewElement]
		public CrossReference getWidgetNameViewElementCrossReference_0_0() { return cWidgetNameViewElementCrossReference_0_0; }

		//ID
		public RuleCall getWidgetNameViewElementIDTerminalRuleCall_0_0_1() { return cWidgetNameViewElementIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//uiKey=UIElementReceiverKey
		public Assignment getUiKeyAssignment_2() { return cUiKeyAssignment_2; }

		//UIElementReceiverKey
		public RuleCall getUiKeyUIElementReceiverKeyEnumRuleCall_2_0() { return cUiKeyUIElementReceiverKeyEnumRuleCall_2_0; }
	}

	public class SetActionReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetActionReceiver");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetRestCallReceiverParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetUIElementReceiverParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SetActionReceiver:
		//	SetRestCallReceiver | SetUIElementReceiver;
		@Override public ParserRule getRule() { return rule; }

		//SetRestCallReceiver | SetUIElementReceiver
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetRestCallReceiver
		public RuleCall getSetRestCallReceiverParserRuleCall_0() { return cSetRestCallReceiverParserRuleCall_0; }

		//SetUIElementReceiver
		public RuleCall getSetUIElementReceiverParserRuleCall_1() { return cSetUIElementReceiverParserRuleCall_1; }
	}

	public class SetActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelFeatureNameModelFeatureCrossReference_1_0 = (CrossReference)cModelFeatureNameAssignment_1.eContents().get(0);
		private final RuleCall cModelFeatureNameModelFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cModelFeatureNameModelFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSetActionReceiverAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSetActionReceiverSetActionReceiverParserRuleCall_3_0 = (RuleCall)cSetActionReceiverAssignment_3.eContents().get(0);
		
		//SetAction:
		//	"set" modelFeatureName=[ModelFeature] "to" setActionReceiver=SetActionReceiver;
		@Override public ParserRule getRule() { return rule; }

		//"set" modelFeatureName=[ModelFeature] "to" setActionReceiver=SetActionReceiver
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//modelFeatureName=[ModelFeature]
		public Assignment getModelFeatureNameAssignment_1() { return cModelFeatureNameAssignment_1; }

		//[ModelFeature]
		public CrossReference getModelFeatureNameModelFeatureCrossReference_1_0() { return cModelFeatureNameModelFeatureCrossReference_1_0; }

		//ID
		public RuleCall getModelFeatureNameModelFeatureIDTerminalRuleCall_1_0_1() { return cModelFeatureNameModelFeatureIDTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//setActionReceiver=SetActionReceiver
		public Assignment getSetActionReceiverAssignment_3() { return cSetActionReceiverAssignment_3; }

		//SetActionReceiver
		public RuleCall getSetActionReceiverSetActionReceiverParserRuleCall_3_0() { return cSetActionReceiverSetActionReceiverParserRuleCall_3_0; }
	}

	public class InterfaceMethodCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethodCallParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterNameMethodParameterCrossReference_0_0 = (CrossReference)cParameterNameAssignment_0.eContents().get(0);
		private final RuleCall cParameterNameMethodParameterQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cParameterNameMethodParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cParameterTypeAlternatives_2_0 = (Alternatives)cParameterTypeAssignment_2.eContents().get(0);
		private final RuleCall cParameterTypeIDTerminalRuleCall_2_0_0 = (RuleCall)cParameterTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cParameterTypeSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cParameterTypeAlternatives_2_0.eContents().get(1);
		
		//InterfaceMethodCallParameter:
		//	parameterName=[MethodParameter|QualifiedName] ":" parameterType=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }

		//parameterName=[MethodParameter|QualifiedName] ":" parameterType=(ID | STRING)
		public Group getGroup() { return cGroup; }

		//parameterName=[MethodParameter|QualifiedName]
		public Assignment getParameterNameAssignment_0() { return cParameterNameAssignment_0; }

		//[MethodParameter|QualifiedName]
		public CrossReference getParameterNameMethodParameterCrossReference_0_0() { return cParameterNameMethodParameterCrossReference_0_0; }

		//QualifiedName
		public RuleCall getParameterNameMethodParameterQualifiedNameParserRuleCall_0_0_1() { return cParameterNameMethodParameterQualifiedNameParserRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//parameterType=(ID | STRING)
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//ID | STRING
		public Alternatives getParameterTypeAlternatives_2_0() { return cParameterTypeAlternatives_2_0; }

		//ID
		public RuleCall getParameterTypeIDTerminalRuleCall_2_0_0() { return cParameterTypeIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getParameterTypeSTRINGTerminalRuleCall_2_0_1() { return cParameterTypeSTRINGTerminalRuleCall_2_0_1; }
	}

	public class InterfaceMethodCallParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethodCallParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersInterfaceMethodCallParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaSpaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersInterfaceMethodCallParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//InterfaceMethodCallParameters:
		//	parameters+=InterfaceMethodCallParameter (", " parameters+=InterfaceMethodCallParameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameters+=InterfaceMethodCallParameter (", " parameters+=InterfaceMethodCallParameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=InterfaceMethodCallParameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//InterfaceMethodCallParameter
		public RuleCall getParametersInterfaceMethodCallParameterParserRuleCall_0_0() { return cParametersInterfaceMethodCallParameterParserRuleCall_0_0; }

		//(", " parameters+=InterfaceMethodCallParameter)*
		public Group getGroup_1() { return cGroup_1; }

		//", "
		public Keyword getCommaSpaceKeyword_1_0() { return cCommaSpaceKeyword_1_0; }

		//parameters+=InterfaceMethodCallParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//InterfaceMethodCallParameter
		public RuleCall getParametersInterfaceMethodCallParameterParserRuleCall_1_1_0() { return cParametersInterfaceMethodCallParameterParserRuleCall_1_1_0; }
	}

	public class InterfaceMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfaceInstanceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInterfaceInstanceNameBusinessFeatureCrossReference_0_0 = (CrossReference)cInterfaceInstanceNameAssignment_0.eContents().get(0);
		private final RuleCall cInterfaceInstanceNameBusinessFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cInterfaceInstanceNameBusinessFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMethodNameMethodCallCrossReference_2_0 = (CrossReference)cMethodNameAssignment_2.eContents().get(0);
		private final RuleCall cMethodNameMethodCallQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cMethodNameMethodCallCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersInterfaceMethodCallParametersParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InterfaceMethodCall:
		//	interfaceInstanceName=[BusinessFeature] "." methodName=[MethodCall|QualifiedName] "("
		//	parameters+=InterfaceMethodCallParameters ")";
		@Override public ParserRule getRule() { return rule; }

		//interfaceInstanceName=[BusinessFeature] "." methodName=[MethodCall|QualifiedName] "("
		//parameters+=InterfaceMethodCallParameters ")"
		public Group getGroup() { return cGroup; }

		//interfaceInstanceName=[BusinessFeature]
		public Assignment getInterfaceInstanceNameAssignment_0() { return cInterfaceInstanceNameAssignment_0; }

		//[BusinessFeature]
		public CrossReference getInterfaceInstanceNameBusinessFeatureCrossReference_0_0() { return cInterfaceInstanceNameBusinessFeatureCrossReference_0_0; }

		//ID
		public RuleCall getInterfaceInstanceNameBusinessFeatureIDTerminalRuleCall_0_0_1() { return cInterfaceInstanceNameBusinessFeatureIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//methodName=[MethodCall|QualifiedName]
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }

		//[MethodCall|QualifiedName]
		public CrossReference getMethodNameMethodCallCrossReference_2_0() { return cMethodNameMethodCallCrossReference_2_0; }

		//QualifiedName
		public RuleCall getMethodNameMethodCallQualifiedNameParserRuleCall_2_0_1() { return cMethodNameMethodCallQualifiedNameParserRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameters+=InterfaceMethodCallParameters
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//InterfaceMethodCallParameters
		public RuleCall getParametersInterfaceMethodCallParametersParserRuleCall_4_0() { return cParametersInterfaceMethodCallParametersParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class UIActionFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIActionFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNavigateToActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExecuteActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterfaceMethodCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//UIActionFeature:
		//	NavigateToAction | ExecuteAction | SetAction | InterfaceMethodCall;
		@Override public ParserRule getRule() { return rule; }

		//NavigateToAction | ExecuteAction | SetAction | InterfaceMethodCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//NavigateToAction
		public RuleCall getNavigateToActionParserRuleCall_0() { return cNavigateToActionParserRuleCall_0; }

		//ExecuteAction
		public RuleCall getExecuteActionParserRuleCall_1() { return cExecuteActionParserRuleCall_1; }

		//SetAction
		public RuleCall getSetActionParserRuleCall_2() { return cSetActionParserRuleCall_2; }

		//InterfaceMethodCall
		public RuleCall getInterfaceMethodCallParserRuleCall_3() { return cInterfaceMethodCallParserRuleCall_3; }
	}

	public class UIActionModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIActionModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUiactionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUiActionFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUiActionFeaturesUIActionFeatureParserRuleCall_3_0 = (RuleCall)cUiActionFeaturesAssignment_3.eContents().get(0);
		private final Assignment cUiActionFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUiActionFeaturesUIActionFeatureParserRuleCall_4_0 = (RuleCall)cUiActionFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UIActionModule:
		//	"uiaction" name=ID "{" uiActionFeatures+=UIActionFeature uiActionFeatures+=UIActionFeature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"uiaction" name=ID "{" uiActionFeatures+=UIActionFeature uiActionFeatures+=UIActionFeature* "}"
		public Group getGroup() { return cGroup; }

		//"uiaction"
		public Keyword getUiactionKeyword_0() { return cUiactionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//uiActionFeatures+=UIActionFeature
		public Assignment getUiActionFeaturesAssignment_3() { return cUiActionFeaturesAssignment_3; }

		//UIActionFeature
		public RuleCall getUiActionFeaturesUIActionFeatureParserRuleCall_3_0() { return cUiActionFeaturesUIActionFeatureParserRuleCall_3_0; }

		//uiActionFeatures+=UIActionFeature*
		public Assignment getUiActionFeaturesAssignment_4() { return cUiActionFeaturesAssignment_4; }

		//UIActionFeature
		public RuleCall getUiActionFeaturesUIActionFeatureParserRuleCall_4_0() { return cUiActionFeaturesUIActionFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ControllerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControllerElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUIActionModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitActionModuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValidatorModuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ControllerElement:
		//	UIActionModule | InitActionModule | ValidatorModule;
		@Override public ParserRule getRule() { return rule; }

		//UIActionModule | InitActionModule | ValidatorModule
		public Alternatives getAlternatives() { return cAlternatives; }

		//UIActionModule
		public RuleCall getUIActionModuleParserRuleCall_0() { return cUIActionModuleParserRuleCall_0; }

		//InitActionModule
		public RuleCall getInitActionModuleParserRuleCall_1() { return cInitActionModuleParserRuleCall_1; }

		//ValidatorModule
		public RuleCall getValidatorModuleParserRuleCall_2() { return cValidatorModuleParserRuleCall_2; }
	}

	public class ControllerModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControllerModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsControllerElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsControllerElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ControllerModule:
		//	"controller" "{" elements+=ControllerElement elements+=ControllerElement* "}";
		@Override public ParserRule getRule() { return rule; }

		//"controller" "{" elements+=ControllerElement elements+=ControllerElement* "}"
		public Group getGroup() { return cGroup; }

		//"controller"
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=ControllerElement
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ControllerElement
		public RuleCall getElementsControllerElementParserRuleCall_2_0() { return cElementsControllerElementParserRuleCall_2_0; }

		//elements+=ControllerElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ControllerElement
		public RuleCall getElementsControllerElementParserRuleCall_3_0() { return cElementsControllerElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ScreenModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScreenModule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryParametersModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelModuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cViewModuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cControllerModuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ScreenModule:
		//	EntryParametersModule | ModelModule | ViewModule | ControllerModule;
		@Override public ParserRule getRule() { return rule; }

		//EntryParametersModule | ModelModule | ViewModule | ControllerModule
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryParametersModule
		public RuleCall getEntryParametersModuleParserRuleCall_0() { return cEntryParametersModuleParserRuleCall_0; }

		//ModelModule
		public RuleCall getModelModuleParserRuleCall_1() { return cModelModuleParserRuleCall_1; }

		//ViewModule
		public RuleCall getViewModuleParserRuleCall_2() { return cViewModuleParserRuleCall_2; }

		//ControllerModule
		public RuleCall getControllerModuleParserRuleCall_3() { return cControllerModuleParserRuleCall_3; }
	}

	public class ScreenFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScreenFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScreenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScreenModulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScreenModulesScreenModuleParserRuleCall_3_0 = (RuleCall)cScreenModulesAssignment_3.eContents().get(0);
		private final Assignment cScreenModulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScreenModulesScreenModuleParserRuleCall_4_0 = (RuleCall)cScreenModulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ScreenFeature:
		//	"screen" name=ID "{" screenModules+=ScreenModule screenModules+=ScreenModule* "}";
		@Override public ParserRule getRule() { return rule; }

		//"screen" name=ID "{" screenModules+=ScreenModule screenModules+=ScreenModule* "}"
		public Group getGroup() { return cGroup; }

		//"screen"
		public Keyword getScreenKeyword_0() { return cScreenKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//screenModules+=ScreenModule
		public Assignment getScreenModulesAssignment_3() { return cScreenModulesAssignment_3; }

		//ScreenModule
		public RuleCall getScreenModulesScreenModuleParserRuleCall_3_0() { return cScreenModulesScreenModuleParserRuleCall_3_0; }

		//screenModules+=ScreenModule*
		public Assignment getScreenModulesAssignment_4() { return cScreenModulesAssignment_4; }

		//ScreenModule
		public RuleCall getScreenModulesScreenModuleParserRuleCall_4_0() { return cScreenModulesScreenModuleParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MainFeatureOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainFeatureOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAppNameKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAppVersionKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cEntryScreenKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cDevicesKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cStyleKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//MainFeatureOption:
		//	("appName" | "appVersion" | "entryScreen" | "devices" | "style") ":" name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//("appName" | "appVersion" | "entryScreen" | "devices" | "style") ":" name=STRING
		public Group getGroup() { return cGroup; }

		//"appName" | "appVersion" | "entryScreen" | "devices" | "style"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"appName"
		public Keyword getAppNameKeyword_0_0() { return cAppNameKeyword_0_0; }

		//"appVersion"
		public Keyword getAppVersionKeyword_0_1() { return cAppVersionKeyword_0_1; }

		//"entryScreen"
		public Keyword getEntryScreenKeyword_0_2() { return cEntryScreenKeyword_0_2; }

		//"devices"
		public Keyword getDevicesKeyword_0_3() { return cDevicesKeyword_0_3; }

		//"style"
		public Keyword getStyleKeyword_0_4() { return cStyleKeyword_0_4; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class MainFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesMainFeatureOptionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaSpaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeaturesMainFeatureOptionParserRuleCall_3_1_0 = (RuleCall)cFeaturesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MainFeature:
		//	"main" "(" features+=MainFeatureOption (", " features+=MainFeatureOption)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"main" "(" features+=MainFeatureOption (", " features+=MainFeatureOption)* ")"
		public Group getGroup() { return cGroup; }

		//"main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//features+=MainFeatureOption
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//MainFeatureOption
		public RuleCall getFeaturesMainFeatureOptionParserRuleCall_2_0() { return cFeaturesMainFeatureOptionParserRuleCall_2_0; }

		//(", " features+=MainFeatureOption)*
		public Group getGroup_3() { return cGroup_3; }

		//", "
		public Keyword getCommaSpaceKeyword_3_0() { return cCommaSpaceKeyword_3_0; }

		//features+=MainFeatureOption
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }

		//MainFeatureOption
		public RuleCall getFeaturesMainFeatureOptionParserRuleCall_3_1_0() { return cFeaturesMainFeatureOptionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UIFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMainFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScreenFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UIFeature:
		//	MainFeature | ScreenFeature;
		@Override public ParserRule getRule() { return rule; }

		//MainFeature | ScreenFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//MainFeature
		public RuleCall getMainFeatureParserRuleCall_0() { return cMainFeatureParserRuleCall_0; }

		//ScreenFeature
		public RuleCall getScreenFeatureParserRuleCall_1() { return cScreenFeatureParserRuleCall_1; }
	}

	public class UIModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUiSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUiFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUiFeaturesUIFeatureParserRuleCall_2_0 = (RuleCall)cUiFeaturesAssignment_2.eContents().get(0);
		private final Assignment cUiFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUiFeaturesUIFeatureParserRuleCall_3_0 = (RuleCall)cUiFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UIModule:
		//	"uiSystem" "{" uiFeatures+=UIFeature uiFeatures+=UIFeature* "}";
		@Override public ParserRule getRule() { return rule; }

		//"uiSystem" "{" uiFeatures+=UIFeature uiFeatures+=UIFeature* "}"
		public Group getGroup() { return cGroup; }

		//"uiSystem"
		public Keyword getUiSystemKeyword_0() { return cUiSystemKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//uiFeatures+=UIFeature
		public Assignment getUiFeaturesAssignment_2() { return cUiFeaturesAssignment_2; }

		//UIFeature
		public RuleCall getUiFeaturesUIFeatureParserRuleCall_2_0() { return cUiFeaturesUIFeatureParserRuleCall_2_0; }

		//uiFeatures+=UIFeature*
		public Assignment getUiFeaturesAssignment_3() { return cUiFeaturesAssignment_3; }

		//UIFeature
		public RuleCall getUiFeaturesUIFeatureParserRuleCall_3_0() { return cUiFeaturesUIFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BusinessFeatureTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BusinessFeatureType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainRepositoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatelessComponentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BusinessFeatureType:
		//	InterfaceDeclaration | DomainRepository | StatelessComponent;
		@Override public ParserRule getRule() { return rule; }

		//InterfaceDeclaration | DomainRepository | StatelessComponent
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationParserRuleCall_0() { return cInterfaceDeclarationParserRuleCall_0; }

		//DomainRepository
		public RuleCall getDomainRepositoryParserRuleCall_1() { return cDomainRepositoryParserRuleCall_1; }

		//StatelessComponent
		public RuleCall getStatelessComponentParserRuleCall_2() { return cStatelessComponentParserRuleCall_2; }
	}

	public class BusinessFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BusinessFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeBusinessFeatureTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeBusinessFeatureTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeBusinessFeatureTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConnectPoint1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConnectPoint1IDTerminalRuleCall_4_1_0 = (RuleCall)cConnectPoint1Assignment_4_1.eContents().get(0);
		private final Keyword cToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cConnectPoint2Assignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cConnectPoint2BusinessFeatureCrossReference_4_3_0 = (CrossReference)cConnectPoint2Assignment_4_3.eContents().get(0);
		private final RuleCall cConnectPoint2BusinessFeatureIDTerminalRuleCall_4_3_0_1 = (RuleCall)cConnectPoint2BusinessFeatureCrossReference_4_3_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cConnectEndAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cConnectEndIDTerminalRuleCall_4_5_0 = (RuleCall)cConnectEndAssignment_4_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		
		//BusinessFeature:
		//	"instance" name=ID ":" type=[BusinessFeatureType|QualifiedName] ("{" connectPoint1=ID "to"
		//	connectPoint2=[BusinessFeature] "=>" connectEnd=ID "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"instance" name=ID ":" type=[BusinessFeatureType|QualifiedName] ("{" connectPoint1=ID "to"
		//connectPoint2=[BusinessFeature] "=>" connectEnd=ID "}")?
		public Group getGroup() { return cGroup; }

		//"instance"
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[BusinessFeatureType|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[BusinessFeatureType|QualifiedName]
		public CrossReference getTypeBusinessFeatureTypeCrossReference_3_0() { return cTypeBusinessFeatureTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeBusinessFeatureTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeBusinessFeatureTypeQualifiedNameParserRuleCall_3_0_1; }

		//("{" connectPoint1=ID "to" connectPoint2=[BusinessFeature] "=>" connectEnd=ID "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//connectPoint1=ID
		public Assignment getConnectPoint1Assignment_4_1() { return cConnectPoint1Assignment_4_1; }

		//ID
		public RuleCall getConnectPoint1IDTerminalRuleCall_4_1_0() { return cConnectPoint1IDTerminalRuleCall_4_1_0; }

		//"to"
		public Keyword getToKeyword_4_2() { return cToKeyword_4_2; }

		//connectPoint2=[BusinessFeature]
		public Assignment getConnectPoint2Assignment_4_3() { return cConnectPoint2Assignment_4_3; }

		//[BusinessFeature]
		public CrossReference getConnectPoint2BusinessFeatureCrossReference_4_3_0() { return cConnectPoint2BusinessFeatureCrossReference_4_3_0; }

		//ID
		public RuleCall getConnectPoint2BusinessFeatureIDTerminalRuleCall_4_3_0_1() { return cConnectPoint2BusinessFeatureIDTerminalRuleCall_4_3_0_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4_4() { return cEqualsSignGreaterThanSignKeyword_4_4; }

		//connectEnd=ID
		public Assignment getConnectEndAssignment_4_5() { return cConnectEndAssignment_4_5; }

		//ID
		public RuleCall getConnectEndIDTerminalRuleCall_4_5_0() { return cConnectEndIDTerminalRuleCall_4_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_6() { return cRightCurlyBracketKeyword_4_6; }
	}

	public class BusinessFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BusinessFeatures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeaturesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFeaturesBusinessFeatureParserRuleCall_0_0 = (RuleCall)cFeaturesAssignment_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesBusinessFeatureParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		
		//BusinessFeatures:
		//	features+=BusinessFeature features+=BusinessFeature*;
		@Override public ParserRule getRule() { return rule; }

		//features+=BusinessFeature features+=BusinessFeature*
		public Group getGroup() { return cGroup; }

		//features+=BusinessFeature
		public Assignment getFeaturesAssignment_0() { return cFeaturesAssignment_0; }

		//BusinessFeature
		public RuleCall getFeaturesBusinessFeatureParserRuleCall_0_0() { return cFeaturesBusinessFeatureParserRuleCall_0_0; }

		//features+=BusinessFeature*
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }

		//BusinessFeature
		public RuleCall getFeaturesBusinessFeatureParserRuleCall_1_0() { return cFeaturesBusinessFeatureParserRuleCall_1_0; }
	}

	public class BusinessModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BusinessModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBusinessSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBusinessFeaturesParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BusinessModule:
		//	"businessSystem" "{" BusinessFeatures "}";
		@Override public ParserRule getRule() { return rule; }

		//"businessSystem" "{" BusinessFeatures "}"
		public Group getGroup() { return cGroup; }

		//"businessSystem"
		public Keyword getBusinessSystemKeyword_0() { return cBusinessSystemKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//BusinessFeatures
		public RuleCall getBusinessFeaturesParserRuleCall_2() { return cBusinessFeaturesParserRuleCall_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SystemModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemModule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBusinessModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUIModuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemModule:
		//	BusinessModule | UIModule;
		@Override public ParserRule getRule() { return rule; }

		//BusinessModule | UIModule
		public Alternatives getAlternatives() { return cAlternatives; }

		//BusinessModule
		public RuleCall getBusinessModuleParserRuleCall_0() { return cBusinessModuleParserRuleCall_0; }

		//UIModule
		public RuleCall getUIModuleParserRuleCall_1() { return cUIModuleParserRuleCall_1; }
	}

	public class SystemDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModulesSystemModuleParserRuleCall_3_0 = (RuleCall)cModulesAssignment_3.eContents().get(0);
		private final Assignment cModulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModulesSystemModuleParserRuleCall_4_0 = (RuleCall)cModulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SystemDefinition:
		//	"system" name=ID "{" modules+=SystemModule modules+=SystemModule* "}";
		@Override public ParserRule getRule() { return rule; }

		//"system" name=ID "{" modules+=SystemModule modules+=SystemModule* "}"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//modules+=SystemModule
		public Assignment getModulesAssignment_3() { return cModulesAssignment_3; }

		//SystemModule
		public RuleCall getModulesSystemModuleParserRuleCall_3_0() { return cModulesSystemModuleParserRuleCall_3_0; }

		//modules+=SystemModule*
		public Assignment getModulesAssignment_4() { return cModulesAssignment_4; }

		//SystemModule
		public RuleCall getModulesSystemModuleParserRuleCall_4_0() { return cModulesSystemModuleParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	public class ContentElementLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ContentElementLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTEXTTextKeyword_0_0 = (Keyword)cTEXTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBUTTONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBUTTONButtonKeyword_1_0 = (Keyword)cBUTTONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLABELEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLABELLabelKeyword_2_0 = (Keyword)cLABELEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLISTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLISTListKeyword_3_0 = (Keyword)cLISTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIMAGEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIMAGEImageKeyword_4_0 = (Keyword)cIMAGEEnumLiteralDeclaration_4.eContents().get(0);
		
		/// * -> View * / enum ContentElementLiteral:
		//	TEXT="text" | BUTTON="button" | LABEL="label" | LIST="list" | IMAGE="image";
		public EnumRule getRule() { return rule; }

		//TEXT="text" | BUTTON="button" | LABEL="label" | LIST="list" | IMAGE="image"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TEXT="text"
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_0() { return cTEXTEnumLiteralDeclaration_0; }

		//"text"
		public Keyword getTEXTTextKeyword_0_0() { return cTEXTTextKeyword_0_0; }

		//BUTTON="button"
		public EnumLiteralDeclaration getBUTTONEnumLiteralDeclaration_1() { return cBUTTONEnumLiteralDeclaration_1; }

		//"button"
		public Keyword getBUTTONButtonKeyword_1_0() { return cBUTTONButtonKeyword_1_0; }

		//LABEL="label"
		public EnumLiteralDeclaration getLABELEnumLiteralDeclaration_2() { return cLABELEnumLiteralDeclaration_2; }

		//"label"
		public Keyword getLABELLabelKeyword_2_0() { return cLABELLabelKeyword_2_0; }

		//LIST="list"
		public EnumLiteralDeclaration getLISTEnumLiteralDeclaration_3() { return cLISTEnumLiteralDeclaration_3; }

		//"list"
		public Keyword getLISTListKeyword_3_0() { return cLISTListKeyword_3_0; }

		//IMAGE="image"
		public EnumLiteralDeclaration getIMAGEEnumLiteralDeclaration_4() { return cIMAGEEnumLiteralDeclaration_4; }

		//"image"
		public Keyword getIMAGEImageKeyword_4_0() { return cIMAGEImageKeyword_4_0; }
	}

	public class PropertyNameLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyNameLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLABEL_PROVIDEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLABEL_PROVIDERLabelProviderKeyword_0_0 = (Keyword)cLABEL_PROVIDEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCSS_ITEMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCSS_ITEMCssItemKeyword_1_0 = (Keyword)cCSS_ITEMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTOOLTIPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTOOLTIPTooltipKeyword_2_0 = (Keyword)cTOOLTIPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRESOURCE_KEYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRESOURCE_KEYResourceKeyKeyword_3_0 = (Keyword)cRESOURCE_KEYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTYLEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTYLEStyleKeyword_4_0 = (Keyword)cSTYLEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPATHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPATHPathKeyword_5_0 = (Keyword)cPATHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTYPEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTYPETypeKeyword_6_0 = (Keyword)cTYPEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCOLUMNSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCOLUMNSColumnsKeyword_7_0 = (Keyword)cCOLUMNSEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum PropertyNameLiteral:
		//	LABEL_PROVIDER="labelProvider" | CSS_ITEM="cssItem" | TOOLTIP="tooltip" | RESOURCE_KEY="resourceKey" | STYLE="style"
		//	| PATH="path" | TYPE="type" | COLUMNS="columns";
		public EnumRule getRule() { return rule; }

		//LABEL_PROVIDER="labelProvider" | CSS_ITEM="cssItem" | TOOLTIP="tooltip" | RESOURCE_KEY="resourceKey" | STYLE="style" |
		//PATH="path" | TYPE="type" | COLUMNS="columns"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LABEL_PROVIDER="labelProvider"
		public EnumLiteralDeclaration getLABEL_PROVIDEREnumLiteralDeclaration_0() { return cLABEL_PROVIDEREnumLiteralDeclaration_0; }

		//"labelProvider"
		public Keyword getLABEL_PROVIDERLabelProviderKeyword_0_0() { return cLABEL_PROVIDERLabelProviderKeyword_0_0; }

		//CSS_ITEM="cssItem"
		public EnumLiteralDeclaration getCSS_ITEMEnumLiteralDeclaration_1() { return cCSS_ITEMEnumLiteralDeclaration_1; }

		//"cssItem"
		public Keyword getCSS_ITEMCssItemKeyword_1_0() { return cCSS_ITEMCssItemKeyword_1_0; }

		//TOOLTIP="tooltip"
		public EnumLiteralDeclaration getTOOLTIPEnumLiteralDeclaration_2() { return cTOOLTIPEnumLiteralDeclaration_2; }

		//"tooltip"
		public Keyword getTOOLTIPTooltipKeyword_2_0() { return cTOOLTIPTooltipKeyword_2_0; }

		//RESOURCE_KEY="resourceKey"
		public EnumLiteralDeclaration getRESOURCE_KEYEnumLiteralDeclaration_3() { return cRESOURCE_KEYEnumLiteralDeclaration_3; }

		//"resourceKey"
		public Keyword getRESOURCE_KEYResourceKeyKeyword_3_0() { return cRESOURCE_KEYResourceKeyKeyword_3_0; }

		//STYLE="style"
		public EnumLiteralDeclaration getSTYLEEnumLiteralDeclaration_4() { return cSTYLEEnumLiteralDeclaration_4; }

		//"style"
		public Keyword getSTYLEStyleKeyword_4_0() { return cSTYLEStyleKeyword_4_0; }

		//PATH="path"
		public EnumLiteralDeclaration getPATHEnumLiteralDeclaration_5() { return cPATHEnumLiteralDeclaration_5; }

		//"path"
		public Keyword getPATHPathKeyword_5_0() { return cPATHPathKeyword_5_0; }

		//TYPE="type"
		public EnumLiteralDeclaration getTYPEEnumLiteralDeclaration_6() { return cTYPEEnumLiteralDeclaration_6; }

		//"type"
		public Keyword getTYPETypeKeyword_6_0() { return cTYPETypeKeyword_6_0; }

		//COLUMNS="columns"
		public EnumLiteralDeclaration getCOLUMNSEnumLiteralDeclaration_7() { return cCOLUMNSEnumLiteralDeclaration_7; }

		//"columns"
		public Keyword getCOLUMNSColumnsKeyword_7_0() { return cCOLUMNSColumnsKeyword_7_0; }
	}

	public class ContainerElementLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerElementLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLAYOUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLAYOUTLayoutKeyword_0_0 = (Keyword)cLAYOUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSCREENEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSCREENScreenKeyword_1_0 = (Keyword)cSCREENEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ContainerElementLiteral:
		//	LAYOUT="layout" | SCREEN="screen";
		public EnumRule getRule() { return rule; }

		//LAYOUT="layout" | SCREEN="screen"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LAYOUT="layout"
		public EnumLiteralDeclaration getLAYOUTEnumLiteralDeclaration_0() { return cLAYOUTEnumLiteralDeclaration_0; }

		//"layout"
		public Keyword getLAYOUTLayoutKeyword_0_0() { return cLAYOUTLayoutKeyword_0_0; }

		//SCREEN="screen"
		public EnumLiteralDeclaration getSCREENEnumLiteralDeclaration_1() { return cSCREENEnumLiteralDeclaration_1; }

		//"screen"
		public Keyword getSCREENScreenKeyword_1_0() { return cSCREENScreenKeyword_1_0; }
	}

	public class UIElementReceiverKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UIElementReceiverKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSELECTIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSELECTIONSelectionKeyword_0_0 = (Keyword)cSELECTIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVALUES_EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVALUES_ValuesKeyword_1_0 = (Keyword)cVALUES_EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cON_SELECTIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cON_SELECTIONOnSelectionKeyword_2_0 = (Keyword)cON_SELECTIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTTextKeyword_3_0 = (Keyword)cTEXTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UIElementReceiverKey:
		//	SELECTION="selection" | VALUES_="values" | ON_SELECTION="onSelection" | TEXT="text";
		public EnumRule getRule() { return rule; }

		//SELECTION="selection" | VALUES_="values" | ON_SELECTION="onSelection" | TEXT="text"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SELECTION="selection"
		public EnumLiteralDeclaration getSELECTIONEnumLiteralDeclaration_0() { return cSELECTIONEnumLiteralDeclaration_0; }

		//"selection"
		public Keyword getSELECTIONSelectionKeyword_0_0() { return cSELECTIONSelectionKeyword_0_0; }

		//VALUES_="values"
		public EnumLiteralDeclaration getVALUES_EnumLiteralDeclaration_1() { return cVALUES_EnumLiteralDeclaration_1; }

		//"values"
		public Keyword getVALUES_ValuesKeyword_1_0() { return cVALUES_ValuesKeyword_1_0; }

		//ON_SELECTION="onSelection"
		public EnumLiteralDeclaration getON_SELECTIONEnumLiteralDeclaration_2() { return cON_SELECTIONEnumLiteralDeclaration_2; }

		//"onSelection"
		public Keyword getON_SELECTIONOnSelectionKeyword_2_0() { return cON_SELECTIONOnSelectionKeyword_2_0; }

		//TEXT="text"
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_3() { return cTEXTEnumLiteralDeclaration_3; }

		//"text"
		public Keyword getTEXTTextKeyword_3_0() { return cTEXTTextKeyword_3_0; }
	}
	
	private final DomainmodelElements pDomainmodel;
	private final AbstractElementElements pAbstractElement;
	private final TypeElements pType;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final DataTypeElements pDataType;
	private final NamespaceDeclarationElements pNamespaceDeclaration;
	private final AbstractNamespaceElementElements pAbstractNamespaceElement;
	private final FeatureMappingOptionsElements pFeatureMappingOptions;
	private final FeatureElements pFeature;
	private final DomainEntityElements pDomainEntity;
	private final RestMethodCallElements pRestMethodCall;
	private final RestOperationElements pRestOperation;
	private final MethodParameterElements pMethodParameter;
	private final MethodParametersElements pMethodParameters;
	private final MethodCallElements pMethodCall;
	private final InterfaceOperationElements pInterfaceOperation;
	private final InterfaceDeclarationElements pInterfaceDeclaration;
	private final InterfaceOperationUsageRuleElements pInterfaceOperationUsageRule;
	private final InterfaceOperationsUsageRuleElements pInterfaceOperationsUsageRule;
	private final StatelessComponentElements pStatelessComponent;
	private final DomainRepositoryElements pDomainRepository;
	private final EntryParametersModuleElements pEntryParametersModule;
	private final ModelFeatureElements pModelFeature;
	private final ModelModuleElements pModelModule;
	private final ContentElementLiteralElements unknownRuleContentElementLiteral;
	private final PropertyNameLiteralElements unknownRulePropertyNameLiteral;
	private final ElementFeatureElements pElementFeature;
	private final ContentElementElements pContentElement;
	private final ContainerElementLiteralElements unknownRuleContainerElementLiteral;
	private final ContainerElementElements pContainerElement;
	private final ViewElementElements pViewElement;
	private final ViewModuleElements pViewModule;
	private final ValidateActionElements pValidateAction;
	private final AttachActionElements pAttachAction;
	private final BindEnumSourceElements pBindEnumSource;
	private final BindSourceElements pBindSource;
	private final BindActionElements pBindAction;
	private final InitActionFeatureElements pInitActionFeature;
	private final InitActionModuleElements pInitActionModule;
	private final ValidatorRuleElements pValidatorRule;
	private final ValidatorRulesElements pValidatorRules;
	private final ValidatorFeatureElements pValidatorFeature;
	private final ValidatorModuleElements pValidatorModule;
	private final ScreenModelParameterElements pScreenModelParameter;
	private final ScreenModelParametersElements pScreenModelParameters;
	private final NavigateToActionElements pNavigateToAction;
	private final ExecuteActionElements pExecuteAction;
	private final SetRestCallReceiverURLParameterElements pSetRestCallReceiverURLParameter;
	private final SetRestCallReceiverReturnTypeParameterElements pSetRestCallReceiverReturnTypeParameter;
	private final SetRestCallReceiverIDParameterElements pSetRestCallReceiverIDParameter;
	private final SetRestCallReceiverParameterElements pSetRestCallReceiverParameter;
	private final SetRestCallReceiverParametersElements pSetRestCallReceiverParameters;
	private final SetRestCallReceiverElements pSetRestCallReceiver;
	private final UIElementReceiverKeyElements unknownRuleUIElementReceiverKey;
	private final SetUIElementReceiverElements pSetUIElementReceiver;
	private final SetActionReceiverElements pSetActionReceiver;
	private final SetActionElements pSetAction;
	private final InterfaceMethodCallParameterElements pInterfaceMethodCallParameter;
	private final InterfaceMethodCallParametersElements pInterfaceMethodCallParameters;
	private final InterfaceMethodCallElements pInterfaceMethodCall;
	private final UIActionFeatureElements pUIActionFeature;
	private final UIActionModuleElements pUIActionModule;
	private final ControllerElementElements pControllerElement;
	private final ControllerModuleElements pControllerModule;
	private final ScreenModuleElements pScreenModule;
	private final ScreenFeatureElements pScreenFeature;
	private final MainFeatureOptionElements pMainFeatureOption;
	private final MainFeatureElements pMainFeature;
	private final UIFeatureElements pUIFeature;
	private final UIModuleElements pUIModule;
	private final BusinessFeatureTypeElements pBusinessFeatureType;
	private final BusinessFeatureElements pBusinessFeature;
	private final BusinessFeaturesElements pBusinessFeatures;
	private final BusinessModuleElements pBusinessModule;
	private final SystemModuleElements pSystemModule;
	private final SystemDefinitionElements pSystemDefinition;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DomainmodelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pType = new TypeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pDataType = new DataTypeElements();
		this.pNamespaceDeclaration = new NamespaceDeclarationElements();
		this.pAbstractNamespaceElement = new AbstractNamespaceElementElements();
		this.pFeatureMappingOptions = new FeatureMappingOptionsElements();
		this.pFeature = new FeatureElements();
		this.pDomainEntity = new DomainEntityElements();
		this.pRestMethodCall = new RestMethodCallElements();
		this.pRestOperation = new RestOperationElements();
		this.pMethodParameter = new MethodParameterElements();
		this.pMethodParameters = new MethodParametersElements();
		this.pMethodCall = new MethodCallElements();
		this.pInterfaceOperation = new InterfaceOperationElements();
		this.pInterfaceDeclaration = new InterfaceDeclarationElements();
		this.pInterfaceOperationUsageRule = new InterfaceOperationUsageRuleElements();
		this.pInterfaceOperationsUsageRule = new InterfaceOperationsUsageRuleElements();
		this.pStatelessComponent = new StatelessComponentElements();
		this.pDomainRepository = new DomainRepositoryElements();
		this.pEntryParametersModule = new EntryParametersModuleElements();
		this.pModelFeature = new ModelFeatureElements();
		this.pModelModule = new ModelModuleElements();
		this.unknownRuleContentElementLiteral = new ContentElementLiteralElements();
		this.unknownRulePropertyNameLiteral = new PropertyNameLiteralElements();
		this.pElementFeature = new ElementFeatureElements();
		this.pContentElement = new ContentElementElements();
		this.unknownRuleContainerElementLiteral = new ContainerElementLiteralElements();
		this.pContainerElement = new ContainerElementElements();
		this.pViewElement = new ViewElementElements();
		this.pViewModule = new ViewModuleElements();
		this.pValidateAction = new ValidateActionElements();
		this.pAttachAction = new AttachActionElements();
		this.pBindEnumSource = new BindEnumSourceElements();
		this.pBindSource = new BindSourceElements();
		this.pBindAction = new BindActionElements();
		this.pInitActionFeature = new InitActionFeatureElements();
		this.pInitActionModule = new InitActionModuleElements();
		this.pValidatorRule = new ValidatorRuleElements();
		this.pValidatorRules = new ValidatorRulesElements();
		this.pValidatorFeature = new ValidatorFeatureElements();
		this.pValidatorModule = new ValidatorModuleElements();
		this.pScreenModelParameter = new ScreenModelParameterElements();
		this.pScreenModelParameters = new ScreenModelParametersElements();
		this.pNavigateToAction = new NavigateToActionElements();
		this.pExecuteAction = new ExecuteActionElements();
		this.pSetRestCallReceiverURLParameter = new SetRestCallReceiverURLParameterElements();
		this.pSetRestCallReceiverReturnTypeParameter = new SetRestCallReceiverReturnTypeParameterElements();
		this.pSetRestCallReceiverIDParameter = new SetRestCallReceiverIDParameterElements();
		this.pSetRestCallReceiverParameter = new SetRestCallReceiverParameterElements();
		this.pSetRestCallReceiverParameters = new SetRestCallReceiverParametersElements();
		this.pSetRestCallReceiver = new SetRestCallReceiverElements();
		this.unknownRuleUIElementReceiverKey = new UIElementReceiverKeyElements();
		this.pSetUIElementReceiver = new SetUIElementReceiverElements();
		this.pSetActionReceiver = new SetActionReceiverElements();
		this.pSetAction = new SetActionElements();
		this.pInterfaceMethodCallParameter = new InterfaceMethodCallParameterElements();
		this.pInterfaceMethodCallParameters = new InterfaceMethodCallParametersElements();
		this.pInterfaceMethodCall = new InterfaceMethodCallElements();
		this.pUIActionFeature = new UIActionFeatureElements();
		this.pUIActionModule = new UIActionModuleElements();
		this.pControllerElement = new ControllerElementElements();
		this.pControllerModule = new ControllerModuleElements();
		this.pScreenModule = new ScreenModuleElements();
		this.pScreenFeature = new ScreenFeatureElements();
		this.pMainFeatureOption = new MainFeatureOptionElements();
		this.pMainFeature = new MainFeatureElements();
		this.pUIFeature = new UIFeatureElements();
		this.pUIModule = new UIModuleElements();
		this.pBusinessFeatureType = new BusinessFeatureTypeElements();
		this.pBusinessFeature = new BusinessFeatureElements();
		this.pBusinessFeatures = new BusinessFeaturesElements();
		this.pBusinessModule = new BusinessModuleElements();
		this.pSystemModule = new SystemModuleElements();
		this.pSystemDefinition = new SystemDefinitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.domainmodel.Domainmodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=AbstractElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	//AbstractElement:
	//	NamespaceDeclaration | SystemDefinition;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Type:
	//	DomainEntity | DataType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//DataType: //'datatype' name = ID 'mappedto' javaType=[jvmTypes::JvmType | QualifiedName] ('config')? ('init' initValue=STRING )? ('persistable')?
	//	"datatype" name=ID "mappedto" mappedType=QualifiedName "config"? ("init" initValue=STRING)? "persistable"?;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//NamespaceDeclaration:
	//	"namespace" name=QualifiedName "{" namespaceElements+=AbstractNamespaceElement* "}";
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return pNamespaceDeclaration;
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//AbstractNamespaceElement:
	//	InterfaceDeclaration | StatelessComponent | DomainRepository | DomainEntity | DataType | Import;
	public AbstractNamespaceElementElements getAbstractNamespaceElementAccess() {
		return pAbstractNamespaceElement;
	}
	
	public ParserRule getAbstractNamespaceElementRule() {
		return getAbstractNamespaceElementAccess().getRule();
	}

	/// * Domain entity * / FeatureMappingOptions:
	//	"one2one" | "one2many" | "many2one" | "many2many";
	public FeatureMappingOptionsElements getFeatureMappingOptionsAccess() {
		return pFeatureMappingOptions;
	}
	
	public ParserRule getFeatureMappingOptionsRule() {
		return getFeatureMappingOptionsAccess().getRule();
	}

	//Feature:
	//	"ref"? name=ID (mappingOption=FeatureMappingOptions mapName=ID)? ":" type=[Type|QualifiedName];
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//DomainEntity:
	//	"domainentity" name=ID "{" features+=Feature* "}";
	public DomainEntityElements getDomainEntityAccess() {
		return pDomainEntity;
	}
	
	public ParserRule getDomainEntityRule() {
		return getDomainEntityAccess().getRule();
	}

	/// * Interface * / RestMethodCall:
	//	"GET" | "POST" | "PUT";
	public RestMethodCallElements getRestMethodCallAccess() {
		return pRestMethodCall;
	}
	
	public ParserRule getRestMethodCallRule() {
		return getRestMethodCallAccess().getRule();
	}

	//RestOperation:
	//	"@rest{" STRING ", " "Method." RestMethodCall "}";
	public RestOperationElements getRestOperationAccess() {
		return pRestOperation;
	}
	
	public ParserRule getRestOperationRule() {
		return getRestOperationAccess().getRule();
	}

	//MethodParameter:
	//	type=[Type|QualifiedName] name=ID;
	public MethodParameterElements getMethodParameterAccess() {
		return pMethodParameter;
	}
	
	public ParserRule getMethodParameterRule() {
		return getMethodParameterAccess().getRule();
	}

	//MethodParameters:
	//	parameters+=MethodParameter (", " parameters+=MethodParameter)*;
	public MethodParametersElements getMethodParametersAccess() {
		return pMethodParameters;
	}
	
	public ParserRule getMethodParametersRule() {
		return getMethodParametersAccess().getRule();
	}

	//MethodCall:
	//	name=ID "(" parameters=MethodParameters? ")";
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//InterfaceOperation:
	//	"operation" restOperation=RestOperation? methodCall=MethodCall ":" type=[Type|QualifiedName] "[]"?;
	public InterfaceOperationElements getInterfaceOperationAccess() {
		return pInterfaceOperation;
	}
	
	public ParserRule getInterfaceOperationRule() {
		return getInterfaceOperationAccess().getRule();
	}

	//InterfaceDeclaration:
	//	"interface" name=ID "{" operations+=InterfaceOperation* "}";
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return pInterfaceDeclaration;
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}

	/// * Stateless component * / InterfaceOperationUsageRule:
	//	("provides" | "requires") name=ID ":" interfaceName=[InterfaceDeclaration|QualifiedName];
	public InterfaceOperationUsageRuleElements getInterfaceOperationUsageRuleAccess() {
		return pInterfaceOperationUsageRule;
	}
	
	public ParserRule getInterfaceOperationUsageRuleRule() {
		return getInterfaceOperationUsageRuleAccess().getRule();
	}

	//InterfaceOperationsUsageRule:
	//	usageOperations+=InterfaceOperationUsageRule usageOperations+=InterfaceOperationUsageRule*;
	public InterfaceOperationsUsageRuleElements getInterfaceOperationsUsageRuleAccess() {
		return pInterfaceOperationsUsageRule;
	}
	
	public ParserRule getInterfaceOperationsUsageRuleRule() {
		return getInterfaceOperationsUsageRuleAccess().getRule();
	}

	//StatelessComponent:
	//	"stateless-component" name=ID "{" operations=InterfaceOperationsUsageRule? "}";
	public StatelessComponentElements getStatelessComponentAccess() {
		return pStatelessComponent;
	}
	
	public ParserRule getStatelessComponentRule() {
		return getStatelessComponentAccess().getRule();
	}

	/// * Domain repository * / DomainRepository:
	//	"domainrepository" "for" entityType=[DomainEntity|QualifiedName] name=ID "{" operations=InterfaceOperationsUsageRule?
	//	"}";
	public DomainRepositoryElements getDomainRepositoryAccess() {
		return pDomainRepository;
	}
	
	public ParserRule getDomainRepositoryRule() {
		return getDomainRepositoryAccess().getRule();
	}

	/// * System definition * / / * -> Entry parameters * / EntryParametersModule:
	//	"entryParameters" "{" entryFeatures+=ModelFeature entryFeatures+=ModelFeature* "}";
	public EntryParametersModuleElements getEntryParametersModuleAccess() {
		return pEntryParametersModule;
	}
	
	public ParserRule getEntryParametersModuleRule() {
		return getEntryParametersModuleAccess().getRule();
	}

	/// * -> Model * / ModelFeature:
	//	name=ID ":" type=[Type|QualifiedName] ("[]" "ordered"?)?;
	public ModelFeatureElements getModelFeatureAccess() {
		return pModelFeature;
	}
	
	public ParserRule getModelFeatureRule() {
		return getModelFeatureAccess().getRule();
	}

	//ModelModule:
	//	"model" "{" modelFeatures+=ModelFeature modelFeatures+=ModelFeature* "}";
	public ModelModuleElements getModelModuleAccess() {
		return pModelModule;
	}
	
	public ParserRule getModelModuleRule() {
		return getModelModuleAccess().getRule();
	}

	/// * -> View * / enum ContentElementLiteral:
	//	TEXT="text" | BUTTON="button" | LABEL="label" | LIST="list" | IMAGE="image";
	public ContentElementLiteralElements getContentElementLiteralAccess() {
		return unknownRuleContentElementLiteral;
	}
	
	public EnumRule getContentElementLiteralRule() {
		return getContentElementLiteralAccess().getRule();
	}

	//enum PropertyNameLiteral:
	//	LABEL_PROVIDER="labelProvider" | CSS_ITEM="cssItem" | TOOLTIP="tooltip" | RESOURCE_KEY="resourceKey" | STYLE="style"
	//	| PATH="path" | TYPE="type" | COLUMNS="columns";
	public PropertyNameLiteralElements getPropertyNameLiteralAccess() {
		return unknownRulePropertyNameLiteral;
	}
	
	public EnumRule getPropertyNameLiteralRule() {
		return getPropertyNameLiteralAccess().getRule();
	}

	//ElementFeature:
	//	propertyName=PropertyNameLiteral ":" propertyValue=STRING;
	public ElementFeatureElements getElementFeatureAccess() {
		return pElementFeature;
	}
	
	public ParserRule getElementFeatureRule() {
		return getElementFeatureAccess().getRule();
	}

	//ContentElement:
	//	contentElement=ContentElementLiteral name=ID "(" (features+=ElementFeature (", " features+=ElementFeature)*)? ")";
	public ContentElementElements getContentElementAccess() {
		return pContentElement;
	}
	
	public ParserRule getContentElementRule() {
		return getContentElementAccess().getRule();
	}

	//enum ContainerElementLiteral:
	//	LAYOUT="layout" | SCREEN="screen";
	public ContainerElementLiteralElements getContainerElementLiteralAccess() {
		return unknownRuleContainerElementLiteral;
	}
	
	public EnumRule getContainerElementLiteralRule() {
		return getContainerElementLiteralAccess().getRule();
	}

	//ContainerElement:
	//	container=ContainerElementLiteral name=ID? ("(" features+=ElementFeature (", " features+=ElementFeature)* ")")? ("{"
	//	elements+=ViewElement elements+=ViewElement* "}")?;
	public ContainerElementElements getContainerElementAccess() {
		return pContainerElement;
	}
	
	public ParserRule getContainerElementRule() {
		return getContainerElementAccess().getRule();
	}

	//ViewElement:
	//	ContainerElement | ContentElement;
	public ViewElementElements getViewElementAccess() {
		return pViewElement;
	}
	
	public ParserRule getViewElementRule() {
		return getViewElementAccess().getRule();
	}

	//ViewModule:
	//	"view" "{" elements+=ViewElement //name=ID
	//	"}";
	public ViewModuleElements getViewModuleAccess() {
		return pViewModule;
	}
	
	public ParserRule getViewModuleRule() {
		return getViewModuleAccess().getRule();
	}

	/// * -> Controller * / / * -> Controller.InitAction * / ValidateAction:
	//	"validate" condition=[ValidatorFeature] "on" uiReceiver=SetUIElementReceiver;
	public ValidateActionElements getValidateActionAccess() {
		return pValidateAction;
	}
	
	public ParserRule getValidateActionRule() {
		return getValidateActionAccess().getRule();
	}

	//AttachAction:
	//	"attach" uiAction=[UIActionModule] "to" uiReceiver=SetUIElementReceiver;
	public AttachActionElements getAttachActionAccess() {
		return pAttachAction;
	}
	
	public ParserRule getAttachActionRule() {
		return getAttachActionAccess().getRule();
	}

	//BindEnumSource:
	//	"enumDataSource" "(" "className" ":" enumType=STRING ")";
	public BindEnumSourceElements getBindEnumSourceAccess() {
		return pBindEnumSource;
	}
	
	public ParserRule getBindEnumSourceRule() {
		return getBindEnumSourceAccess().getRule();
	}

	//BindSource:
	//	modelFeatureName=[ModelFeature] | BindEnumSource;
	public BindSourceElements getBindSourceAccess() {
		return pBindSource;
	}
	
	public ParserRule getBindSourceRule() {
		return getBindSourceAccess().getRule();
	}

	//BindAction:
	//	"bind" bindSource=BindSource ("." attribute=ID)? "to" uiReceiver=SetUIElementReceiver;
	public BindActionElements getBindActionAccess() {
		return pBindAction;
	}
	
	public ParserRule getBindActionRule() {
		return getBindActionAccess().getRule();
	}

	//InitActionFeature:
	//	SetAction | AttachAction | ValidateAction | BindAction;
	public InitActionFeatureElements getInitActionFeatureAccess() {
		return pInitActionFeature;
	}
	
	public ParserRule getInitActionFeatureRule() {
		return getInitActionFeatureAccess().getRule();
	}

	//InitActionModule:
	//	"initaction" "{" initActionFeatures+=InitActionFeature initActionFeatures+=InitActionFeature* "}";
	public InitActionModuleElements getInitActionModuleAccess() {
		return pInitActionModule;
	}
	
	public ParserRule getInitActionModuleRule() {
		return getInitActionModuleAccess().getRule();
	}

	/// * -> Controller.Validator * / ValidatorRule:
	//	stringRule=STRING | conditionName=[ValidatorFeature];
	public ValidatorRuleElements getValidatorRuleAccess() {
		return pValidatorRule;
	}
	
	public ParserRule getValidatorRuleRule() {
		return getValidatorRuleAccess().getRule();
	}

	//ValidatorRules:
	//	validatorRules+=ValidatorRule ("and" validatorRules+=ValidatorRule)*;
	public ValidatorRulesElements getValidatorRulesAccess() {
		return pValidatorRules;
	}
	
	public ParserRule getValidatorRulesRule() {
		return getValidatorRulesAccess().getRule();
	}

	//ValidatorFeature:
	//	"condition" name=ID "(" validatorRules=ValidatorRules ")";
	public ValidatorFeatureElements getValidatorFeatureAccess() {
		return pValidatorFeature;
	}
	
	public ParserRule getValidatorFeatureRule() {
		return getValidatorFeatureAccess().getRule();
	}

	//ValidatorModule:
	//	"validator" "{" validatorFeatures+=ValidatorFeature validatorFeatures+=ValidatorFeature* "}";
	public ValidatorModuleElements getValidatorModuleAccess() {
		return pValidatorModule;
	}
	
	public ParserRule getValidatorModuleRule() {
		return getValidatorModuleAccess().getRule();
	}

	/// * -> Controller.UIAction * / ScreenModelParameter:
	//	modelFeatureName=[ModelFeature|QualifiedName] ":" modelFeatureValue=STRING;
	public ScreenModelParameterElements getScreenModelParameterAccess() {
		return pScreenModelParameter;
	}
	
	public ParserRule getScreenModelParameterRule() {
		return getScreenModelParameterAccess().getRule();
	}

	//ScreenModelParameters:
	//	parameters+=ScreenModelParameter (", " parameters+=ScreenModelParameter)*;
	public ScreenModelParametersElements getScreenModelParametersAccess() {
		return pScreenModelParameters;
	}
	
	public ParserRule getScreenModelParametersRule() {
		return getScreenModelParametersAccess().getRule();
	}

	//NavigateToAction:
	//	"navigateto" screenElementId=[ScreenFeature] ("(" modelFeatures=ScreenModelParameters ")")?;
	public NavigateToActionElements getNavigateToActionAccess() {
		return pNavigateToAction;
	}
	
	public ParserRule getNavigateToActionRule() {
		return getNavigateToActionAccess().getRule();
	}

	//ExecuteAction:
	//	"execute" uiActionName=[UIActionModule];
	public ExecuteActionElements getExecuteActionAccess() {
		return pExecuteAction;
	}
	
	public ParserRule getExecuteActionRule() {
		return getExecuteActionAccess().getRule();
	}

	//SetRestCallReceiverURLParameter:
	//	"url" ":" parameterType=STRING;
	public SetRestCallReceiverURLParameterElements getSetRestCallReceiverURLParameterAccess() {
		return pSetRestCallReceiverURLParameter;
	}
	
	public ParserRule getSetRestCallReceiverURLParameterRule() {
		return getSetRestCallReceiverURLParameterAccess().getRule();
	}

	//SetRestCallReceiverReturnTypeParameter:
	//	"returnType" ":" parameterType=[Type|QualifiedName];
	public SetRestCallReceiverReturnTypeParameterElements getSetRestCallReceiverReturnTypeParameterAccess() {
		return pSetRestCallReceiverReturnTypeParameter;
	}
	
	public ParserRule getSetRestCallReceiverReturnTypeParameterRule() {
		return getSetRestCallReceiverReturnTypeParameterAccess().getRule();
	}

	//SetRestCallReceiverIDParameter:
	//	("id" | "update") ":" parameterType=ID;
	public SetRestCallReceiverIDParameterElements getSetRestCallReceiverIDParameterAccess() {
		return pSetRestCallReceiverIDParameter;
	}
	
	public ParserRule getSetRestCallReceiverIDParameterRule() {
		return getSetRestCallReceiverIDParameterAccess().getRule();
	}

	//SetRestCallReceiverParameter:
	//	SetRestCallReceiverURLParameter | SetRestCallReceiverReturnTypeParameter | SetRestCallReceiverIDParameter;
	public SetRestCallReceiverParameterElements getSetRestCallReceiverParameterAccess() {
		return pSetRestCallReceiverParameter;
	}
	
	public ParserRule getSetRestCallReceiverParameterRule() {
		return getSetRestCallReceiverParameterAccess().getRule();
	}

	//SetRestCallReceiverParameters:
	//	parameters+=SetRestCallReceiverParameter (", " parameters+=SetRestCallReceiverParameter)*;
	public SetRestCallReceiverParametersElements getSetRestCallReceiverParametersAccess() {
		return pSetRestCallReceiverParameters;
	}
	
	public ParserRule getSetRestCallReceiverParametersRule() {
		return getSetRestCallReceiverParametersAccess().getRule();
	}

	//SetRestCallReceiver:
	//	"restcall" "(" parameters+=SetRestCallReceiverParameters ")";
	public SetRestCallReceiverElements getSetRestCallReceiverAccess() {
		return pSetRestCallReceiver;
	}
	
	public ParserRule getSetRestCallReceiverRule() {
		return getSetRestCallReceiverAccess().getRule();
	}

	//enum UIElementReceiverKey:
	//	SELECTION="selection" | VALUES_="values" | ON_SELECTION="onSelection" | TEXT="text";
	public UIElementReceiverKeyElements getUIElementReceiverKeyAccess() {
		return unknownRuleUIElementReceiverKey;
	}
	
	public EnumRule getUIElementReceiverKeyRule() {
		return getUIElementReceiverKeyAccess().getRule();
	}

	//SetUIElementReceiver:
	//	widgetName=[ViewElement] "." uiKey=UIElementReceiverKey;
	public SetUIElementReceiverElements getSetUIElementReceiverAccess() {
		return pSetUIElementReceiver;
	}
	
	public ParserRule getSetUIElementReceiverRule() {
		return getSetUIElementReceiverAccess().getRule();
	}

	//SetActionReceiver:
	//	SetRestCallReceiver | SetUIElementReceiver;
	public SetActionReceiverElements getSetActionReceiverAccess() {
		return pSetActionReceiver;
	}
	
	public ParserRule getSetActionReceiverRule() {
		return getSetActionReceiverAccess().getRule();
	}

	//SetAction:
	//	"set" modelFeatureName=[ModelFeature] "to" setActionReceiver=SetActionReceiver;
	public SetActionElements getSetActionAccess() {
		return pSetAction;
	}
	
	public ParserRule getSetActionRule() {
		return getSetActionAccess().getRule();
	}

	//InterfaceMethodCallParameter:
	//	parameterName=[MethodParameter|QualifiedName] ":" parameterType=(ID | STRING);
	public InterfaceMethodCallParameterElements getInterfaceMethodCallParameterAccess() {
		return pInterfaceMethodCallParameter;
	}
	
	public ParserRule getInterfaceMethodCallParameterRule() {
		return getInterfaceMethodCallParameterAccess().getRule();
	}

	//InterfaceMethodCallParameters:
	//	parameters+=InterfaceMethodCallParameter (", " parameters+=InterfaceMethodCallParameter)*;
	public InterfaceMethodCallParametersElements getInterfaceMethodCallParametersAccess() {
		return pInterfaceMethodCallParameters;
	}
	
	public ParserRule getInterfaceMethodCallParametersRule() {
		return getInterfaceMethodCallParametersAccess().getRule();
	}

	//InterfaceMethodCall:
	//	interfaceInstanceName=[BusinessFeature] "." methodName=[MethodCall|QualifiedName] "("
	//	parameters+=InterfaceMethodCallParameters ")";
	public InterfaceMethodCallElements getInterfaceMethodCallAccess() {
		return pInterfaceMethodCall;
	}
	
	public ParserRule getInterfaceMethodCallRule() {
		return getInterfaceMethodCallAccess().getRule();
	}

	//UIActionFeature:
	//	NavigateToAction | ExecuteAction | SetAction | InterfaceMethodCall;
	public UIActionFeatureElements getUIActionFeatureAccess() {
		return pUIActionFeature;
	}
	
	public ParserRule getUIActionFeatureRule() {
		return getUIActionFeatureAccess().getRule();
	}

	//UIActionModule:
	//	"uiaction" name=ID "{" uiActionFeatures+=UIActionFeature uiActionFeatures+=UIActionFeature* "}";
	public UIActionModuleElements getUIActionModuleAccess() {
		return pUIActionModule;
	}
	
	public ParserRule getUIActionModuleRule() {
		return getUIActionModuleAccess().getRule();
	}

	//ControllerElement:
	//	UIActionModule | InitActionModule | ValidatorModule;
	public ControllerElementElements getControllerElementAccess() {
		return pControllerElement;
	}
	
	public ParserRule getControllerElementRule() {
		return getControllerElementAccess().getRule();
	}

	//ControllerModule:
	//	"controller" "{" elements+=ControllerElement elements+=ControllerElement* "}";
	public ControllerModuleElements getControllerModuleAccess() {
		return pControllerModule;
	}
	
	public ParserRule getControllerModuleRule() {
		return getControllerModuleAccess().getRule();
	}

	//ScreenModule:
	//	EntryParametersModule | ModelModule | ViewModule | ControllerModule;
	public ScreenModuleElements getScreenModuleAccess() {
		return pScreenModule;
	}
	
	public ParserRule getScreenModuleRule() {
		return getScreenModuleAccess().getRule();
	}

	//ScreenFeature:
	//	"screen" name=ID "{" screenModules+=ScreenModule screenModules+=ScreenModule* "}";
	public ScreenFeatureElements getScreenFeatureAccess() {
		return pScreenFeature;
	}
	
	public ParserRule getScreenFeatureRule() {
		return getScreenFeatureAccess().getRule();
	}

	//MainFeatureOption:
	//	("appName" | "appVersion" | "entryScreen" | "devices" | "style") ":" name=STRING;
	public MainFeatureOptionElements getMainFeatureOptionAccess() {
		return pMainFeatureOption;
	}
	
	public ParserRule getMainFeatureOptionRule() {
		return getMainFeatureOptionAccess().getRule();
	}

	//MainFeature:
	//	"main" "(" features+=MainFeatureOption (", " features+=MainFeatureOption)* ")";
	public MainFeatureElements getMainFeatureAccess() {
		return pMainFeature;
	}
	
	public ParserRule getMainFeatureRule() {
		return getMainFeatureAccess().getRule();
	}

	//UIFeature:
	//	MainFeature | ScreenFeature;
	public UIFeatureElements getUIFeatureAccess() {
		return pUIFeature;
	}
	
	public ParserRule getUIFeatureRule() {
		return getUIFeatureAccess().getRule();
	}

	//UIModule:
	//	"uiSystem" "{" uiFeatures+=UIFeature uiFeatures+=UIFeature* "}";
	public UIModuleElements getUIModuleAccess() {
		return pUIModule;
	}
	
	public ParserRule getUIModuleRule() {
		return getUIModuleAccess().getRule();
	}

	//BusinessFeatureType:
	//	InterfaceDeclaration | DomainRepository | StatelessComponent;
	public BusinessFeatureTypeElements getBusinessFeatureTypeAccess() {
		return pBusinessFeatureType;
	}
	
	public ParserRule getBusinessFeatureTypeRule() {
		return getBusinessFeatureTypeAccess().getRule();
	}

	//BusinessFeature:
	//	"instance" name=ID ":" type=[BusinessFeatureType|QualifiedName] ("{" connectPoint1=ID "to"
	//	connectPoint2=[BusinessFeature] "=>" connectEnd=ID "}")?;
	public BusinessFeatureElements getBusinessFeatureAccess() {
		return pBusinessFeature;
	}
	
	public ParserRule getBusinessFeatureRule() {
		return getBusinessFeatureAccess().getRule();
	}

	//BusinessFeatures:
	//	features+=BusinessFeature features+=BusinessFeature*;
	public BusinessFeaturesElements getBusinessFeaturesAccess() {
		return pBusinessFeatures;
	}
	
	public ParserRule getBusinessFeaturesRule() {
		return getBusinessFeaturesAccess().getRule();
	}

	//BusinessModule:
	//	"businessSystem" "{" BusinessFeatures "}";
	public BusinessModuleElements getBusinessModuleAccess() {
		return pBusinessModule;
	}
	
	public ParserRule getBusinessModuleRule() {
		return getBusinessModuleAccess().getRule();
	}

	//SystemModule:
	//	BusinessModule | UIModule;
	public SystemModuleElements getSystemModuleAccess() {
		return pSystemModule;
	}
	
	public ParserRule getSystemModuleRule() {
		return getSystemModuleAccess().getRule();
	}

	//SystemDefinition:
	//	"system" name=ID "{" modules+=SystemModule modules+=SystemModule* "}";
	public SystemDefinitionElements getSystemDefinitionAccess() {
		return pSystemDefinition;
	}
	
	public ParserRule getSystemDefinitionRule() {
		return getSystemDefinitionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
